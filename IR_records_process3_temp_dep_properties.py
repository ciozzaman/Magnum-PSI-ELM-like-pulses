import numpy as np
exec(open("/home/ffederic/work/analysis_scripts/scripts/preamble_import_pc.py").read())
# import matplotlib.pyplot as plt
#import .functions
os.chdir('/home/ffederic/work/Collaboratory/test/experimental_data')
from functions.spectools import rotate,do_tilt, binData, get_angle, get_tilt,get_angle_2
from functions.Calibrate import do_waveL_Calib, do_Intensity_Calib
from functions.fabio_add import find_nearest_index,multi_gaussian,all_file_names,load_dark,find_index_of_file,get_metadata,movie_from_data,get_angle_no_lines,do_tilt_no_lines,four_point_transform,fix_minimum_signal,fix_minimum_signal2,get_bin_and_interv_no_lines,examine_current_trace
from functions.GetSpectrumGeometry import getGeom
from functions.SpectralFit import doSpecFit_single_frame
from functions.GaussFitData import doLateralfit_time_tependent
import collections

import os,sys
from PIL import Image
import xarray as xr
import pandas as pd
import copy
from uncertainties.unumpy import exp,nominal_values,std_devs,erf
from uncertainties import ufloat,unumpy,correlated_values
from scipy.optimize import curve_fit
from scipy import interpolate
from scipy.signal import find_peaks, peak_prominences as get_proms
from multiprocessing import Pool,cpu_count
number_cpu_available = cpu_count()
print('Number of cores available: '+str(number_cpu_available))


os.chdir('/home/ffederic/work/Collaboratory/test/experimental_data/functions')
print(os.path.abspath(os.getcwd()))
import pyradi.ryptw as ryptw

fdir = '/home/ffederic/work/Collaboratory/test/experimental_data'
df_log = pd.read_csv('/home/ffederic/work/Collaboratory/test/experimental_data/functions/Log/shots_3.csv',index_col=0)
df_settings = pd.read_csv('/home/ffederic/work/Collaboratory/test/experimental_data/functions/Log/settings_3.csv',index_col=0)

exec(open("/home/ffederic/work/Collaboratory/test/experimental_data/IR_records_process_preamble.py").read())
figure_index=0

# molybdenum data
thermal_conductivity = TZM_thermal_conductivity_interp_simple	# W/mK
heat_capacity = TZM_heat_capacity_interp_simple	# J/kg k
density = TZM_density_interp_simple(20)	# kg/m3
de=0.05
color = ['b', 'r', 'm', 'y', 'g', 'c', 'slategrey', 'darkorange', 'lime', 'pink', 'gainsboro', 'paleturquoise', 'teal', 'olive']


def exponential_decay(time,*args):
	out = args[1]*np.exp(-(time-args[3])/args[2]) + args[0]
	return out

def semi_infinite_sink_full_increase_K(max_total_time):
	def function(time,*args):
		out = (args[1]/((max_total_time-args[3])*args[2]))*2/((np.pi*thermal_conductivity(args[0]-273.15)*heat_capacity(args[0]-273.15)*density)**0.5) *((time-args[3])**0.5) + args[0]
		# print(out)
		return np.nanmax([np.ones_like(out)*args[0],out],axis=0)
	return function

# this comes from the analytical solution in Laser Processing and Chemistry, B채uerle, Dieter, 1996
def semi_infinite_sink_gaussian_beam_square_wave_increase_K(max_total_time,beam_width):
	def function(time,*args):
		diffusivity = thermal_conductivity(args[0]-273.15)/(heat_capacity(args[0]-273.15)*density)
		time_adimensional = (time-args[3])*diffusivity/(beam_width**2)
		duration_adimentional = (max_total_time-args[3])*args[2]*diffusivity/(beam_width**2)
		theta_c = (np.pi**0.5)*beam_width*args[1]/(2*(max_total_time-args[3])*args[2]*thermal_conductivity(args[0]-273.15))
		out = 2/np.pi *theta_c * ( np.arctan(2*(time_adimensional**0.5)) ) + args[0]
		# print(out)
		# return np.nanmax([np.ones_like(out)*args[0],out],axis=0)
		return out
	return function

# this comes from the analytical solution in Laser Processing and Chemistry, B채uerle, Dieter, 1996
def semi_infinite_sink_gaussian_beam_triangular_wave_increase_K(max_total_time,beam_width):
	def function(time,*args):
		diffusivity = thermal_conductivity(args[0]-273.15)/(heat_capacity(args[0]-273.15)*density)
		time_adimensional = (time-args[3])*diffusivity/(beam_width**2)
		increase_duration_adimentional = (max_total_time-args[3])*args[2]*diffusivity/(beam_width**2)
		decrease_duration_adimentional = (max_total_time-args[3])*(1-args[2])*args[4]*diffusivity/(beam_width**2)
		theta_c = (np.pi**0.5)*beam_width*args[1]*2/(2*((max_total_time-args[3])*args[2] + (max_total_time-args[3])*(1-args[2])*args[4])*thermal_conductivity(args[0]-273.15))	# the first *2 comes from the fact that in a triangle the area is half of a rectangle. power density*duration/2=energy
		out = np.zeros_like(time_adimensional)
		out[time_adimensional<=increase_duration_adimentional] = 2/(np.pi) *theta_c * ( 1/increase_duration_adimentional * solution_for_ramp(time_adimensional[time_adimensional<=increase_duration_adimentional],0) ) + args[0]
		out[time_adimensional>increase_duration_adimentional] = 2/(np.pi) *theta_c * ( 1/increase_duration_adimentional * solution_for_ramp(time_adimensional[time_adimensional>increase_duration_adimentional],0) - 1/increase_duration_adimentional * solution_for_ramp(time_adimensional[time_adimensional>increase_duration_adimentional],increase_duration_adimentional) - 1/decrease_duration_adimentional * solution_for_ramp(time_adimensional[time_adimensional>increase_duration_adimentional],increase_duration_adimentional) ) + args[0]
		# print(out)
		# return np.nanmax([np.ones_like(out)*args[0],out],axis=0)
		return out
	return function


def semi_infinite_sink_full_decrease_K(max_total_time):
	def function(time,*args):
		out = (args[1]/((max_total_time-args[3])*args[2]))*2/((np.pi*thermal_conductivity(args[0]-273.15)*heat_capacity(args[0]-273.15)*density)**0.5) *((time-args[3])**0.5 - (time-args[3]-(max_total_time-args[3])*args[2])**0.5) + args[0]
		# print(out)
		return np.nanmax([np.zeros_like(out),out],axis=0)
	return function

# this comes from the analytical solution in Laser Processing and Chemistry, B채uerle, Dieter, 1996
def semi_infinite_sink_gaussian_beam_square_wave_decrease_K(max_total_time,beam_width):
	def function(time,*args):
		diffusivity = thermal_conductivity(args[0]-273.15)/(heat_capacity(args[0]-273.15)*density)
		time_adimensional = (time-args[3])*diffusivity/(beam_width**2)
		duration_adimentional = (max_total_time-args[3])*args[2]*diffusivity/(beam_width**2)
		theta_c = (np.pi**0.5)*beam_width*args[1]/(2*(max_total_time-args[3])*args[2]*thermal_conductivity(args[0]-273.15))
		out = 2/np.pi *theta_c * ( np.arctan(2*(time_adimensional**0.5)) - np.arctan(2*((time_adimensional-duration_adimentional)**0.5)) ) + args[0]
		# print(out)
		# return np.nanmax([np.ones_like(out)*args[0],out],axis=0)
		return out
	return function

# this comes from the analytical solution in Laser Processing and Chemistry, B채uerle, Dieter, 1996
solution_for_ramp = lambda t, t0: (t-t0)*np.arctan(2*((t-t0)**0.5)) - (2*((t-t0)**0.5) - np.arctan(2*((t-t0)**0.5)))/4
def semi_infinite_sink_gaussian_beam_triangular_wave_decrease_K(max_total_time,beam_width):
	def function(time,*args):
		diffusivity = thermal_conductivity(args[0]-273.15)/(heat_capacity(args[0]-273.15)*density)
		time_adimensional = (time-args[3])*diffusivity/(beam_width**2)
		increase_duration_adimentional = (max_total_time-args[3])*args[2]*diffusivity/(beam_width**2)
		decrease_duration_adimentional = (max_total_time-args[3])*(1-args[2])*args[4]*diffusivity/(beam_width**2)
		theta_c = (np.pi**0.5)*beam_width*args[1]*2/(2*((max_total_time-args[3])*args[2] + (max_total_time-args[3])*(1-args[2])*args[4])*thermal_conductivity(args[0]-273.15))	# the first *2 comes from the fact that in a triangle the area is half of a rectangle. power density*duration/2=energy
		out = 2/(np.pi) *theta_c * ( 1/increase_duration_adimentional * solution_for_ramp(time_adimensional,0) - 1/increase_duration_adimentional * solution_for_ramp(time_adimensional,increase_duration_adimentional) - 1/decrease_duration_adimentional * solution_for_ramp(time_adimensional,increase_duration_adimentional) + 1/decrease_duration_adimentional * solution_for_ramp(time_adimensional,increase_duration_adimentional+decrease_duration_adimentional) ) + args[0]
		# print(out)
		# return np.nanmax([np.ones_like(out)*args[0],out],axis=0)
		return out
	return function


def semi_infinite_sink_gaussian_beam_square_wave_increase_and_decrease_K(max_total_time,beam_width):
	def function(time,*args):
		diffusivity = thermal_conductivity(args[0]-273.15)/(heat_capacity(args[0]-273.15)*density)
		time_adimensional = (time-args[3])*diffusivity/(beam_width**2)
		duration_adimentional = (max_total_time-args[3])*args[2]*diffusivity/(beam_width**2)
		output = np.zeros_like(time)+args[0]
		output[np.logical_and(time_adimensional>0,time_adimensional<=duration_adimentional)] = semi_infinite_sink_gaussian_beam_square_wave_increase_K(max_total_time,beam_width)(time[np.logical_and(time_adimensional>0,time_adimensional<=duration_adimentional)],*args)
		output[time_adimensional>duration_adimentional] = semi_infinite_sink_gaussian_beam_square_wave_decrease_K(max_total_time,beam_width)(time[time_adimensional>duration_adimentional],*args)
		return output
	return function

def semi_infinite_sink_gaussian_beam_triangular_wave_increase_and_decrease_K(max_total_time,beam_width):
	def function(time,*args):
		diffusivity = thermal_conductivity(args[0]-273.15)/(heat_capacity(args[0]-273.15)*density)
		time_adimensional = (time-args[3])*diffusivity/(beam_width**2)
		increase_duration_adimentional = (max_total_time-args[3])*args[2]*diffusivity/(beam_width**2)
		decrease_duration_adimentional = (max_total_time-args[3])*(1-args[2])*args[4]*diffusivity/(beam_width**2)
		output = np.zeros_like(time)+args[0]
		output[np.logical_and(time_adimensional>0,time_adimensional<=increase_duration_adimentional+decrease_duration_adimentional)] = semi_infinite_sink_gaussian_beam_triangular_wave_increase_K(max_total_time,beam_width)(time[np.logical_and(time_adimensional>0,time_adimensional<=increase_duration_adimentional+decrease_duration_adimentional)],*args)
		output[time_adimensional>increase_duration_adimentional+decrease_duration_adimentional] = semi_infinite_sink_gaussian_beam_triangular_wave_decrease_K(max_total_time,beam_width)(time[time_adimensional>increase_duration_adimentional+decrease_duration_adimentional],*args)
		return output
	return function

def semi_infinite_sink_full_increase_and_decrease_K(max_total_time):
	def function(time,*args):
		time_adimensional = time-args[3]
		duration_adimentional = (max_total_time-args[3])*args[2]
		output = np.zeros_like(time)+args[0]
		output[np.logical_and(time_adimensional>0,time_adimensional<=duration_adimentional)] = semi_infinite_sink_full_increase_K(max_total_time)(time[np.logical_and(time_adimensional>0,time_adimensional<=duration_adimentional)],*args)
		output[time_adimensional>duration_adimentional] = semi_infinite_sink_full_decrease_K(max_total_time)(time[time_adimensional>duration_adimentional],*args)
		return output
	return function


def gaussian_1D_fitting(spatial_coord,*args):
	out = args[1]*np.exp(- (spatial_coord**2)/(2*(args[2]**2)) ) + args[0]
	return out

def power_input(time,r):	# in W/m2
	out = 8e8*np.exp(-(r**2)/(2*(0.005**2)))*(0.0917*0.1+0.5*0.7*np.exp(-((time-0.00033)**2)/(2*(0.000144**2)))+0.5*0.208*np.exp(-((time-0.000457)**2)/(2*(0.000218**2))))
	return out

# simulated strong pulses
# heat_flux = 8e8e^(-(r^2)/(2*(0.005^2)))*(0.0917*0.1+0.5*0.7*e^(-((t-0.00033-1)^2)/(2*(0.000144^2)))+0.5*0.208*e^(-((t-0.000457-1)^2)/(2*(0.000218^2))))

a=np.array([0,0.0000300407,0.0000629425,0.0000909567,0.000114441,0.000134826,0.000157356,0.00017345,0.000191212,0.000205636,0.000221491,0.000234962,0.000249863,0.000266194,0.000279784,0.000294566,0.000311017,0.000329018,0.000329971,0.00034976,0.000371575,0.000395536,0.000421882,0.000450849,0.000482798,0.000517845,0.000556469,0.000598908,0.00063622,0.000677347,0.000722527,0.000772238,0.000826955,0.000887155,0.000953317,0.00102603,0.00110614,0.00119424,0.00129104,0.00139761,0.00151491,0.0016439,0.00171006,0.0018518,0.00200784,0.0021795,0.00236833,0.00257599,0.0028044,0.00305569,0.00333214,0.00363624,0.00397062,0.00433862,0.00474334,0.00518846,0.00567818,0.00621688,0.00680935,0.00740182,0.00799441,0.00858688,0.00917947,0.00977194,0.0103645,0.010957,0.0115496,0.0121421,0.0127347,0.0133271,0.0139197,0.0145122,0.0151048,0.0156972,0.0162898,0.0168823,0.0174749,0.0180674,0.01866,0.0192524,0.019845,0.0204375,0.0210301,0.0216225,0.0222151,0.0228076,0.0234002,0.0239927,0.0245852,0.0251777,0.0257703,0.0263628,0.0269554,0.0275478,0.0281404,0.0287329,0.0293255,0.029918,0.03])
b=np.array([690.94,704.437,718.788,733.917,749.178,764.69,784.35,799.761,818.131,833.891,852.019,867.924,885.715,905.361,921.429,938.641,956.721,975.186,976.266,994.176,1010.87,1024.98,1035.18,1040.21,1039.14,1031.71,1018.52,1001,985.095,968.163,950.93,933.912,917.439,901.782,887.221,873.991,862.173,851.664,842.247,833.704,825.866,818.615,815.198,808.958,803.079,797.532,792.291,787.33,782.63,778.173,773.942,769.923,766.103,762.471,759.015,755.725,752.592,749.607,746.763,744.27,742.063,740.092,738.318,736.71,735.245,733.903,732.667,731.525,730.464,729.476,728.553,727.688,726.874,726.108,725.384,724.699,724.05,723.433,722.845,722.285,721.751,721.24,720.75,720.281,719.831,719.399,718.983,718.582,718.196,717.823,717.464,717.116,716.78,716.455,716.14,715.835,715.538,715.251,715.211])
a1=np.array([0,0,0,0,0,0,0.00000298023,0.00000596046,0.0000089407,0.0000119209,0.0000149012,0.0000177622,0.0000207424,0.0000237226,0.0000267029,0.0000296831,0.0000326633,0.0000356436,0.0000386238,0.000041604,0.0000445843,0.0000475645,0.0000505447,0.0000534058,0.000056386,0.0000593662,0.0000623465,0.0000653267,0.0000683069,0.0000712872,0.0000742674,0.0000772476,0.0000802278,0.0000832081,0.0000861883,0.0000890493,0.0000920296,0.0000950098,0.00009799,0.00010097,0.000103951,0.000106931,0.000109911,0.000112891,0.000115871,0.000118852,0.000121713,0.000124693,0.000127673,0.000130653,0.000133634,0.000136614,0.000139594,0.000142574,0.000145555,0.000148535,0.000151515,0.000154495,0.000157356,0.000160336,0.000163317,0.000166297,0.000169277,0.000172257,0.000175238,0.000178218,0.000181198,0.000184178,0.000187159,0.000190139,0.000193,0.00019598,0.00019896,0.00020194,0.000204921,0.000207901,0.000210881,0.000213862,0.000216842,0.000219822,0.000222802,0.000225663,0.000228643,0.000231624,0.000234604,0.000237584,0.000240564,0.000243545,0.000246525,0.000249505,0.000252485,0.000255465,0.000258446,0.000261307,0.000264287,0.000267267,0.000270247,0.000273228,0.000276208,0.000279188,0.000282168,0.000285149,0.000288129,0.000291109,0.000294089,0.00029695,0.000347018,0.000396967,0.000447035,0.000496983,0.000547051,0.000597,0.000646949,0.000697017,0.000746965,0.000797033,0.000846982,0.00089705,0.000946999,0.000996947,0.00104702,0.00109696,0.00114703,0.00119698,0.00124705,0.001297,0.00134695,0.00139701,0.00144696,0.00149703,0.00154698,0.00159705,0.001647,0.00169694,0.00174701,0.00179696,0.00184703,0.00189698,0.00194704,0.00199699,0.00204694,0.00209701,0.00214696,0.00219703,0.00224698,0.00229704,0.00234699,0.00239694,0.00244701,0.00249696,0.00254703,0.00259697,0.00264704,0.00269699,0.00274706,0.00279701,0.00284696,0.00289702,0.00294697,0.00299704,0.00304699,0.00309706,0.00314701,0.00319696,0.00324702,0.00329697,0.00334704,0.00339699,0.00344706,0.00349701,0.00354695,0.00359702,0.00364697,0.00369704,0.00374699,0.00379705,0.003847,0.00389695,0.00394702,0.00399697,0.00404704,0.00409699,0.00414705,0.004197,0.00424695,0.00429702,0.00434697,0.00439703,0.00444698,0.00449705,0.004547,0.00459695,0.00464702,0.00469696,0.00474703,0.00479698,0.00484705,0.004897,0.00494695,0.00499701,0.00504696,0.00509703,0.00514698,0.00519705,0.005247,0.00529695,0.00559699,0.00589705,0.00619698,0.00649703,0.00679696,0.00709701,0.00739706,0.00769699,0.00799704,0.00829697,0.00859702,0.00889695,0.009197,0.00949705,0.00979698,0.010097,0.010397,0.010697,0.0109971,0.011297,0.011597,0.011897,0.012197,0.0124969,0.012797,0.0130971,0.013397,0.013697,0.013997,0.014297,0.0145971,0.014897,0.015197,0.015497,0.015797,0.0160969,0.016397,0.0166971,0.016997,0.017297,0.017597,0.017897,0.0181969,0.018497,0.018797,0.019097,0.019397,0.019697,0.019997,0.0202971,0.020597,0.020897,0.021197,0.021497,0.0217969,0.022097,0.022397,0.022697,0.022997,0.023297,0.023597,0.023897,0.024197,0.024497,0.024797,0.025097,0.0253969,0.025697,0.025997,0.026297,0.026597,0.0268969,0.027197,0.027497,0.027797,0.028097,0.028397,0.028697,0.0289969,0.029297,0.029597,0.029897,0.030197,0.0304969,0.030797,0.0310971,0.031397,0.031697,0.031997,0.032297,0.0325969,0.032897,0.033197,0.033497,0.033797,0.034097,0.034397,0.0346971,0.034997,0.035297])
b1=np.array([690.94,690.94,690.94,690.94,690.94,690.94,740.964,766.925,786.097,801.996,815.877,828.355,839.785,850.392,860.333,869.719,878.634,887.143,895.296,903.134,910.692,917.997,925.073,931.941,938.618,945.118,951.456,957.642,963.688,969.602,975.393,981.067,986.633,992.095,997.46,1002.73,1007.92,1013.02,1018.04,1022.98,1027.85,1032.65,1037.39,1042.06,1046.67,1051.22,1055.72,1060.16,1064.54,1068.88,1073.16,1077.4,1081.59,1085.74,1089.85,1093.91,1097.93,1101.91,1105.86,1109.77,1113.64,1117.47,1121.27,1125.04,1128.78,1132.48,1136.15,1139.8,1143.41,1147,1150.56,1154.09,1157.59,1161.07,1164.52,1167.94,1171.35,1174.72,1178.08,1181.41,1184.72,1188.01,1191.27,1194.52,1197.74,1200.94,1204.13,1207.29,1210.44,1213.56,1216.67,1219.76,1222.83,1225.88,1228.92,1231.94,1234.94,1237.93,1240.9,1243.85,1246.79,1249.71,1252.62,1255.51,1258.39,1261.25,1101.52,1039.11,1000.79,973.489,952.567,935.798,921.938,910.217,900.128,891.32,883.541,876.603,870.364,864.712,859.562,854.843,850.496,846.477,842.745,839.268,836.018,832.971,830.107,827.408,824.859,822.446,820.158,817.984,815.916,813.944,812.062,810.262,808.54,806.889,805.305,803.784,802.32,800.912,799.555,798.246,796.983,795.763,794.583,793.442,792.337,791.266,790.229,789.222,788.245,787.295,786.373,785.476,784.603,783.754,782.927,782.121,781.336,780.57,779.823,779.094,778.383,777.687,777.008,776.345,775.696,775.061,774.44,773.832,773.237,772.654,772.083,771.524,770.976,770.439,769.912,769.395,768.888,768.39,767.902,767.422,766.951,766.488,766.034,765.587,765.148,764.716,764.292,763.875,763.464,763.06,762.663,762.272,761.887,761.508,761.135,760.767,760.405,760.049,759.697,759.351,757.437,755.663,754.016,752.48,751.044,749.698,748.432,747.24,746.115,745.05,744.04,743.082,742.169,741.3,740.471,739.679,738.92,738.194,737.497,736.828,736.185,735.566,734.97,734.395,733.84,733.305,732.787,732.286,731.801,731.332,730.876,730.435,730.006,729.59,729.186,728.793,728.41,728.038,727.675,727.322,726.978,726.643,726.315,725.996,725.684,725.379,725.081,724.79,724.506,724.228,723.955,723.689,723.428,723.172,722.922,722.677,722.436,722.201,721.97,721.743,721.52,721.302,721.087,720.877,720.67,720.467,720.267,720.071,719.878,719.688,719.502,719.318,719.138,718.96,718.786,718.614,718.444,718.278,718.113,717.952,717.792,717.635,717.481,717.328,717.178,717.03,716.884,716.74,716.597,716.457,716.319,716.183,716.048,715.915,715.784,715.655,715.527,715.401,715.276,715.153])
a2=np.array([0,0,0,0,0,0,0.00000858307,0.0000171661,0.0000257492,0.0000343323,0.0000429153,0.0000514984,0.0000600815,0.0000686646,0.0000772476,0.0000858307,0.0000944138,0.000102997,0.00011158,0.000120163,0.000128746,0.000137329,0.000145912,0.000154495,0.000163078,0.000171542,0.000180125,0.000188708,0.000197291,0.000205874,0.000214457,0.000223041,0.000231624,0.000240207,0.00024879,0.000257373,0.000265956,0.000274539,0.000283122,0.000291705,0.000300288,0.000308871,0.000317454,0.000326037,0.00033462,0.000343203,0.000351787,0.00036037,0.000368953,0.000377536,0.000386119,0.000394702,0.000403285,0.000411868,0.000420451,0.000429034,0.000437617,0.0004462,0.000454783,0.000463367,0.00047195,0.000480533,0.000489116,0.000497699,0.000506163,0.000514746,0.000523329,0.000531912,0.000540495,0.000549078,0.000557661,0.000566244,0.000574827,0.00058341,0.000591993,0.000600576,0.00060916,0.000617742,0.000626326,0.000634909,0.000643492,0.000652075,0.000660658,0.000669241,0.000677824,0.000686407,0.00069499,0.000703573,0.000712156,0.000720739,0.000729322,0.000737906,0.000746489,0.000755072,0.000763655,0.000772238,0.000780821,0.000789404,0.000797987,0.00080657,0.000815153,0.000823736,0.000832319,0.000840783,0.000849366,0.000857949,0.000908017,0.000957966,0.00100803,0.00105798,0.00110805,0.001158,0.00120795,0.00125802,0.00130796,0.00135803,0.00140798,0.00145805,0.001508,0.00155795,0.00160801,0.00165796,0.00170803,0.00175798,0.00180805,0.001858,0.00190795,0.00195801,0.00200796,0.00205803,0.00210798,0.00215805,0.00220799,0.00225794,0.00230801,0.00235796,0.00240803,0.00245798,0.00250804,0.00255799,0.00260794,0.00265801,0.00270796,0.00275803,0.00280797,0.00285804,0.00290799,0.00295806,0.00300801,0.00305796,0.00310802,0.00315797,0.00320804,0.00325799,0.00330806,0.00335801,0.00340795,0.00345802,0.00350797,0.00355804,0.00360799,0.00365806,0.003708,0.00375795,0.00380802,0.00385797,0.00390804,0.00395799,0.00400805,0.004058,0.00410795,0.00415802,0.00420797,0.00425804,0.00430799,0.00435805,0.004408,0.00445795,0.00450802,0.00455797,0.00460803,0.00465798,0.00470805,0.004758,0.00480795,0.00485802,0.00490797,0.00495803,0.00500798,0.00505805,0.005108,0.00515795,0.00520801,0.00525796,0.00530803,0.00535798,0.00540805,0.005458,0.00550795,0.00555801,0.00560796,0.00565803,0.00570798,0.00575805,0.005808,0.00585794,0.00615799,0.00645804,0.00675798,0.00705802,0.00735796,0.007658,0.00795806,0.00825799,0.00855804,0.00885797,0.00915802,0.00945795,0.009758,0.0100581,0.010358,0.010658,0.010958,0.011258,0.0115581,0.011858,0.012158,0.012458,0.012758,0.013058,0.013358,0.013658,0.013958,0.014258,0.014558,0.014858,0.0151581,0.015458,0.015758,0.016058,0.016358,0.016658,0.016958,0.0172581,0.017558,0.017858,0.018158,0.018458,0.0187581,0.019058,0.019358,0.019658,0.019958,0.020258,0.020558,0.020858,0.021158,0.021458,0.021758,0.022058,0.0223579,0.022658,0.022958,0.023258,0.023558,0.0238579,0.024158,0.024458,0.024758,0.025058,0.025358,0.025658,0.0259579,0.026258,0.026558,0.026858,0.027158,0.0274579,0.027758,0.0280581,0.028358,0.028658,0.028958,0.029258,0.0295579,0.029858,0.030158,0.030458,0.030758,0.031058,0.031358,0.0316581,0.031958,0.032258,0.032558,0.032858,0.0331579,0.033458,0.033758,0.034058,0.034358,0.034658,0.034958,0.035258,0.035558,0.035858])
b2=np.array([690.94,690.94,690.94,690.94,690.94,690.94,690.675,716.949,729.87,739.483,747.506,754.539,760.876,766.687,772.084,777.143,781.921,786.458,790.788,794.937,798.926,802.771,806.487,810.087,813.581,816.977,820.284,823.508,826.656,829.732,832.741,835.688,838.576,841.409,844.19,846.921,849.606,852.246,854.844,857.402,859.921,862.403,864.851,867.264,869.645,871.995,874.315,876.606,878.869,881.106,883.316,885.502,887.663,889.801,891.917,894.01,896.082,898.133,900.164,902.176,904.168,906.143,908.099,910.038,911.959,913.864,915.753,917.626,919.484,921.327,923.155,924.968,926.768,928.554,930.327,932.086,933.833,935.567,937.289,938.998,940.696,942.383,944.058,945.722,947.375,949.018,950.65,952.272,953.884,955.486,957.078,958.661,960.234,961.798,963.353,964.899,966.437,967.966,969.486,970.998,972.502,973.998,975.486,976.966,978.439,979.904,926.517,903.505,888.105,876.392,866.924,858.987,852.169,846.205,840.919,836.182,831.899,827.999,824.426,821.134,818.086,815.254,812.612,810.14,807.819,805.635,803.574,801.625,799.778,798.024,796.356,794.766,793.25,791.8,790.412,789.083,787.807,786.582,785.403,784.269,783.176,782.121,781.103,780.12,779.169,778.248,777.357,776.493,775.655,774.841,774.052,773.284,772.538,771.812,771.105,770.417,769.746,769.093,768.455,767.833,767.226,766.633,766.053,765.487,764.934,764.392,763.862,763.344,762.836,762.338,761.851,761.374,760.906,760.447,759.996,759.555,759.121,758.695,758.278,757.867,757.464,757.068,756.678,756.296,755.919,755.549,755.185,754.827,754.475,754.128,753.787,753.451,753.12,752.794,752.472,752.156,751.844,751.537,751.235,750.936,750.642,750.352,750.065,749.783,749.505,749.23,747.701,746.277,744.947,743.7,742.53,741.428,740.389,739.406,738.475,737.592,736.752,735.953,735.191,734.463,733.767,733.101,732.463,731.85,731.262,730.696,730.151,729.627,729.121,728.633,728.161,727.706,727.264,726.838,726.424,726.023,725.635,725.257,724.891,724.534,724.188,723.851,723.523,723.204,722.893,722.59,722.294,722.005,721.724,721.449,721.181,720.918,720.662,720.411,720.166,719.926,719.691,719.461,719.235,719.015,718.798,718.586,718.378,718.174,717.974,717.778,717.585,717.396,717.21,717.028,716.848,716.672,716.499,716.328,716.161,715.996,715.834,715.675,715.518,715.364,715.212,715.062,714.915,714.77,714.627,714.486,714.348,714.211,714.076,713.943,713.812,713.683,713.556,713.43,713.306,713.184,713.064,712.945,712.827,712.711,712.597,712.484,712.372,712.262,712.153,712.046])
a3=np.array([0,0.000100017,0.000200033,0.00030005,0.000399947,0.000499964,0.000500202,0.000500321,0.000500441,0.00050056,0.000500798,0.000500917,0.000501037,0.000501156,0.000501394,0.000501514,0.000501633,0.000501871,0.00050199,0.000502109,0.000502229,0.000502467,0.000502586,0.000502706,0.000502825,0.000503063,0.000503182,0.000503302,0.000503421,0.000503659,0.000503779,0.000503898,0.000504136,0.000504255,0.000504374,0.000504494,0.000504732,0.000504851,0.000504971,0.00050509,0.000505328,0.000505447,0.000505567,0.000505686,0.000505924,0.000506043,0.000506163,0.000506401,0.00050652,0.000506639,0.000506759,0.000506997,0.000507116,0.000507236,0.000507355,0.000507593,0.000507712,0.000507832,0.000507951,0.000508189,0.000508308,0.000508428,0.000508666,0.000508785,0.000508904,0.000509024,0.000509262,0.000509381,0.000509501,0.00050962,0.000509858,0.000509977,0.000510096,0.000510216,0.000510454,0.000510573,0.000510693,0.000510931,0.00051105,0.000511169,0.000511289,0.000511527,0.000511646,0.000511766,0.000511885,0.000512123,0.000512242,0.000512361,0.000512481,0.000512719,0.000512838,0.000512958,0.000513196,0.000513315,0.000513434,0.000513554,0.000513792,0.000513911,0.000514031,0.00051415,0.000514388,0.000514507,0.000514626,0.000514746,0.000514984,0.000515103,0.000565052,0.00061512,0.000665069,0.000715136,0.000765085,0.000815153,0.000865102,0.00091505,0.000965118,0.00101507,0.00106514,0.00111508,0.00116515,0.0012151,0.00126505,0.00131512,0.00136507,0.00141513,0.00146508,0.00151515,0.0015651,0.00161505,0.00166511,0.00171506,0.00176513,0.00181508,0.00186515,0.0019151,0.00196505,0.00201511,0.00206506,0.00211513,0.00216508,0.00221515,0.0022651,0.00231504,0.00236511,0.00241506,0.00246513,0.00251508,0.00256515,0.00261509,0.00266504,0.00271511,0.00276506,0.00281513,0.00286508,0.00291514,0.00296509,0.00301504,0.00306511,0.00311506,0.00316513,0.00321507,0.00326514,0.00331509,0.00336516,0.00341511,0.00346506,0.00351512,0.00356507,0.00361514,0.00366509,0.00371516,0.00376511,0.00381505,0.00386512,0.00391507,0.00396514,0.00401509,0.00406516,0.0041151,0.00416505,0.00421512,0.00426507,0.00431514,0.00436509,0.00441515,0.0044651,0.00451505,0.00456512,0.00461507,0.00466514,0.00471508,0.00476515,0.0048151,0.00486505,0.00491512,0.00496507,0.00501514,0.00506508,0.00511515,0.0051651,0.00521505,0.00526512,0.00531506,0.00536513,0.00541508,0.00546515,0.0055151,0.00581515,0.00611508,0.00641513,0.00671506,0.00701511,0.00731516,0.00761509,0.00791514,0.00821507,0.00851512,0.00881505,0.0091151,0.00941515,0.00971508,0.0100151,0.0103151,0.0106151,0.010915,0.0112151,0.0115151,0.0118151,0.0121151,0.0124151,0.0127151,0.0130151,0.0133151,0.0136151,0.0139151,0.0142151,0.014515,0.0148151,0.0151151,0.0154151,0.0157151,0.016015,0.0163151,0.0166151,0.0169151,0.0172151,0.0175151,0.0178151,0.018115,0.0184151,0.0187151,0.0190151,0.0193151,0.019615,0.0199151,0.0202152,0.0205151,0.0208151,0.0211151,0.0214151,0.021715,0.0220151,0.0223151,0.0226151,0.0229151,0.0232151,0.0235151,0.0238152,0.0241151,0.0244151,0.0247151,0.0250151,0.025315,0.0256151,0.0259152,0.0262151,0.0265151,0.0268151,0.0271151,0.0274152,0.0277151,0.0280151,0.0283151,0.0286151,0.0289151,0.0292151,0.0295152,0.0298151,0.0301151,0.0304151,0.0307151,0.0310152,0.0313151,0.0316151,0.0319151,0.0322151,0.032515,0.0328151,0.0331152,0.0334151,0.0337151,0.0340151,0.0343151,0.0346152,0.0349151,0.0352151,0.0355151])
b3=np.array([690.94,691.04,690.993,690.983,690.978,690.975,844.348,953.412,1038.41,1108.79,1169.58,1223.62,1272.68,1317.88,1360,1399.58,1437.04,1472.68,1506.76,1539.46,1570.95,1601.34,1630.76,1659.29,1687.01,1713.99,1740.28,1765.94,1791.01,1815.54,1839.54,1863.07,1886.14,1908.79,1931.03,1952.88,1974.38,1995.53,2016.36,2036.87,2057.08,2077.01,2096.66,2116.05,2135.19,2154.09,2172.76,2191.2,2209.43,2227.45,2245.28,2262.91,2280.35,2297.61,2314.7,2331.62,2348.38,2364.98,2381.42,2397.72,2413.86,2429.87,2445.74,2461.48,2477.09,2492.57,2507.93,2523.18,2538.3,2553.31,2568.21,2583,2597.68,2612.26,2626.74,2641.12,2655.41,2669.6,2683.7,2697.71,2711.63,2725.46,2739.21,2752.88,2766.46,2779.97,2793.4,2806.75,2820.03,2833.23,2846.36,2859.42,2872.41,2885.33,2898.19,2910.98,2923.7,2936.36,2948.97,2961.5,2973.98,2986.4,2998.76,3011.06,3023.31,3035.5,1676.85,1284.9,1147.48,1074.36,1027.56,994.417,969.4,949.661,933.576,920.144,908.709,898.82,890.159,882.49,875.639,869.468,863.874,858.771,854.091,849.779,845.789,842.083,838.629,835.399,832.37,829.523,826.839,824.303,821.904,819.627,817.465,815.406,813.444,811.57,809.779,808.065,806.422,804.845,803.33,801.873,800.47,799.119,797.816,796.558,795.343,794.168,793.031,791.931,790.864,789.83,788.827,787.854,786.908,785.989,785.096,784.226,783.38,782.556,781.754,780.971,780.208,779.464,778.737,778.028,777.336,776.659,775.998,775.351,774.718,774.1,773.494,772.901,772.32,771.751,771.194,770.648,770.112,769.587,769.072,768.567,768.07,767.584,767.106,766.636,766.175,765.722,765.277,764.839,764.409,763.986,763.57,763.161,762.758,762.362,761.972,761.588,761.211,760.839,760.472,760.112,758.12,756.28,754.573,752.985,751.503,750.115,748.812,747.586,746.43,745.337,744.302,743.32,742.387,741.499,740.651,739.842,739.069,738.328,737.618,736.937,736.282,735.652,735.046,734.462,733.898,733.354,732.829,732.32,731.829,731.352,730.891,730.443,730.009,729.588,729.178,728.78,728.393,728.016,727.65,727.293,726.945,726.605,726.274,725.952,725.636,725.329,725.028,724.734,724.447,724.166,723.891,723.622,723.359,723.101,722.849,722.601,722.359,722.121,721.888,721.66,721.435,721.215,720.999,720.787,720.578,720.374,720.173,719.975,719.781,719.59,719.402,719.217,719.036,718.857,718.681,718.508,718.338,718.17,718.005,717.842,717.682,717.524,717.368,717.215,717.063,716.914,716.768,716.623,716.48,716.339,716.2,716.063,715.927,715.794,715.662,715.532,715.403,715.277,715.151,715.028])
a4=np.array([0,0,0,0,0,0,0.00000560284,0.0000113249,0.0000169277,0.0000226498,0.0000282526,0.0000339747,0.0000395775,0.0000452995,0.0000509024,0.0000566244,0.0000622273,0.0000679493,0.0000735521,0.0000792742,0.000084877,0.0000905991,0.0000962019,0.000101924,0.000107527,0.000113249,0.000118852,0.000124574,0.000130177,0.000135899,0.000141501,0.000147104,0.000152826,0.000158429,0.000164151,0.000169754,0.000175476,0.000181079,0.000186801,0.000192404,0.000198126,0.000203729,0.000209451,0.000215054,0.000220776,0.000226378,0.000232101,0.000237703,0.000243425,0.000249028,0.00025475,0.000260353,0.000266075,0.000271678,0.000277281,0.000283003,0.000288606,0.000294328,0.000299931,0.000305653,0.000311255,0.000316977,0.00032258,0.000328302,0.000333905,0.000339627,0.00034523,0.000350952,0.000356555,0.000362277,0.00036788,0.000373602,0.000379205,0.000384927,0.00039053,0.000396252,0.000401854,0.000407577,0.000413179,0.000418782,0.000424504,0.000430107,0.000435829,0.000441432,0.000447154,0.000452757,0.000458479,0.000464082,0.000469804,0.000475407,0.000481129,0.000486732,0.000492454,0.000498056,0.000503779,0.000509381,0.000515103,0.000520706,0.000526428,0.000532031,0.000537753,0.000543356,0.000549078,0.000554681,0.000560284,0.000566006,0.000615954,0.000666022,0.000715971,0.000766039,0.000815988,0.000866055,0.000916004,0.000965953,0.00101602,0.00106597,0.00111604,0.00116599,0.00121605,0.001266,0.00131595,0.00136602,0.00141597,0.00146604,0.00151599,0.00156605,0.001616,0.00166595,0.00171602,0.00176597,0.00181603,0.00186598,0.00191605,0.001966,0.00201595,0.00206602,0.00211597,0.00216603,0.00221598,0.00226605,0.002316,0.00236595,0.00241602,0.00246596,0.00251603,0.00256598,0.00261605,0.002666,0.00271594,0.00276601,0.00281596,0.00286603,0.00291598,0.00296605,0.003016,0.00306594,0.00311601,0.00316596,0.00321603,0.00326598,0.00331605,0.00336599,0.00341594,0.00346601,0.00351596,0.00356603,0.00361598,0.00366604,0.00371599,0.00376594,0.00381601,0.00386596,0.00391603,0.00396597,0.00401604,0.00406599,0.00411606,0.00416601,0.00421596,0.00426602,0.00431597,0.00436604,0.00441599,0.00446606,0.00451601,0.00456595,0.00461602,0.00466597,0.00471604,0.00476599,0.00481605,0.004866,0.00491595,0.00496602,0.00501597,0.00506604,0.00511599,0.00516605,0.005216,0.00526595,0.00531602,0.00536597,0.00541604,0.00546598,0.00551605,0.005566,0.00586605,0.00616598,0.00646603,0.00676596,0.00706601,0.00736594,0.00766599,0.00796604,0.00826597,0.00856602,0.00886595,0.009166,0.00946605,0.00976598,0.010066,0.010366,0.010666,0.0109659,0.011266,0.011566,0.011866,0.012166,0.0124659,0.012766,0.013066,0.013366,0.013666,0.013966,0.014266,0.0145659,0.014866,0.015166,0.015466,0.015766,0.016066,0.016366,0.0166661,0.016966,0.017266,0.017566,0.017866,0.018166,0.018466,0.018766,0.019066,0.019366,0.019666,0.019966,0.0202661,0.020566,0.020866,0.021166,0.021466,0.0217659,0.022066,0.022366,0.022666,0.022966,0.023266,0.023566,0.0238661,0.024166,0.024466,0.024766,0.025066,0.025366,0.025666,0.0259661,0.026266,0.026566,0.026866,0.027166,0.0274661,0.027766,0.028066,0.028366,0.028666,0.028966,0.029266,0.029566,0.029866,0.030166,0.030466,0.030766,0.0310659,0.031366,0.031666,0.031966,0.032266,0.032566,0.032866,0.0331661,0.033466,0.033766,0.034066,0.034366,0.0346659,0.034966,0.035266,0.035566])
b4=np.array([690.94,690.94,690.94,690.94,690.94,690.94,690.786,726.741,744.924,758.344,769.498,779.266,788.068,796.138,803.63,810.649,817.273,823.56,829.557,835.302,840.824,846.148,851.294,856.28,861.12,865.827,870.411,874.882,879.248,883.516,887.692,891.783,895.793,899.728,903.59,907.385,911.115,914.784,918.395,921.95,925.452,928.904,932.306,935.662,938.973,942.241,945.467,948.654,951.802,954.913,957.988,961.028,964.035,967.009,969.952,972.864,975.746,978.6,981.426,984.225,986.997,989.744,992.466,995.163,997.837,1000.49,1003.12,1005.72,1008.31,1010.87,1013.41,1015.94,1018.44,1020.93,1023.39,1025.84,1028.27,1030.68,1033.08,1035.46,1037.82,1040.17,1042.5,1044.81,1047.11,1049.4,1051.67,1053.93,1056.17,1058.4,1060.61,1062.81,1065,1067.18,1069.34,1071.49,1073.63,1075.76,1077.87,1079.97,1082.07,1084.15,1086.21,1088.27,1090.32,1092.36,1004.37,967.674,943.811,926.057,911.965,900.335,890.479,881.961,874.489,867.856,861.91,856.537,851.646,847.17,843.05,839.241,835.706,832.412,829.332,826.445,823.731,821.174,818.758,816.47,814.301,812.24,810.278,808.408,806.622,804.915,803.28,801.714,800.211,798.767,797.378,796.041,794.753,793.511,792.312,791.153,790.033,788.95,787.901,786.885,785.899,784.943,784.015,783.114,782.239,781.387,780.559,779.753,778.968,778.203,777.457,776.731,776.021,775.33,774.654,773.994,773.35,772.72,772.104,771.501,770.912,770.335,769.77,769.217,768.676,768.145,767.625,767.115,766.614,766.124,765.643,765.17,764.706,764.251,763.804,763.365,762.933,762.51,762.093,761.683,761.28,760.884,760.495,760.111,759.734,759.362,758.997,758.637,758.283,757.934,757.59,757.252,756.918,756.589,756.265,755.946,754.176,752.535,751.007,749.581,748.246,746.993,745.813,744.701,743.649,742.653,741.708,740.81,739.954,739.139,738.359,737.614,736.901,736.216,735.56,734.929,734.322,733.737,733.174,732.63,732.106,731.599,731.109,730.634,730.175,729.73,729.298,728.879,728.472,728.077,727.692,727.319,726.955,726.601,726.256,725.92,725.593,725.273,724.961,724.657,724.36,724.069,723.786,723.508,723.237,722.971,722.712,722.457,722.208,721.964,721.725,721.491,721.261,721.036,720.815,720.598,720.386,720.177,719.972,719.771,719.573,719.379,719.188,719,718.815,718.634,718.455,718.28,718.107,717.937,717.77,717.605,717.443,717.283,717.126,716.971,716.818,716.668,716.52,716.374,716.23,716.088,715.948,715.81,715.673,715.539,715.407,715.276,715.147,715.019,714.894,714.77,714.647,714.526,714.407,714.289])

path_where_to_save_everything = '/home/ffederic/work/Collaboratory/test/experimental_data/Marc_Mentat_target_temp_test/'
fig, ax1 = plt.subplots(figsize=(20, 10))
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
axx1, = ax1.plot(a*1e3,b,'b')
ax1.axvline(x=a[b.argmax()]*1e3,color='b',linestyle='--')
axx2, = ax2.plot(a*1e3,power_input(a,0),'r')
temp = np.trapz(power_input(a[:b.argmax()],0)-power_input(np.inf,0),x=a[:b.argmax()]) / np.trapz(power_input(a,0)-power_input(np.inf,0),x=a)
ax2.axvline(x=a[power_input(a,0).argmax()]*1e3,color='r',linestyle='--',label='%.3g' %(temp*100) + r'$ \% $'+' of ELM energy delivered before peak temp')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 heat flux [W/m2]', color=axx2.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax1.grid()
ax1.set_xlim(left=0,right=10)
ax2.legend(loc='best', fontsize='x-small')
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


a = np.array(np.linspace(-0.02,-1e-4,20).tolist() + a.tolist())
b = np.array([b[0]]*20 + b.tolist())

fig3, ax3 = plt.subplots( 2,2,figsize=(25, 18), squeeze=False)
ax3[1,1].plot(a*1e3,b,'k',linewidth=2,label='full simulated temperature')#\nEdens=%.3gJ/m2' %(np.trapz(power_input(a,0)-power_input(np.inf,0),x=a)))
ax3[1,0].plot(a*1e3,(power_input(a,0)-power_input(np.inf,0))*1e-3,'k',linewidth=2,label='simulation input')

time_after_peak=1.5e-3
ax3[1,1].axvline(x=a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]*1e3,linestyle='--',color='m',linewidth=1)
bds = [[20,0,1e-1,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
guess=[b[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]), a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-np.mean(b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]))**2)))
ax3[1,1].plot(a*1e3,semi_infinite_sink_full_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a,*fit[0]),'--r',linewidth=1,label='t>1.5ms fit homogen. square wave')#\nEdens=%.3g+/-%.3gJ/m2\nR2=%.3g' %(nominal_values(fit_wit_errors[1]),std_devs(fit_wit_errors[1]),R2))
ax3[1,0].plot([-100,1000*fit[0][-1],1000*fit[0][-1],1000*fit[0][-1]+pulse_duration_ms.nominal_value,1000*fit[0][-1]+pulse_duration_ms.nominal_value,100],[0,0,(fit_wit_errors[1]/pulse_duration_ms).nominal_value,(fit_wit_errors[1]/pulse_duration_ms).nominal_value,0,0],'--r',linewidth=1,label='t>1.5ms fit homogen. square wave')

# ax3[1,1].plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
bds = [[20,0,1e-1,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
guess=[b[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]), a, b, guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((b-semi_infinite_sink_full_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a,*fit[0]))**2)/np.sum(((b-np.mean(b))**2)))
ax3[1,1].plot(a*1e3,semi_infinite_sink_full_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a,*fit[0]),'r',linewidth=1,label='full fit homogen. square wave')#\nEdens=%.3g+/-%.3gJ/m2\nR2=%.3g' %(nominal_values(fit_wit_errors[1]),std_devs(fit_wit_errors[1]),R2))
ax3[1,0].plot([-100,1000*fit[0][-1],1000*fit[0][-1],1000*fit[0][-1]+pulse_duration_ms.nominal_value,1000*fit[0][-1]+pulse_duration_ms.nominal_value,100],[0,0,(fit_wit_errors[1]/pulse_duration_ms).nominal_value,(fit_wit_errors[1]/pulse_duration_ms).nominal_value,0,0],'r',linewidth=1,label='full fit homogen. square wave')

bds = [[20,0,1e-1,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
guess=[b[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_gaussian_beam_square_wave_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005), a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_gaussian_beam_square_wave_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-np.mean(b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]))**2)))
ax3[1,1].plot(a*1e3,semi_infinite_sink_gaussian_beam_square_wave_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a,*fit[0]),'--b',linewidth=1,label='t>1.5ms fit gaussian beam square wave')#\nEdens=%.3g+/-%.3gJ/m2\nR2=%.3g' %(nominal_values(fit_wit_errors[1]),std_devs(fit_wit_errors[1]),R2))
ax3[1,0].plot([-100,1000*fit[0][-1],1000*fit[0][-1],1000*fit[0][-1]+pulse_duration_ms.nominal_value,1000*fit[0][-1]+pulse_duration_ms.nominal_value,100],[0,0,(fit_wit_errors[1]/pulse_duration_ms).nominal_value,(fit_wit_errors[1]/pulse_duration_ms).nominal_value,0,0],'--b',linewidth=1,label='t>1.5ms fit gaussian beam square wave')

# ax3[1,1].plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
bds = [[20,0,1e-1,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
guess=[b[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_gaussian_beam_square_wave_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005), a, b, guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((b-semi_infinite_sink_gaussian_beam_square_wave_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a,*fit[0]))**2)/np.sum(((b-np.mean(b))**2)))
ax3[1,1].plot(a*1e3,semi_infinite_sink_gaussian_beam_square_wave_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a,*fit[0]),'b',linewidth=1,label='full fit gaussian beam square wave')#\nEdens=%.3g+/-%.3gJ/m2\nR2=%.3g' %(nominal_values(fit_wit_errors[1]),std_devs(fit_wit_errors[1]),R2))
ax3[1,0].plot([-100,1000*fit[0][-1],1000*fit[0][-1],1000*fit[0][-1]+pulse_duration_ms.nominal_value,1000*fit[0][-1]+pulse_duration_ms.nominal_value,100],[0,0,(fit_wit_errors[1]/pulse_duration_ms).nominal_value,(fit_wit_errors[1]/pulse_duration_ms).nominal_value,0,0],'b',linewidth=1,label='full fit gaussian beam square wave')

bds = [[20,0,1e-1,0,1e-1],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],1]]
guess=[b[0],1,0.5,0.,0.5]
fit = curve_fit(semi_infinite_sink_gaussian_beam_triangular_wave_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005), a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4,1e-3],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms_up = 1e3*((a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2])
pulse_duration_ms_down = 1e3*((a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*(1-fit_wit_errors[2])*fit_wit_errors[4])
pulse_duration_ms = pulse_duration_ms_up + pulse_duration_ms_down
R2 = 1-np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_gaussian_beam_triangular_wave_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-np.mean(b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]))**2)))
ax3[1,1].plot(a*1e3,semi_infinite_sink_gaussian_beam_triangular_wave_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a,*fit[0]),'--g',linewidth=1,label='t>1.5ms fit gaussian beam triangular wave')#\nEdens=%.3g+/-%.3gJ/m2\nR2=%.3g' %(nominal_values(fit_wit_errors[1]),std_devs(fit_wit_errors[1]),R2))
ax3[1,0].plot([-100,1000*fit[0][-2],1000*fit[0][-2]+pulse_duration_ms_up.nominal_value,1000*fit[0][-2]+pulse_duration_ms.nominal_value,100],[0,0,2*(fit_wit_errors[1]/pulse_duration_ms).nominal_value,0,0],'--g',linewidth=1,label='t>1.5ms fit gaussian beam triangular wave')

# ax3[1,1].plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
bds = [[20,0,1e-1,0,1e-1],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],1]]
guess=[b[0],1,0.5,0.,0.5]
fit = curve_fit(semi_infinite_sink_gaussian_beam_triangular_wave_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005), a, b, guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4,1e-3],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms_up = 1e3*((a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2])
pulse_duration_ms_down = 1e3*((a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*(1-fit_wit_errors[2])*fit_wit_errors[4])
pulse_duration_ms = pulse_duration_ms_up + pulse_duration_ms_down
R2 = 1-np.sum(((b-semi_infinite_sink_gaussian_beam_triangular_wave_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a,*fit[0]))**2)/np.sum(((b-np.mean(b))**2)))
ax3[1,1].plot(a*1e3,semi_infinite_sink_gaussian_beam_triangular_wave_increase_and_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()],0.005)(a,*fit[0]),'g',linewidth=1,label='full fit gaussian beam triangular wave')#\nEdens=%.3g+/-%.3gJ/m2\nR2=%.3g' %(nominal_values(fit_wit_errors[1]),std_devs(fit_wit_errors[1]),R2))
ax3[1,0].plot([-100,1000*fit[0][-2],1000*fit[0][-2]+pulse_duration_ms_up.nominal_value,1000*fit[0][-2]+pulse_duration_ms.nominal_value,100],[0,0,2*(fit_wit_errors[1]/pulse_duration_ms).nominal_value,0,0],'g',linewidth=1,label='full fit gaussian beam triangular wave')

ax3[1,1].legend(loc='best', fontsize='x-small')
ax3[1,1].set_xlabel('time [ms]')
ax3[1,1].set_ylabel('temperature [K]')
# ax3[1,1].ylim(bottom=b.min()*0.9,top=b.max()*1.2)
ax3[1,1].set_xlim(left=-1,right=6)
ax3[1,1].grid()
ax3[1,0].legend(loc='best', fontsize='x-small')
ax3[1,0].set_xlabel('time [ms]')
ax3[1,0].set_ylabel('power density [kW/m2]')
# ax3[1,1].ylim(bottom=b.min()*0.9,top=b.max()*1.2)
ax3[1,0].set_xlim(left=-0.25,right=1)
ax3[1,0].grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_energy1 = []
all_energy2 = []
all_energy3 = []
all_energy4 = []
all_energy5 = []
all_energy6 = []
for time_after_peak in np.array([0.5,1,1.5,2,3,5])*1e-3:
	plt.figure(figsize=(20, 10))
	plt.plot(a*1e3,b,color=color[0],linewidth=4,label='full simulated temperature')
	# plt.plot(a1*1e3,b1,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000616*1e3,1.34e-05*1e3,(13.25+0.0917*0.1)*8e8))
	# plt.plot(a2*1e3,b2,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(1e-07*1e3,0.00108*1e3,(0.1678+0.0917*0.1)*8e8))
	# plt.plot(a3*1e3,b3,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000762*1e3,1.66e-05*1e3,(10.31+0.0917*0.1)*8e8))
	# bds = [[20,1e-3,1e-4,1],[np.inf,np.inf,1e-3,1.0005]]
	# bds = [[b[0]-1,1e-3,1e-6,0],[b[0]+1,np.inf,1,a[np.abs(a-(a[b.argmax()]+1.5e-3)).argmin()]]]
	# time_after_peak = 5e-3
	plt.title('Temperature profile used from ts=%.3gms after the temperature peak' %(time_after_peak*1e3))
	bds1 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess1=[b[0],1,0.5,0.]
	bds2 = [[20,1e-3,1e-8,0],[np.inf,np.inf,1e-6,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess2=[b[0],1,1e-6,0.]
	bds3 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,1e-7]]
	guess3=[b[0],1,0.5,0.]
	bds4 = [[20,1e-3,0.01,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess4=[b[0],1,1,0.]
	bds5 = [[20,1e-3,0.1,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess5=[b[0],1,1,0.]
	bds6 = [[20,1e-3,1e-2,0.2*1e-3],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess6=[b[0],1,0.5,0.6*1e-3]
	# plt.plot([1.5e-3]*2,[b.min(),b.max()],'--k')
	plt.plot([a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]*1e3]*2,[b.min(),b.max()],'--k')
	for i,arg in enumerate([[bds1,guess1],[bds2,guess2],[bds3,guess3],[bds4,guess4],[bds5,guess5],[bds6,guess6]]):
		bds,guess = arg
		# print(guess)
		fit = curve_fit(semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]), a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
		fit_wit_errors = correlated_values(fit[0],fit[1])
		energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
		pulse_duration_ms = 1e3*(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
		R2 = 1-np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-np.mean(b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]))**2)))
		# print(fit_wit_errors)
		if i==0:
			all_energy1.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1],label='free double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1])
		elif i==1:
			all_energy2.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus<1e-6)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==2:
			all_energy3.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0<1e-7)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==3:
			all_energy4.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.01)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==4:
			all_energy5.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.1)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==5:
			all_energy6.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0>0.2)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
	# guess = [1000,1e8,1e-3,0]
	# bds=[[20,0,0,0],[np.inf,np.inf,np.inf,np.inf]]
	# fit = curve_fit(exponential_decay, a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	# fit_wit_errors = correlated_values(fit[0],fit[1])
	# plt.plot(a*1e3,exponential_decay(a,*fit[0]),'--',label='exponential decay')

	plt.plot(a*1e3,power_input(a,0)/np.max(power_input(a,0))*(b.max()-b.min())+b.min(),':',color=color[i+2],label='power input (not in scale), energy input~22J')
	plt.legend(loc='best', fontsize='small')
	plt.ylim(top=(b.max()-b.min())*1.4+b.min())
	plt.xlim(left=-1,right=15)
	plt.xlabel('time [ms]')
	plt.ylabel('temperature [K]')
	plt.grid()
	figure_index+=1
	plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	plt.close('all')
	# plt.pause(0.01)

all_energy1 = np.array(all_energy1)
all_energy2 = np.array(all_energy2)
all_energy3 = np.array(all_energy3)
all_energy4 = np.array(all_energy4)
all_energy5 = np.array(all_energy5)
all_energy6 = np.array(all_energy6)
nominal_energy = 22	# J
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy1)/nominal_energy,yerr=std_devs(all_energy1)/nominal_energy,color=color[1],label='free double root')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy2)/nominal_energy,yerr=std_devs(all_energy2)/nominal_energy,color=color[2],linestyle='--',label='constrained (taus<1e-6)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy3)/nominal_energy,yerr=std_devs(all_energy3)/nominal_energy,color=color[3],linestyle='--',label='constrained (t0<1e-7)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy4)/nominal_energy,yerr=std_devs(all_energy4)/nominal_energy,color=color[4],linestyle='--',label='constrained (taus>0.01)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy5)/nominal_energy,yerr=std_devs(all_energy5)/nominal_energy,color=color[5],linestyle='--',label='constrained (taus>0.1)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy6)/nominal_energy,yerr=std_devs(all_energy6)/nominal_energy,color=color[6],linestyle='--',label='constrained (t0>0.2)')
plt.plot([0,5],[1]*2,'--k')
plt.plot([1.5]*2,[1,1.1],'--k')
plt.title('strong pulse')
plt.xlabel('start of profile used after temperature peak (ts) [ms]')
plt.ylabel('fitted/delivered energy [au]')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_all_energy1 = []
all_all_energy1.append(all_energy1/nominal_energy)

plt.figure(figsize=(20, 10))
plt.plot(a*1e3,b,linewidth=4,label='full simulated temperature')
plt.plot(a1*1e3,b1,label='simulated step 1: t0=%.3gms, tau=%.3gms, F0=%.3gW/m2' %(9.51e-14*1e3,2.97e-04*1e3,(0.657+0.0917*0.1)*8e8))
plt.plot(a4*1e3,b4,label='simulated step 2: t0=%.3gms, tau=%.3gms, F0=%.3gW/m2' %(8.35e-32*1e3,0.000566*1e3,(0.3368+0.0917*0.1)*8e8))
plt.plot(a2*1e3,b2,'--',label='simulated step 3: t0=%.3gms, tau=%.3gms, F0=%.3gW/m2' %(3.59e-27*1e3,0.000858*1e3,(0.1968+0.0917*0.1)*8e8))
plt.plot(a3*1e3,b3,'--',label='simulated step 4: t0=%.3gms, tau=%.3gms, F0=%.3gW/m2' %(0.5,1.51*1e-5*1e3,(11.808+0.0917*0.1)*8e8))
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
time_after_peak = 1.5e-3
plt.plot([a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]*1e3]*2,[b.min(),b.max()],'--k')
plt.ylim(bottom=b.min()/1.2,top=b.max()*1.2)
plt.xlim(left=-1,right=15)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

plt.figure(figsize=(20, 10))
plt.plot(a*1e3,power_input(a,0),label='full simulated temperature')
plt.plot([0,9.51e-14*1e3,9.51e-14*1e3,9.51e-14*1e3+2.97e-04*1e3,9.51e-14*1e3+2.97e-04*1e3,a.max()*1e3],[(0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.657+0.0917*0.1)*8e8,(0.657+0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.0917*0.1)*8e8],label='simulated step 1')
plt.plot([0,8.35e-32*1e3,8.35e-32*1e3,8.35e-32*1e3+0.000566*1e3,8.35e-32*1e3+0.000566*1e3,a.max()*1e3],[(0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.3368+0.0917*0.1)*8e8,(0.3368+0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.0917*0.1)*8e8],label='simulated step 2')
plt.plot([0,3.59e-27*1e3,3.59e-27*1e3,3.59e-27*1e3+0.000858*1e3,3.59e-27*1e3+0.000858*1e3,a.max()*1e3],[(0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.1968+0.0917*0.1)*8e8,(0.1968+0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.0917*0.1)*8e8],'--',label='simulated step 3')
plt.plot([0,0.5,0.5,0.5+1.51*1e-5*1e3,0.5+1.51*1e-5*1e3,a.max()*1e3],[(0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(11.808+0.0917*0.1)*8e8,(11.808+0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.0917*0.1)*8e8],'--',label='simulated step 4')
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('heat flux [W/m2]')
time_after_peak = 1.5e-3
plt.plot([a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]*1e3]*2,[power_input(a,0).min(),power_input(a,0).max()],'--k')
# plt.ylim(bottom=b.min()/1.2,top=b.max()*1.2)
plt.xlim(left=-1,right=15)
plt.grid()
plt.semilogy()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

if False:
	guess = [1000,1e8,1e-3,1]
	bds=[[20,0,0,1],[np.inf,np.inf,np.inf,np.inf]]
	fit = curve_fit(exponential_decay, a[a>=1.0015], b[a>=1.0015], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	fit_wit_errors = correlated_values(fit[0],fit[1])
	plt.plot(a,exponential_decay(a,*fit[0]),':')
	plt.legend(loc='best')
	plt.grid()
	# figure_index+=1
	# plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	# plt.close('all')
	plt.pause(0.01)


c=np.array([0,0.000014,0.000028,0.000042,0.000056,0.00007,0.000084,0.000098,0.000112,0.000126,0.00014,0.000154,0.000168,0.000182,0.000196,0.00021,0.000224,0.000238,0.000252,0.000266,0.00028,0.000294,0.000308,0.000322,0.000336,0.00035,0.000364,0.000378,0.000392,0.000406,0.00042,0.000434,0.000448,0.000462,0.000476,0.00049,0.000504,0.000518,0.000532,0.000546,0.00056,0.000574,0.000588,0.000602,0.000616,0.00063,0.000644,0.000658,0.000672,0.000686,0.0007,0.000714,0.000728,0.000742,0.000756,0.00077,0.000784,0.000798,0.000812,0.000826,0.00084,0.000854,0.000868,0.000882,0.000896,0.00091,0.000924,0.000938,0.000952,0.000966,0.00098,0.000994,0.001008,0.001022,0.001036,0.00105,0.001064,0.001078,0.001092,0.001106,0.00112,0.001134,0.001148,0.001162,0.001176,0.00119,0.001204,0.001218,0.001232,0.001246,0.00126,0.001274,0.001288,0.001302,0.001316,0.00133,0.001344,0.001358,0.001372,0.001386,0.0014,0.001414,0.001428,0.001442,0.001456,0.00147,0.001484,0.001498,0.001512,0.001526,0.00154,0.001554,0.001568,0.001582,0.001596,0.00161,0.001624,0.001638,0.001652,0.001666,0.00168,0.001694,0.001708,0.001722,0.001736,0.00175,0.001764,0.001778,0.001792,0.001806,0.00182,0.001834,0.001848,0.001862,0.001876,0.00189,0.001904,0.001918,0.001932,0.001946,0.00196,0.001974,0.001988,0.002002,0.002016,0.00203,0.002044,0.002058,0.002072,0.002086,0.0021,0.002114,0.002128,0.002142,0.002156,0.00217,0.002184,0.002198,0.002212,0.002226,0.00224,0.002254,0.002268,0.002282,0.002296,0.00231,0.002324,0.002338,0.002352,0.002366,0.00238,0.002394,0.002408,0.002422,0.002436,0.00245,0.002464,0.002478,0.002492,0.002506,0.00252,0.002534,0.002548,0.002562,0.002576,0.00259,0.002604,0.002618,0.002632,0.002646,0.00266,0.002674,0.002688,0.002702,0.002716,0.00273,0.002744,0.002758,0.002772,0.002786,0.0028,0.002814,0.002828,0.002842,0.002856,0.00287,0.002884,0.002898,0.002912,0.002926,0.00294,0.002954,0.002968,0.002982,0.002996,0.00301,0.003024,0.003038,0.003052,0.003066,0.00308,0.003094,0.003108,0.003122,0.003136,0.00315,0.003164,0.003178,0.003192,0.003206,0.00322,0.003234,0.003248,0.003262,0.003276,0.00329,0.003304,0.003318,0.003332,0.003346,0.00336,0.003374,0.003388,0.003402,0.003416,0.00343,0.003444,0.003458,0.003472,0.003486,0.0035,0.003514,0.003528,0.003542,0.003556,0.00357,0.003584,0.003598,0.003612,0.003626,0.00364,0.003654,0.003668,0.003682,0.003696,0.00371,0.003724,0.003738,0.003752,0.003766,0.00378,0.003794,0.003808,0.003822,0.003836,0.00385,0.003864,0.003878,0.003892,0.003906,0.00392,0.003934,0.003948,0.003962,0.003976,0.00399,0.004004,0.004018,0.004032,0.004046,0.00406,0.004074,0.004088,0.004102,0.004116,0.00413,0.004144,0.004158,0.004172,0.004186,0.0042,0.004214,0.004228,0.004242,0.004256,0.00427,0.004284,0.004298,0.004312,0.004326,0.00434,0.004354,0.004368,0.004382,0.004396,0.00441,0.004424,0.004438,0.004452,0.004466,0.00448,0.004494,0.004508,0.004522,0.004536,0.00455,0.004564,0.004578,0.004592,0.004606,0.00462,0.004634,0.004648,0.004662,0.004676,0.00469,0.004704,0.004718,0.004732,0.004746,0.00476,0.004774,0.004788,0.004802,0.004816,0.00483,0.004844,0.004858,0.004872,0.004886,0.0049,0.004914,0.004928,0.004942,0.004956,0.00497,0.004984,0.004998,0.005012,0.005026,0.00504,0.005054,0.005068,0.005082,0.005096,0.00511,0.005124,0.005138,0.005152,0.005166,0.00518,0.005194,0.005208,0.005222,0.005236,0.00525,0.005264,0.005278,0.005292,0.005306,0.00532,0.005334,0.005348,0.005362,0.005376,0.00539,0.005404,0.005418,0.005432,0.005446,0.00546,0.005474,0.005488,0.005502,0.005516,0.00553,0.005544,0.005558,0.005572,0.005586,0.0056,0.005614,0.005628,0.005642,0.005656,0.00567,0.005684,0.005698,0.005712,0.005726,0.00574,0.005754,0.005768,0.005782,0.005796,0.00581,0.005824,0.005838,0.005852,0.005866,0.00588,0.005894,0.005908,0.005922,0.005936,0.00595,0.005964,0.005978,0.005992,0.006006,0.00602,0.006034,0.006048,0.006062,0.006076,0.00609,0.006104,0.006118,0.006132,0.006146,0.00616,0.006174,0.006188,0.006202,0.006216,0.00623,0.006244,0.006258,0.006272,0.006286,0.0063,0.006314,0.006328,0.006342,0.006356,0.00637,0.006384,0.006398,0.006412,0.006426,0.00644,0.006454,0.006468,0.006482,0.006496,0.00651,0.006524,0.006538,0.006552,0.006566,0.00658,0.006594,0.006608,0.006622,0.006636,0.00665,0.006664,0.006678,0.006692,0.006706,0.00672,0.006734,0.006748,0.006762,0.006776,0.00679,0.006804,0.006818,0.006832,0.006846,0.00686,0.006874,0.006888,0.006902,0.006916,0.00693,0.006944,0.006958,0.006972,0.006986,0.007,0.007035,0.00707,0.007105,0.00714,0.007175,0.00721,0.007245,0.00728,0.007315,0.00735,0.007385,0.00742,0.007455,0.00749,0.007525,0.00756,0.007595,0.00763,0.007665,0.0077,0.007735,0.00777,0.007805,0.00784,0.007875,0.00791,0.007945,0.00798,0.008015,0.00805,0.008085,0.00812,0.008155,0.00819,0.008225,0.00826,0.008295,0.00833,0.008365,0.0084,0.008435,0.00847,0.008505,0.00854,0.008575,0.00861,0.008645,0.00868,0.008715,0.00875,0.008785,0.00882,0.008855,0.00889,0.008925,0.00896,0.008995,0.00903,0.009065,0.0091,0.009135,0.00917,0.009205,0.00924,0.009275,0.00931,0.009345,0.00938,0.009415,0.00945,0.009485,0.00952,0.009555,0.00959,0.009625,0.00966,0.009695,0.00973,0.009765,0.0098,0.009835,0.00987,0.009905,0.00994,0.009975,0.01001,0.010045,0.01008,0.010115,0.01015,0.010185,0.01022,0.010255,0.01029,0.010325,0.01036,0.010395,0.01043,0.010465,0.0105,0.010535,0.01057,0.010605,0.01064,0.010675,0.01071,0.010745,0.01078,0.010815,0.01085,0.010885,0.01092,0.010955,0.01099,0.011025,0.01106,0.011095,0.01113,0.011165,0.0112,0.011235,0.01127,0.011305,0.01134,0.011375,0.01141,0.011445,0.01148,0.011515,0.01155,0.011585,0.01162,0.011655,0.01169,0.011725,0.01176,0.011795,0.01183,0.011865,0.0119,0.011935,0.01197,0.012005,0.01204,0.012075,0.01211,0.012145,0.01218,0.012215,0.01225,0.012285,0.01232,0.012355,0.01239,0.012425,0.01246,0.012495,0.01253,0.012565,0.0126,0.012635,0.01267,0.012705,0.01274,0.012775,0.01281,0.012845,0.01288,0.012915,0.01295,0.012985,0.01302,0.013055,0.01309,0.013125,0.01316,0.013195,0.01323,0.013265,0.0133,0.013335,0.01337,0.013405,0.01344,0.013475,0.01351,0.013545,0.01358,0.013615,0.01365,0.013685,0.01372,0.013755,0.01379,0.013825,0.01386,0.013895,0.01393,0.013965,0.014])
area = np.array([(c[1]-c[0])/2]+(np.diff(c[1:])/2+np.diff(c[:-1])/2).tolist()+[(c[-2]-c[-1])/2]) * 2*np.pi* np.array([(c[1]-c[0])/4]+(c[1:-1]).tolist()+[c[-1]-(c[-2]-c[-1])/4])	# m2
b.argmax()+1
# profile at peak temperature
time_d =[a[b.argmax()]]
d=np.array([1040.21,1040.19,1040.14,1040.1,1040.06,1040.02,1039.97,1039.91,1039.85,1039.8,1039.76,1039.71,1039.66,1039.61,1039.55,1039.48,1039.42,1039.35,1039.27,1039.19,1039.11,1039.02,1038.93,1038.84,1038.74,1038.63,1038.52,1038.41,1038.3,1038.18,1038.05,1037.92,1037.79,1037.65,1037.51,1037.36,1037.21,1037.06,1036.9,1036.74,1036.57,1036.4,1036.23,1036.05,1035.87,1035.68,1035.48,1035.29,1035.09,1034.89,1034.68,1034.46,1034.25,1034.03,1033.8,1033.58,1033.34,1033.11,1032.87,1032.62,1032.37,1032.12,1031.86,1031.6,1031.33,1031.06,1030.79,1030.51,1030.23,1029.95,1029.66,1029.36,1029.06,1028.76,1028.46,1028.15,1027.83,1027.52,1027.19,1026.87,1026.54,1026.21,1025.87,1025.53,1025.18,1024.83,1024.48,1024.12,1023.76,1023.4,1023.03,1022.65,1022.28,1021.9,1021.51,1021.13,1020.73,1020.34,1019.94,1019.54,1019.13,1018.72,1018.3,1017.88,1017.46,1017.04,1016.61,1016.17,1015.74,1015.29,1014.85,1014.4,1013.95,1013.5,1013.04,1012.57,1012.11,1011.64,1011.16,1010.68,1010.2,1009.72,1009.23,1008.74,1008.24,1007.74,1007.24,1006.74,1006.23,1005.71,1005.2,1004.67,1004.15,1003.62,1003.09,1002.56,1002.02,1001.48,1000.94,1000.39,999.837,999.283,998.725,998.163,997.599,997.031,996.46,995.885,995.307,994.726,994.141,993.553,992.962,992.368,991.771,991.17,990.566,989.959,989.348,988.735,988.118,987.499,986.876,986.25,985.621,984.988,984.353,983.715,983.073,982.429,981.781,981.131,980.477,979.821,979.161,978.499,977.834,977.165,976.494,975.82,975.143,974.463,973.78,973.095,972.406,971.715,971.021,970.324,969.624,968.922,968.216,967.509,966.798,966.085,965.368,964.65,963.928,963.204,962.477,961.748,961.016,960.281,959.544,958.804,958.062,957.317,956.57,955.82,955.068,954.313,953.555,952.796,952.033,951.269,950.502,949.732,948.96,948.186,947.41,946.631,945.85,945.066,944.28,943.492,942.702,941.909,941.115,940.317,939.518,938.717,937.913,937.108,936.3,935.49,934.678,933.864,933.047,932.229,931.409,930.586,929.762,928.935,928.107,927.277,926.444,925.61,924.774,923.936,923.096,922.254,921.41,920.565,919.717,918.868,918.017,917.164,916.31,915.454,914.596,913.736,912.874,912.011,911.146,910.28,909.412,908.542,907.671,906.798,905.923,905.047,904.17,903.29,902.41,901.528,900.644,899.759,898.872,897.984,897.095,896.204,895.312,894.418,893.523,892.627,891.729,890.83,889.93,889.028,888.126,887.222,886.316,885.41,884.502,883.593,882.683,881.772,880.86,879.946,879.032,878.116,877.199,876.281,875.362,874.443,873.522,872.6,871.677,870.753,869.828,868.903,867.976,867.048,866.12,865.19,864.26,863.329,862.397,861.465,860.531,859.597,858.662,857.726,856.789,855.852,854.914,853.975,853.036,852.096,851.155,850.214,849.272,848.33,847.386,846.443,845.499,844.554,843.609,842.663,841.716,840.77,839.822,838.875,837.927,836.978,836.029,835.08,834.13,833.179,832.229,831.278,830.327,829.376,828.424,827.472,826.519,825.567,824.614,823.661,822.708,821.755,820.801,819.847,818.893,817.939,816.985,816.031,815.076,814.122,813.168,812.213,811.258,810.304,809.349,808.394,807.44,806.485,805.531,804.576,803.622,802.667,801.713,800.759,799.805,798.851,797.897,796.944,795.99,795.037,794.084,793.131,792.179,791.226,790.274,789.323,788.371,787.42,786.469,785.518,784.568,783.618,782.668,781.719,780.77,779.822,778.874,777.927,776.979,776.033,775.086,774.141,773.195,772.25,771.306,770.362,769.419,768.477,767.534,766.593,765.652,764.711,763.772,762.832,761.894,760.956,760.019,759.082,758.146,757.211,756.276,755.342,754.409,753.477,752.545,751.614,750.684,749.754,748.826,747.898,746.971,746.044,745.119,744.194,743.271,742.348,741.426,740.505,739.584,738.665,737.746,736.829,735.912,734.996,734.082,733.168,732.255,731.343,730.432,729.522,728.613,727.705,726.799,725.893,724.988,724.084,723.182,722.28,721.38,720.481,719.583,718.686,717.79,716.896,716.003,715.111,714.22,713.331,712.443,711.556,710.67,709.785,708.902,708.02,707.139,706.259,705.381,704.504,703.629,702.755,701.884,701.015,700.149,699.285,698.422,697.562,696.703,695.846,694.991,694.135,693.293,692.478,691.66,689.42,687.273,685.095,682.932,680.796,678.683,676.579,674.484,672.419,670.354,668.306,666.276,664.268,662.274,660.29,658.312,656.336,654.365,652.397,650.44,648.492,646.545,644.604,642.682,640.777,638.877,636.984,635.109,633.255,631.418,629.596,627.776,625.938,624.101,622.297,620.524,618.771,617.024,615.266,613.514,611.794,610.102,608.425,606.756,605.075,603.385,601.706,600.05,598.417,596.806,595.217,593.622,592.006,590.417,588.865,587.33,585.817,584.299,582.768,581.266,579.794,578.327,576.874,575.415,573.944,572.503,571.1,569.715,568.327,566.925,565.547,564.198,562.863,561.523,560.174,558.854,557.57,556.303,555.03,553.749,552.494,551.269,550.057,548.84,547.614,546.41,545.236,544.077,542.92,541.756,540.614,539.499,538.398,537.298,536.191,535.103,534.038,532.986,531.933,530.876,529.844,528.843,527.856,526.868,525.877,524.913,523.973,523.038,522.1,521.159,520.233,519.327,518.436,517.548,516.661,515.794,514.949,514.116,513.282,512.449,511.64,510.851,510.071,509.289,508.506,507.74,506.991,506.253,505.517,504.783,504.066,503.37,502.685,502.001,501.321,500.659,500.013,499.374,498.736,498.099,497.475,496.867,496.27,495.677,495.087,494.514,493.957,493.408,492.861,492.316,491.788,491.276,490.77,490.267,489.766,489.279,488.804,488.338,487.875,487.415,486.97,486.538,486.116,485.695,485.278,484.875,484.487,484.105,483.726,483.349,482.984,482.631,482.286,481.946,481.611,481.287,480.974,480.667,480.365,480.067,479.78,479.502,479.232,478.97,478.712,478.46,478.221,477.993,477.771,477.553,477.344,477.141,476.945,476.757,476.583,476.425,476.282,476.159,476.067,476.007])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-(a[b.argmax()]+1.5*1e-3)).argmin()+1
# profile at peak +1.5ms
time_d.append(a[np.abs(a-(a[b.argmax()]+1.5*1e-3)).argmin()])
d1=np.array([803.079,803.08,803.081,803.077,803.07,803.061,803.05,803.037,803.021,803.002,802.979,802.954,802.926,802.896,802.864,802.829,802.792,802.752,802.71,802.666,802.619,802.569,802.518,802.464,802.407,802.349,802.287,802.224,802.158,802.089,802.019,801.946,801.87,801.792,801.712,801.629,801.544,801.457,801.367,801.275,801.181,801.084,800.985,800.883,800.779,800.673,800.565,800.454,800.341,800.225,800.107,799.987,799.864,799.739,799.612,799.482,799.35,799.216,799.08,798.941,798.799,798.656,798.51,798.362,798.212,798.059,797.904,797.746,797.587,797.425,797.261,797.094,796.926,796.755,796.581,796.406,796.228,796.048,795.866,795.681,795.494,795.305,795.114,794.92,794.725,794.527,794.327,794.124,793.919,793.713,793.504,793.292,793.079,792.863,792.645,792.426,792.203,791.979,791.752,791.524,791.293,791.06,790.825,790.587,790.348,790.106,789.862,789.617,789.369,789.119,788.866,788.612,788.356,788.097,787.836,787.574,787.309,787.042,786.773,786.502,786.229,785.954,785.677,785.398,785.116,784.833,784.548,784.26,783.971,783.68,783.386,783.091,782.794,782.494,782.193,781.89,781.584,781.277,780.968,780.657,780.344,780.029,779.712,779.393,779.072,778.75,778.425,778.098,777.77,777.44,777.107,776.774,776.438,776.1,775.76,775.419,775.075,774.73,774.383,774.034,773.684,773.332,772.977,772.621,772.264,771.904,771.543,771.179,770.815,770.448,770.08,769.71,769.338,768.964,768.589,768.212,767.833,767.453,767.071,766.687,766.302,765.915,765.526,765.136,764.744,764.35,763.955,763.558,763.159,762.759,762.358,761.954,761.55,761.143,760.735,760.326,759.914,759.502,759.088,758.672,758.255,757.836,757.416,756.994,756.571,756.146,755.72,755.292,754.863,754.433,754.001,753.567,753.133,752.696,752.259,751.82,751.379,750.937,750.494,750.05,749.604,749.157,748.708,748.258,747.807,747.354,746.9,746.445,745.989,745.531,745.072,744.612,744.15,743.687,743.223,742.758,742.291,741.824,741.355,740.885,740.413,739.941,739.467,738.992,738.516,738.039,737.561,737.082,736.601,736.119,735.636,735.153,734.668,734.182,733.695,733.207,732.717,732.227,731.736,731.243,730.75,730.256,729.76,729.264,728.766,728.268,727.769,727.269,726.768,726.265,725.762,725.258,724.753,724.247,723.741,723.233,722.725,722.215,721.705,721.194,720.682,720.169,719.655,719.141,718.625,718.11,717.593,717.075,716.557,716.037,715.517,714.996,714.475,713.953,713.43,712.906,712.382,711.857,711.331,710.804,710.277,709.75,709.221,708.692,708.162,707.632,707.101,706.569,706.037,705.504,704.971,704.437,703.902,703.367,702.831,702.295,701.758,701.221,700.683,700.145,699.606,699.067,698.527,697.986,697.446,696.904,696.362,695.82,695.278,694.735,694.191,693.647,693.103,692.558,692.013,691.468,690.922,690.376,689.829,689.282,688.735,688.188,687.64,687.091,686.543,685.994,685.445,684.896,684.346,683.796,683.246,682.696,682.145,681.594,681.043,680.491,679.94,679.388,678.836,678.284,677.732,677.179,676.627,676.074,675.521,674.968,674.415,673.861,673.308,672.755,672.201,671.647,671.093,670.539,669.985,669.431,668.877,668.323,667.769,667.215,666.661,666.106,665.552,664.998,664.444,663.889,663.335,662.781,662.227,661.673,661.119,660.565,660.011,659.457,658.903,658.35,657.796,657.243,656.689,656.136,655.583,655.03,654.477,653.925,653.372,652.82,652.268,651.715,651.164,650.612,650.06,649.509,648.958,648.407,647.857,647.306,646.756,646.206,645.656,645.107,644.558,644.009,643.46,642.912,642.364,641.816,641.269,640.722,640.175,639.629,639.082,638.537,637.991,637.446,636.901,636.357,635.813,635.269,634.726,634.183,633.64,633.098,632.557,632.015,631.474,630.934,630.394,629.854,629.315,628.776,628.238,627.7,627.163,626.626,626.09,625.554,625.019,624.484,623.949,623.415,622.882,622.349,621.817,621.285,620.754,620.223,619.693,619.163,618.634,618.105,617.577,617.05,616.523,615.996,615.471,614.945,614.421,613.897,613.373,612.851,612.328,611.807,611.286,610.765,610.246,609.727,609.208,608.69,608.173,607.656,607.14,606.625,606.11,605.595,605.082,604.569,604.057,603.546,603.035,602.521,602.01,600.746,599.482,598.227,596.976,595.728,594.484,593.244,592.01,590.778,589.553,588.332,587.116,585.904,584.697,583.495,582.3,581.11,579.926,578.749,577.577,576.411,575.252,574.098,572.95,571.808,570.671,569.541,568.416,567.296,566.182,565.073,563.971,562.878,561.792,560.711,559.634,558.562,557.497,556.441,555.391,554.346,553.306,552.273,551.246,550.227,549.218,548.214,547.217,546.224,545.238,544.256,543.284,542.322,541.365,540.411,539.464,538.523,537.59,536.667,535.748,534.835,533.928,533.028,532.136,531.255,530.379,529.506,528.64,527.782,526.934,526.091,525.253,524.421,523.598,522.785,521.977,521.172,520.374,519.585,518.805,518.03,517.26,516.496,515.741,514.995,514.255,513.52,512.791,512.07,511.358,510.652,509.95,509.255,508.568,507.89,507.217,506.55,505.889,505.236,504.592,503.954,503.319,502.691,502.071,501.459,500.852,500.25,499.656,499.068,498.49,497.917,497.35,496.788,496.234,495.688,495.148,494.612,494.083,493.561,493.047,492.538,492.033,491.536,491.045,490.563,490.086,489.614,489.148,488.689,488.238,487.793,487.352,486.917,486.489,486.068,485.652,485.241,484.837,484.439,484.049,483.664,483.284,482.91,482.542,482.182,481.826,481.476,481.131,480.793,480.462,480.135,479.814,479.498,479.189,478.887,478.589,478.297,478.011,477.73,477.457,477.188,476.924,476.666,476.414,476.168,475.928,475.692,475.462,475.238,475.02,474.808,474.6,474.399,474.203,474.013,473.829,473.649,473.476,473.309,473.149,472.994,472.845,472.702,472.565,472.436,472.313,472.197,472.087,471.985,471.891,471.804,471.725,471.655,471.594,471.542,471.497,471.462,471.437,471.422,471.419])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-(a[b.argmax()]+3*1e-3)).argmin()+1
# profile at peak +3ms
time_d.append(a[np.abs(a-(a[b.argmax()]+3*1e-3)).argmin()])
d2=np.array([773.942,773.942,773.94,773.935,773.928,773.919,773.908,773.895,773.88,773.861,773.841,773.818,773.793,773.766,773.736,773.705,773.671,773.635,773.597,773.557,773.514,773.47,773.423,773.374,773.323,773.27,773.215,773.157,773.097,773.036,772.972,772.905,772.837,772.767,772.694,772.619,772.542,772.463,772.382,772.299,772.213,772.126,772.036,771.944,771.85,771.754,771.656,771.555,771.453,771.348,771.241,771.133,771.021,770.908,770.793,770.676,770.557,770.435,770.311,770.186,770.058,769.928,769.796,769.662,769.526,769.388,769.247,769.105,768.961,768.814,768.665,768.515,768.362,768.207,768.051,767.892,767.731,767.568,767.403,767.236,767.067,766.896,766.722,766.547,766.37,766.191,766.01,765.827,765.641,765.454,765.265,765.074,764.881,764.686,764.488,764.289,764.088,763.885,763.68,763.473,763.264,763.053,762.84,762.626,762.409,762.19,761.97,761.747,761.523,761.296,761.068,760.838,760.606,760.372,760.136,759.898,759.658,759.417,759.173,758.928,758.681,758.432,758.181,757.928,757.673,757.417,757.159,756.899,756.637,756.373,756.107,755.84,755.571,755.3,755.027,754.752,754.476,754.198,753.918,753.636,753.353,753.068,752.781,752.492,752.201,751.909,751.615,751.32,751.022,750.723,750.422,750.12,749.816,749.51,749.202,748.893,748.582,748.269,747.955,747.639,747.322,747.003,746.682,746.359,746.035,745.71,745.382,745.053,744.723,744.391,744.057,743.722,743.385,743.047,742.707,742.365,742.022,741.677,741.331,740.984,740.635,740.284,739.932,739.578,739.223,738.866,738.508,738.148,737.787,737.425,737.061,736.695,736.328,735.96,735.59,735.219,734.846,734.472,734.097,733.72,733.342,732.963,732.582,732.199,731.816,731.431,731.045,730.657,730.268,729.878,729.486,729.093,728.699,728.304,727.907,727.509,727.11,726.709,726.307,725.904,725.5,725.094,724.688,724.28,723.87,723.46,723.048,722.636,722.222,721.807,721.39,720.973,720.554,720.135,719.714,719.292,718.869,718.444,718.019,717.593,717.165,716.737,716.307,715.876,715.444,715.012,714.578,714.143,713.707,713.27,712.832,712.393,711.953,711.512,711.07,710.627,710.183,709.738,709.292,708.846,708.398,707.949,707.5,707.049,706.598,706.145,705.692,705.238,704.783,704.327,703.871,703.413,702.955,702.496,702.036,701.575,701.113,700.651,700.188,699.723,699.259,698.793,698.327,697.859,697.391,696.923,696.453,695.983,695.513,695.041,694.569,694.096,693.622,693.148,692.673,692.197,691.721,691.244,690.766,690.288,689.809,689.33,688.85,688.369,687.887,687.405,686.923,686.44,685.956,685.472,684.987,684.502,684.016,683.53,683.043,682.556,682.068,681.579,681.09,680.601,680.111,679.621,679.13,678.639,678.147,677.655,677.163,676.67,676.176,675.682,675.188,674.694,674.199,673.703,673.208,672.712,672.215,671.718,671.221,670.724,670.226,669.728,669.23,668.731,668.232,667.733,667.233,666.733,666.233,665.733,665.232,664.731,664.23,663.729,663.227,662.726,662.224,661.722,661.219,660.717,660.214,659.711,659.208,658.705,658.202,657.698,657.194,656.691,656.187,655.683,655.179,654.675,654.17,653.666,653.161,652.657,652.152,651.648,651.143,650.638,650.133,649.629,649.124,648.619,648.114,647.609,647.104,646.599,646.094,645.589,645.085,644.58,644.075,643.57,643.066,642.561,642.057,641.552,641.048,640.543,640.039,639.535,639.031,638.527,638.024,637.52,637.016,636.513,636.01,635.507,635.004,634.501,633.999,633.496,632.994,632.492,631.99,631.489,630.987,630.486,629.985,629.484,628.984,628.484,627.984,627.484,626.984,626.485,625.986,625.487,624.989,624.49,623.993,623.495,622.998,622.501,622.004,621.508,621.012,620.516,620.021,619.525,619.031,618.537,618.043,617.549,617.056,616.563,616.07,615.578,615.087,614.595,614.105,613.614,613.124,612.634,612.145,611.656,611.168,610.68,610.192,609.705,609.219,608.733,608.247,607.762,607.277,606.793,606.309,605.826,605.343,604.861,604.379,603.898,603.417,602.937,602.457,601.978,601.499,601.021,600.543,600.066,599.59,599.114,598.638,598.163,597.689,597.216,596.742,596.27,595.798,595.326,594.855,594.385,593.915,593.446,592.978,592.51,592.043,591.575,591.108,589.948,588.791,587.639,586.492,585.348,584.208,583.072,581.941,580.813,579.69,578.572,577.457,576.347,575.241,574.141,573.045,571.954,570.868,569.787,568.712,567.641,566.577,565.517,564.463,563.413,562.369,561.33,560.297,559.268,558.244,557.226,556.213,555.208,554.208,553.213,552.223,551.238,550.259,549.286,548.32,547.359,546.402,545.452,544.507,543.569,542.638,541.713,540.793,539.879,538.971,538.067,537.171,536.282,535.399,534.52,533.648,532.781,531.92,531.068,530.22,529.378,528.542,527.712,526.889,526.074,525.264,524.459,523.66,522.867,522.083,521.303,520.53,519.762,519.001,518.248,517.5,516.757,516.02,515.29,514.568,513.851,513.139,512.433,511.735,511.044,510.359,509.678,509.004,508.337,507.677,507.022,506.373,505.73,505.094,504.465,503.841,503.223,502.612,502.006,501.408,500.816,500.229,499.647,499.072,498.505,497.942,497.385,496.834,496.289,495.752,495.22,494.694,494.174,493.66,493.152,492.651,492.154,491.663,491.179,490.702,490.229,489.762,489.301,488.846,488.397,487.955,487.517,487.085,486.66,486.241,485.827,485.418,485.015,484.618,484.228,483.842,483.462,483.087,482.718,482.356,481.999,481.647,481.301,480.96,480.625,480.296,479.972,479.653,479.34,479.033,478.731,478.435,478.143,477.858,477.578,477.303,477.034,476.77,476.511,476.259,476.011,475.769,475.532,475.3,475.074,474.854,474.638,474.428,474.223,474.024,473.831,473.643,473.46,473.283,473.111,472.946,472.785,472.63,472.482,472.339,472.202,472.071,471.946,471.827,471.715,471.609,471.509,471.416,471.329,471.249,471.176,471.11,471.052,471.001,470.957,470.92,470.891,470.87,470.858,470.854])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-(a[b.argmax()]+5*1e-3)).argmin()+1
# profile at peak +5ms
time_d.append(a[np.abs(a-(a[b.argmax()]+5*1e-3)).argmin()])
d3=np.array([752.592,752.591,752.588,752.584,752.577,752.568,752.557,752.545,752.53,752.513,752.494,752.473,752.45,752.425,752.398,752.369,752.338,752.305,752.269,752.232,752.193,752.152,752.109,752.064,752.017,751.968,751.917,751.864,751.809,751.752,751.693,751.632,751.569,751.504,751.437,751.368,751.297,751.224,751.149,751.072,750.993,750.912,750.83,750.745,750.658,750.569,750.479,750.386,750.292,750.195,750.097,749.996,749.894,749.789,749.683,749.575,749.465,749.353,749.239,749.123,749.005,748.885,748.763,748.639,748.514,748.386,748.257,748.125,747.992,747.857,747.72,747.581,747.44,747.297,747.152,747.006,746.857,746.707,746.555,746.4,746.244,746.087,745.927,745.765,745.602,745.436,745.269,745.1,744.929,744.756,744.582,744.405,744.227,744.047,743.865,743.681,743.495,743.308,743.119,742.928,742.735,742.54,742.344,742.146,741.946,741.744,741.54,741.335,741.128,740.919,740.708,740.495,740.281,740.065,739.847,739.628,739.407,739.184,738.959,738.732,738.504,738.274,738.043,737.81,737.574,737.338,737.099,736.859,736.617,736.374,736.129,735.882,735.633,735.383,735.131,734.878,734.623,734.366,734.107,733.847,733.586,733.322,733.057,732.791,732.523,732.253,731.982,731.709,731.434,731.158,730.88,730.601,730.32,730.038,729.754,729.468,729.181,728.892,728.602,728.31,728.017,727.722,727.426,727.128,726.829,726.528,726.226,725.922,725.617,725.31,725.002,724.692,724.381,724.069,723.755,723.439,723.123,722.804,722.485,722.163,721.841,721.517,721.192,720.865,720.537,720.207,719.876,719.544,719.211,718.876,718.539,718.202,717.863,717.523,717.181,716.838,716.494,716.148,715.802,715.453,715.104,714.753,714.401,714.048,713.693,713.338,712.981,712.623,712.263,711.903,711.541,711.178,710.813,710.448,710.081,709.713,709.344,708.974,708.602,708.23,707.856,707.481,707.105,706.728,706.35,705.971,705.59,705.208,704.826,704.442,704.057,703.671,703.284,702.896,702.507,702.117,701.726,701.333,700.94,700.546,700.15,699.754,699.357,698.958,698.559,698.159,697.757,697.355,696.952,696.548,696.143,695.736,695.33,694.922,694.513,694.103,693.692,693.281,692.868,692.455,692.041,691.626,691.21,690.793,690.375,689.957,689.538,689.118,688.697,688.275,687.852,687.429,687.005,686.58,686.154,685.728,685.301,684.872,684.444,684.014,683.584,683.153,682.721,682.289,681.856,681.422,680.987,680.552,680.116,679.68,679.243,678.805,678.366,677.927,677.487,677.047,676.606,676.164,675.722,675.279,674.836,674.392,673.947,673.502,673.056,672.61,672.163,671.716,671.268,670.819,670.37,669.921,669.471,669.02,668.569,668.118,667.666,667.214,666.761,666.307,665.854,665.399,664.944,664.489,664.034,663.578,663.121,662.665,662.207,661.75,661.292,660.833,660.375,659.916,659.456,658.996,658.536,658.076,657.615,657.154,656.692,656.231,655.769,655.306,654.844,654.381,653.918,653.454,652.991,652.527,652.062,651.598,651.133,650.668,650.203,649.738,649.273,648.807,648.341,647.875,647.408,646.942,646.475,646.009,645.542,645.074,644.607,644.14,643.672,643.205,642.737,642.269,641.801,641.333,640.865,640.397,639.928,639.46,638.992,638.523,638.055,637.586,637.117,636.649,636.18,635.711,635.243,634.774,634.305,633.837,633.368,632.899,632.431,631.962,631.493,631.025,630.556,630.088,629.619,629.151,628.683,628.214,627.746,627.278,626.81,626.342,625.875,625.407,624.94,624.472,624.005,623.538,623.071,622.604,622.138,621.671,621.205,620.739,620.273,619.807,619.341,618.876,618.41,617.945,617.481,617.016,616.552,616.087,615.624,615.16,614.696,614.233,613.77,613.308,612.845,612.383,611.921,611.46,610.998,610.537,610.076,609.616,609.156,608.696,608.236,607.777,607.318,606.86,606.402,605.944,605.486,605.029,604.572,604.116,603.66,603.204,602.749,602.294,601.84,601.385,600.932,600.478,600.025,599.573,599.12,598.669,598.218,597.767,597.316,596.866,596.417,595.968,595.519,595.071,594.623,594.176,593.729,593.283,592.837,592.391,591.947,591.502,591.058,590.615,590.172,589.73,589.288,588.846,588.405,587.965,587.525,587.086,586.647,586.209,585.771,585.334,584.898,584.462,584.026,583.591,583.156,582.073,580.994,579.919,578.848,577.78,576.716,575.656,574.6,573.548,572.5,571.456,570.416,569.38,568.348,567.32,566.297,565.279,564.264,563.255,562.25,561.25,560.254,559.264,558.278,557.296,556.32,555.348,554.381,553.419,552.462,551.51,550.563,549.621,548.685,547.753,546.827,545.905,544.988,544.078,543.172,542.272,541.376,540.486,539.602,538.723,537.85,536.982,536.12,535.263,534.411,533.564,532.723,531.889,531.06,530.236,529.418,528.605,527.798,526.997,526.201,525.411,524.626,523.847,523.074,522.308,521.547,520.791,520.04,519.296,518.558,517.826,517.099,516.377,515.662,514.953,514.25,513.551,512.859,512.172,511.492,510.818,510.148,509.485,508.827,508.177,507.531,506.891,506.257,505.629,505.007,504.39,503.779,503.174,502.575,501.981,501.394,500.812,500.236,499.665,499.101,498.543,497.99,497.442,496.9,496.364,495.834,495.309,494.79,494.276,493.769,493.268,492.772,492.281,491.796,491.317,490.844,490.376,489.913,489.456,489.005,488.56,488.119,487.684,487.255,486.832,486.414,486.002,485.594,485.193,484.797,484.407,484.021,483.641,483.267,482.898,482.535,482.176,481.823,481.476,481.134,480.797,480.466,480.139,479.818,479.503,479.193,478.888,478.588,478.294,478.005,477.721,477.442,477.168,476.9,476.637,476.38,476.127,475.88,475.637,475.401,475.169,474.943,474.721,474.505,474.295,474.09,473.889,473.694,473.505,473.321,473.142,472.969,472.8,472.638,472.481,472.329,472.183,472.042,471.907,471.777,471.654,471.536,471.423,471.317,471.216,471.122,471.033,470.95,470.873,470.802,470.738,470.68,470.628,470.583,470.544,470.512,470.486,470.467,470.456,470.453])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-0*1e-3).argmin()+1
# profile at 0ms
time_d.append(a[np.abs(a-0*1e-3).argmin()])
d4=np.array([690.94,690.939,690.937,690.933,690.927,690.92,690.912,690.902,690.89,690.877,690.863,690.847,690.829,690.81,690.79,690.767,690.744,690.719,690.692,690.664,690.634,690.603,690.57,690.535,690.5,690.462,690.423,690.383,690.341,690.298,690.253,690.206,690.158,690.109,690.058,690.005,689.951,689.896,689.839,689.78,689.72,689.659,689.595,689.531,689.465,689.397,689.328,689.258,689.186,689.112,689.037,688.961,688.883,688.803,688.722,688.64,688.556,688.47,688.384,688.295,688.205,688.114,688.021,687.927,687.831,687.734,687.635,687.535,687.434,687.331,687.226,687.12,687.013,686.904,686.794,686.682,686.569,686.454,686.338,686.22,686.101,685.981,685.859,685.736,685.611,685.485,685.358,685.229,685.098,684.967,684.833,684.699,684.563,684.425,684.287,684.146,684.005,683.862,683.718,683.572,683.425,683.276,683.126,682.975,682.822,682.668,682.513,682.356,682.198,682.038,681.878,681.715,681.552,681.387,681.221,681.053,680.884,680.714,680.542,680.369,680.195,680.02,679.843,679.665,679.485,679.304,679.122,678.939,678.754,678.568,678.381,678.192,678.002,677.811,677.619,677.425,677.23,677.034,676.836,676.638,676.438,676.236,676.034,675.83,675.625,675.419,675.211,675.003,674.793,674.582,674.369,674.156,673.941,673.725,673.508,673.289,673.07,672.849,672.627,672.404,672.18,671.954,671.727,671.5,671.271,671.041,670.809,670.577,670.343,670.109,669.873,669.636,669.398,669.158,668.918,668.677,668.434,668.19,667.945,667.7,667.453,667.205,666.955,666.705,666.454,666.201,665.948,665.694,665.438,665.181,664.924,664.665,664.405,664.145,663.883,663.62,663.356,663.091,662.825,662.559,662.291,662.022,661.752,661.481,661.209,660.936,660.663,660.388,660.112,659.836,659.558,659.279,659,658.719,658.438,658.156,657.872,657.588,657.303,657.017,656.73,656.443,656.154,655.864,655.574,655.283,654.99,654.697,654.403,654.109,653.813,653.516,653.219,652.921,652.622,652.322,652.021,651.72,651.418,651.115,650.811,650.506,650.2,649.894,649.587,649.279,648.97,648.661,648.351,648.04,647.728,647.416,647.103,646.789,646.474,646.159,645.843,645.526,645.208,644.89,644.571,644.252,643.931,643.61,643.289,642.966,642.643,642.32,641.995,641.671,641.345,641.019,640.692,640.364,640.036,639.707,639.378,639.048,638.717,638.386,638.054,637.722,637.389,637.055,636.721,636.386,636.051,635.715,635.379,635.042,634.704,634.366,634.028,633.689,633.349,633.009,632.668,632.327,631.986,631.643,631.301,630.958,630.614,630.27,629.926,629.581,629.235,628.889,628.543,628.196,627.849,627.501,627.153,626.805,626.456,626.106,625.757,625.407,625.056,624.705,624.354,624.002,623.65,623.298,622.945,622.592,622.238,621.884,621.53,621.175,620.821,620.465,620.11,619.754,619.398,619.041,618.685,618.328,617.97,617.613,617.255,616.897,616.538,616.179,615.82,615.461,615.102,614.742,614.382,614.022,613.661,613.3,612.94,612.578,612.217,611.856,611.494,611.132,610.77,610.408,610.045,609.682,609.32,608.957,608.593,608.23,607.867,607.503,607.139,606.776,606.411,606.047,605.683,605.319,604.954,604.59,604.225,603.86,603.495,603.13,602.765,602.4,602.035,601.67,601.304,600.939,600.573,600.208,599.842,599.477,599.111,598.746,598.38,598.014,597.648,597.283,596.917,596.551,596.186,595.82,595.454,595.089,594.723,594.357,593.992,593.626,593.26,592.895,592.529,592.164,591.799,591.433,591.068,590.703,590.338,589.973,589.608,589.243,588.879,588.514,588.149,587.785,587.421,587.056,586.692,586.328,585.964,585.601,585.237,584.874,584.51,584.147,583.784,583.421,583.059,582.696,582.334,581.972,581.61,581.248,580.886,580.525,580.164,579.803,579.442,579.081,578.721,578.36,578,577.641,577.281,576.922,576.563,576.204,575.845,575.487,575.128,574.771,574.413,574.056,573.698,573.342,572.985,572.629,572.273,571.917,571.562,571.206,570.852,570.497,570.143,569.789,569.435,569.082,568.729,568.376,568.023,567.671,567.32,566.968,566.617,566.266,565.916,565.566,565.216,564.867,564.518,564.169,563.821,563.473,563.125,562.778,562.431,562.085,561.739,561.393,561.048,560.703,560.359,560.015,559.671,558.813,557.958,557.106,556.256,555.409,554.565,553.723,552.885,552.049,551.217,550.387,549.56,548.737,547.917,547.099,546.285,545.474,544.667,543.862,543.061,542.264,541.469,540.679,539.891,539.107,538.327,537.551,536.778,536.008,535.242,534.48,533.722,532.967,532.217,531.47,530.727,529.987,529.252,528.521,527.793,527.07,526.351,525.635,524.924,524.217,523.514,522.815,522.12,521.429,520.743,520.06,519.382,518.708,518.039,517.373,516.712,516.055,515.403,514.755,514.111,513.472,512.837,512.206,511.58,510.958,510.341,509.728,509.12,508.516,507.916,507.321,506.731,506.145,505.563,504.986,504.414,503.846,503.283,502.724,502.17,501.62,501.075,500.534,499.998,499.467,498.94,498.418,497.9,497.387,496.879,496.376,495.876,495.382,494.892,494.406,493.926,493.45,492.978,492.511,492.049,491.592,491.139,490.69,490.246,489.807,489.373,488.943,488.517,488.096,487.68,487.269,486.862,486.46,486.062,485.669,485.281,484.897,484.517,484.143,483.773,483.407,483.046,482.689,482.337,481.99,481.648,481.309,480.976,480.646,480.322,480.002,479.687,479.376,479.069,478.767,478.47,478.177,477.888,477.604,477.325,477.05,476.78,476.514,476.252,475.995,475.743,475.495,475.251,475.012,474.777,474.547,474.321,474.1,473.883,473.671,473.463,473.259,473.06,472.865,472.675,472.49,472.308,472.131,471.959,471.791,471.627,471.468,471.313,471.163,471.017,470.876,470.739,470.606,470.478,470.355,470.236,470.121,470.011,469.905,469.804,469.708,469.616,469.528,469.445,469.367,469.293,469.224,469.16,469.1,469.045,468.995,468.949,468.909,468.874,468.843,468.817,468.797,468.782,468.773,468.77])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-0.35*1e-3).argmin()+1
# profile at 0.35ms
time_d.append(a[np.abs(a-0.35*1e-3).argmin()])
d5=np.array([994.176,994.099,993.988,993.916,993.867,993.806,993.732,993.647,993.557,993.5,993.469,993.44,993.401,993.354,993.302,993.246,993.186,993.123,993.058,992.986,992.913,992.837,992.753,992.663,992.573,992.48,992.38,992.278,992.173,992.063,991.949,991.83,991.708,991.583,991.454,991.321,991.184,991.043,990.899,990.751,990.599,990.443,990.283,990.12,989.952,989.781,989.606,989.427,989.244,989.057,988.867,988.673,988.476,988.274,988.069,987.86,987.648,987.43,987.21,986.986,986.758,986.527,986.291,986.052,985.81,985.563,985.313,985.059,984.802,984.541,984.276,984.007,983.735,983.459,983.18,982.896,982.61,982.319,982.025,981.727,981.426,981.121,980.812,980.5,980.184,979.865,979.542,979.215,978.885,978.551,978.214,977.873,977.529,977.181,976.83,976.475,976.116,975.755,975.389,975.02,974.648,974.272,973.893,973.51,973.124,972.734,972.341,971.944,971.544,971.141,970.734,970.324,969.911,969.494,969.074,968.65,968.223,967.793,967.359,966.922,966.482,966.039,965.592,965.142,964.688,964.232,963.772,963.309,962.843,962.373,961.9,961.424,960.945,960.463,959.977,959.488,958.997,958.502,958.003,957.502,956.998,956.49,955.98,955.466,954.95,954.43,953.907,953.381,952.852,952.32,951.785,951.248,950.707,950.163,949.616,949.066,948.514,947.958,947.399,946.838,946.274,945.706,945.136,944.563,943.988,943.409,942.828,942.243,941.656,941.066,940.474,939.878,939.28,938.679,938.076,937.469,936.86,936.248,935.634,935.017,934.397,933.775,933.15,932.522,931.892,931.259,930.624,929.986,929.345,928.702,928.057,927.409,926.758,926.105,925.449,924.791,924.131,923.468,922.802,922.134,921.464,920.792,920.117,919.439,918.76,918.078,917.393,916.707,916.018,915.327,914.633,913.938,913.24,912.539,911.837,911.132,910.426,909.717,909.005,908.292,907.577,906.859,906.14,905.418,904.694,903.968,903.24,902.51,901.778,901.044,900.308,899.57,898.83,898.089,897.345,896.599,895.851,895.102,894.35,893.597,892.842,892.085,891.326,890.565,889.803,889.039,888.273,887.505,886.735,885.964,885.191,884.417,883.64,882.862,882.083,881.301,880.518,879.734,878.948,878.16,877.37,876.58,875.787,874.993,874.198,873.401,872.602,871.802,871.001,870.198,869.394,868.588,867.781,866.973,866.163,865.352,864.539,863.725,862.91,862.094,861.276,860.457,859.637,858.815,857.992,857.168,856.343,855.517,854.689,853.861,853.031,852.2,851.368,850.535,849.7,848.865,848.029,847.191,846.353,845.513,844.673,843.831,842.989,842.145,841.301,840.456,839.609,838.762,837.914,837.066,836.216,835.365,834.514,833.662,832.809,831.955,831.1,830.245,829.389,828.532,827.674,826.816,825.957,825.097,824.237,823.376,822.515,821.652,820.79,819.926,819.062,818.198,817.332,816.467,815.601,814.734,813.867,812.999,812.131,811.262,810.393,809.524,808.654,807.783,806.913,806.042,805.17,804.298,803.426,802.554,801.681,800.808,799.934,799.061,798.187,797.313,796.438,795.564,794.689,793.814,792.939,792.063,791.188,790.312,789.436,788.56,787.684,786.808,785.932,785.056,784.18,783.303,782.427,781.55,780.674,779.798,778.921,778.045,777.169,776.293,775.416,774.54,773.664,772.789,771.913,771.037,770.162,769.286,768.411,767.536,766.661,765.787,764.913,764.038,763.165,762.291,761.418,760.544,759.672,758.799,757.927,757.055,756.184,755.312,754.441,753.571,752.701,751.831,750.962,750.093,749.224,748.357,747.489,746.622,745.755,744.889,744.023,743.158,742.293,741.429,740.566,739.702,738.84,737.978,737.117,736.256,735.396,734.536,733.677,732.819,731.961,731.104,730.247,729.392,728.537,727.682,726.828,725.975,725.123,724.272,723.421,722.571,721.721,720.873,720.025,719.178,718.332,717.487,716.642,715.798,714.955,714.113,713.272,712.432,711.592,710.753,709.916,709.079,708.243,707.408,706.573,705.74,704.908,704.076,703.246,702.416,701.588,700.761,699.935,699.109,698.285,697.462,696.64,695.82,695,694.181,693.364,692.548,691.732,690.917,690.104,689.292,688.481,687.671,686.862,686.055,685.248,684.444,683.641,682.843,682.047,681.254,680.463,679.672,678.884,678.096,677.307,676.505,675.737,675.06,674.354,672.145,670.182,668.129,666.092,664.103,662.154,660.217,658.282,656.416,654.521,652.645,650.782,648.946,647.119,645.301,643.488,641.668,639.86,638.048,636.245,634.451,632.653,630.859,629.087,627.33,625.569,623.811,622.075,620.363,618.675,617.004,615.329,613.611,611.887,610.214,608.586,606.984,605.38,603.742,602.104,600.52,598.979,597.458,595.94,594.389,592.808,591.239,589.698,588.188,586.707,585.261,583.787,582.242,580.745,579.326,577.93,576.563,575.167,573.716,572.317,570.975,569.637,568.315,566.968,565.568,564.218,562.942,561.688,560.412,559.082,557.79,556.559,555.345,554.109,552.824,551.585,550.416,549.269,548.098,546.882,545.71,544.597,543.498,542.377,541.215,540.089,539.017,537.963,536.896,535.792,534.722,533.703,532.701,531.687,530.637,529.615,528.638,527.678,526.702,525.694,524.726,523.813,522.92,522.009,521.073,520.179,519.326,518.475,517.608,516.715,515.845,515.011,514.194,513.372,512.528,511.715,510.944,510.187,509.415,508.627,507.874,507.157,506.446,505.722,504.981,504.263,503.576,502.901,502.219,501.521,500.849,500.213,499.59,498.958,498.315,497.7,497.113,496.53,495.94,495.336,494.752,494.193,493.648,493.098,492.538,492.002,491.494,490.996,490.49,489.976,489.486,489.021,488.562,488.097,487.625,487.171,486.737,486.312,485.883,485.449,485.033,484.64,484.257,483.869,483.475,483.103,482.752,482.408,482.059,481.706,481.368,481.047,480.736,480.424,480.111,479.813,479.53,479.254,478.978,478.699,478.434,478.184,477.94,477.705,477.47,477.235,477.019,476.819,476.62,476.425,476.238,476.057,475.876,475.701,475.539,475.395,475.262,475.142,475.049,474.956])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-0.22*1e-3).argmin()+1
# profile at 0.22ms
time_d.append(a[np.abs(a-0.22*1e-3).argmin()])
d6=np.array([852.02,851.939,851.831,851.766,851.726,851.676,851.613,851.539,851.46,851.417,851.401,851.388,851.365,851.334,851.299,851.259,851.218,851.173,851.128,851.077,851.026,850.973,850.913,850.848,850.784,850.718,850.646,850.574,850.499,850.421,850.339,850.254,850.166,850.077,849.985,849.89,849.793,849.692,849.589,849.483,849.374,849.263,849.149,849.032,848.913,848.79,848.665,848.537,848.406,848.273,848.137,847.998,847.857,847.712,847.566,847.416,847.265,847.109,846.951,846.791,846.628,846.463,846.294,846.123,845.95,845.773,845.594,845.413,845.229,845.042,844.852,844.66,844.465,844.268,844.068,843.865,843.66,843.452,843.241,843.028,842.813,842.594,842.374,842.15,841.924,841.695,841.464,841.231,840.994,840.755,840.514,840.27,840.023,839.774,839.523,839.269,839.012,838.753,838.491,838.227,837.961,837.692,837.42,837.146,836.869,836.59,836.309,836.025,835.738,835.45,835.158,834.864,834.568,834.27,833.969,833.666,833.36,833.052,832.741,832.428,832.113,831.795,831.475,831.153,830.828,830.501,830.171,829.839,829.505,829.169,828.83,828.489,828.146,827.8,827.452,827.102,826.75,826.395,826.038,825.679,825.317,824.953,824.587,824.219,823.849,823.476,823.102,822.725,822.346,821.964,821.581,821.195,820.807,820.417,820.025,819.631,819.235,818.836,818.436,818.033,817.628,817.222,816.813,816.402,815.989,815.574,815.157,814.738,814.317,813.893,813.468,813.041,812.612,812.181,811.748,811.313,810.876,810.437,809.996,809.553,809.108,808.661,808.213,807.762,807.31,806.856,806.4,805.942,805.482,805.02,804.557,804.091,803.624,803.155,802.685,802.212,801.738,801.262,800.784,800.304,799.823,799.34,798.855,798.368,797.88,797.39,796.899,796.405,795.91,795.414,794.916,794.416,793.914,793.411,792.906,792.4,791.892,791.382,790.871,790.358,789.844,789.328,788.811,788.292,787.771,787.25,786.726,786.201,785.675,785.147,784.618,784.087,783.555,783.021,782.486,781.95,781.412,780.872,780.332,779.79,779.246,778.702,778.156,777.608,777.06,776.51,775.958,775.406,774.852,774.296,773.74,773.182,772.623,772.063,771.502,770.939,770.375,769.81,769.244,768.677,768.108,767.538,766.968,766.396,765.823,765.248,764.673,764.097,763.519,762.941,762.361,761.78,761.199,760.616,760.032,759.447,758.861,758.275,757.687,757.098,756.508,755.918,755.326,754.734,754.14,753.546,752.951,752.354,751.757,751.16,750.561,749.961,749.361,748.759,748.157,747.554,746.951,746.346,745.741,745.135,744.528,743.92,743.312,742.703,742.093,741.483,740.871,740.259,739.647,739.034,738.42,737.805,737.19,736.574,735.958,735.341,734.723,734.105,733.486,732.866,732.246,731.626,731.005,730.383,729.761,729.138,728.515,727.892,727.268,726.643,726.018,725.392,724.766,724.14,723.513,722.886,722.258,721.63,721.002,720.373,719.744,719.114,718.484,717.854,717.223,716.592,715.961,715.33,714.698,714.066,713.433,712.801,712.168,711.535,710.901,710.268,709.634,709,708.366,707.731,707.097,706.462,705.827,705.192,704.557,703.921,703.286,702.65,702.015,701.379,700.743,700.107,699.471,698.835,698.199,697.562,696.926,696.29,695.653,695.017,694.381,693.745,693.108,692.472,691.836,691.2,690.563,689.927,689.291,688.655,688.02,687.384,686.748,686.113,685.477,684.842,684.207,683.572,682.937,682.302,681.668,681.033,680.399,679.765,679.131,678.498,677.865,677.232,676.599,675.966,675.334,674.701,674.07,673.438,672.807,672.176,671.545,670.915,670.285,669.655,669.025,668.396,667.768,667.139,666.511,665.883,665.256,664.629,664.003,663.377,662.751,662.126,661.501,660.876,660.252,659.629,659.005,658.383,657.761,657.139,656.518,655.897,655.276,654.657,654.037,653.419,652.8,652.183,651.565,650.949,650.332,649.717,649.102,648.488,647.874,647.26,646.648,646.035,645.424,644.813,644.203,643.593,642.984,642.375,641.767,641.16,640.553,639.948,639.343,638.738,638.134,637.531,636.929,636.328,635.727,635.127,634.527,633.929,633.331,632.733,632.136,631.541,630.946,630.352,629.758,629.165,628.572,627.982,627.391,626.805,626.221,625.639,625.058,624.478,623.898,623.317,622.735,622.134,621.569,621.106,620.607,618.913,617.484,615.958,614.447,612.976,611.543,610.12,608.695,607.341,605.951,604.575,603.205,601.855,600.51,599.169,597.832,596.488,595.156,593.819,592.487,591.161,589.832,588.506,587.196,585.895,584.587,583.282,581.992,580.722,579.471,578.233,576.991,575.709,574.42,573.175,571.969,570.783,569.592,568.37,567.146,565.969,564.83,563.707,562.584,561.43,560.248,559.074,557.922,556.795,555.692,554.62,553.519,552.344,551.214,550.16,549.127,548.117,547.075,545.974,544.922,543.926,542.932,541.951,540.944,539.881,538.862,537.912,536.982,536.028,535.015,534.038,533.121,532.219,531.293,530.313,529.374,528.502,527.649,526.77,525.843,524.956,524.126,523.306,522.465,521.578,520.726,519.924,519.136,518.333,517.489,516.676,515.912,515.162,514.398,513.594,512.816,512.081,511.362,510.625,509.852,509.114,508.43,507.762,507.074,506.358,505.68,505.041,504.401,503.745,503.062,502.398,501.769,501.155,500.531,499.883,499.263,498.683,498.114,497.53,496.926,496.354,495.815,495.281,494.733,494.165,493.618,493.1,492.593,492.076,491.54,491.028,490.55,490.082,489.605,489.113,488.646,488.206,487.769,487.323,486.862,486.418,485.998,485.589,485.175,484.747,484.341,483.961,483.589,483.209,482.819,482.451,482.105,481.764,481.416,481.059,480.718,480.396,480.081,479.762,479.434,479.123,478.833,478.552,478.265,477.971,477.696,477.44,477.19,476.935,476.674,476.427,476.196,475.972,475.747,475.518,475.303,475.103,474.908,474.712,474.512,474.324,474.15,473.981,473.82,473.658,473.494,473.348,473.215,473.084,472.956,472.835,472.718,472.6,472.486,472.382,472.292,472.21,472.133,472.074,471.993])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-0.13*1e-3).argmin()+1
# profile at 0.13ms
time_d.append(a[np.abs(a-0.13*1e-3).argmin()])
d7=np.array([764.69,764.64,764.574,764.534,764.509,764.478,764.438,764.392,764.341,764.312,764.3,764.288,764.27,764.247,764.22,764.19,764.159,764.125,764.091,764.052,764.013,763.972,763.927,763.878,763.829,763.78,763.725,763.67,763.614,763.555,763.493,763.428,763.363,763.295,763.225,763.154,763.08,763.004,762.926,762.845,762.763,762.679,762.593,762.504,762.414,762.321,762.226,762.13,762.031,761.93,761.827,761.722,761.615,761.506,761.395,761.282,761.167,761.05,760.93,760.809,760.686,760.561,760.433,760.304,760.173,760.039,759.904,759.767,759.627,759.486,759.343,759.197,759.05,758.9,758.749,758.596,758.44,758.283,758.124,757.963,757.799,757.634,757.467,757.298,757.127,756.954,756.779,756.602,756.424,756.243,756.06,755.875,755.689,755.5,755.31,755.118,754.924,754.728,754.53,754.33,754.128,753.924,753.719,753.511,753.302,753.091,752.878,752.663,752.446,752.227,752.006,751.784,751.56,751.334,751.106,750.876,750.645,750.412,750.176,749.94,749.701,749.46,749.218,748.974,748.728,748.48,748.23,747.979,747.726,747.471,747.215,746.956,746.696,746.434,746.171,745.906,745.639,745.37,745.099,744.827,744.553,744.278,744.001,743.722,743.441,743.159,742.875,742.589,742.302,742.013,741.722,741.43,741.136,740.84,740.543,740.244,739.944,739.642,739.338,739.033,738.726,738.418,738.108,737.796,737.483,737.168,736.852,736.534,736.215,735.894,735.571,735.247,734.922,734.595,734.266,733.936,733.605,733.272,732.937,732.601,732.264,731.925,731.584,731.243,730.899,730.555,730.208,729.861,729.512,729.161,728.81,728.456,728.102,727.746,727.388,727.03,726.67,726.308,725.945,725.581,725.216,724.849,724.48,724.111,723.74,723.368,722.995,722.62,722.244,721.867,721.488,721.108,720.727,720.345,719.961,719.576,719.19,718.803,718.414,718.025,717.634,717.242,716.848,716.454,716.058,715.661,715.263,714.864,714.464,714.063,713.66,713.256,712.852,712.446,712.039,711.631,711.221,710.811,710.4,709.987,709.574,709.159,708.744,708.327,707.91,707.491,707.071,706.651,706.229,705.806,705.383,704.958,704.532,704.106,703.678,703.25,702.82,702.39,701.959,701.526,701.093,700.659,700.224,699.789,699.352,698.914,698.476,698.037,697.596,697.155,696.714,696.271,695.827,695.383,694.938,694.492,694.045,693.598,693.15,692.701,692.251,691.8,691.349,690.897,690.444,689.991,689.536,689.081,688.626,688.169,687.712,687.255,686.796,686.337,685.878,685.417,684.956,684.495,684.032,683.569,683.106,682.642,682.177,681.712,681.246,680.779,680.312,679.845,679.377,678.908,678.439,677.969,677.499,677.028,676.557,676.085,675.612,675.14,674.666,674.193,673.718,673.244,672.768,672.293,671.817,671.34,670.863,670.386,669.908,669.43,668.952,668.473,667.994,667.514,667.034,666.554,666.073,665.592,665.111,664.629,664.147,663.664,663.182,662.699,662.216,661.732,661.248,660.764,660.28,659.795,659.31,658.825,658.34,657.854,657.368,656.882,656.396,655.91,655.423,654.936,654.449,653.962,653.475,652.987,652.5,652.012,651.524,651.036,650.548,650.06,649.571,649.083,648.594,648.105,647.617,647.128,646.639,646.15,645.661,645.172,644.682,644.193,643.704,643.215,642.725,642.236,641.747,641.258,640.768,640.279,639.79,639.3,638.811,638.322,637.833,637.344,636.855,636.366,635.877,635.388,634.9,634.411,633.922,633.434,632.946,632.458,631.969,631.482,630.994,630.506,630.018,629.531,629.044,628.557,628.07,627.583,627.097,626.61,626.124,625.638,625.153,624.667,624.182,623.697,623.212,622.727,622.243,621.759,621.275,620.791,620.308,619.825,619.342,618.859,618.377,617.895,617.413,616.932,616.451,615.97,615.49,615.01,614.53,614.05,613.571,613.092,612.614,612.136,611.658,611.181,610.704,610.227,609.751,609.275,608.8,608.325,607.85,607.376,606.902,606.429,605.956,605.483,605.011,604.539,604.068,603.597,603.127,602.657,602.188,601.719,601.25,600.782,600.315,599.848,599.381,598.915,598.45,597.985,597.521,597.056,596.593,596.13,595.668,595.206,594.744,594.284,593.823,593.364,592.904,592.448,591.992,591.538,591.085,590.631,590.179,589.726,589.271,588.804,588.36,587.981,587.578,586.298,585.185,584.013,582.85,581.712,580.598,579.49,578.382,577.318,576.233,575.157,574.084,573.023,571.965,570.911,569.86,568.806,567.76,566.713,565.669,564.63,563.591,562.554,561.528,560.506,559.483,558.462,557.45,556.451,555.465,554.487,553.508,552.507,551.504,550.527,549.574,548.633,547.692,546.732,545.774,544.844,543.938,543.042,542.148,541.237,540.31,539.389,538.483,537.592,536.716,535.861,534.989,534.074,533.186,532.347,531.521,530.711,529.881,529.017,528.184,527.387,526.592,525.807,525.007,524.174,523.369,522.607,521.858,521.095,520.299,519.525,518.789,518.064,517.326,516.556,515.812,515.11,514.42,513.716,512.985,512.279,511.608,510.946,510.271,509.571,508.892,508.246,507.61,506.965,506.297,505.649,505.032,504.425,503.811,503.174,502.554,501.962,501.381,500.79,500.179,499.59,499.035,498.492,497.937,497.368,496.822,496.301,495.781,495.253,494.71,494.181,493.674,493.177,492.676,492.161,491.664,491.194,490.731,490.261,489.78,489.319,488.881,488.446,488.005,487.553,487.115,486.697,486.286,485.87,485.445,485.036,484.648,484.268,483.884,483.493,483.118,482.76,482.406,482.048,481.682,481.329,480.991,480.661,480.33,479.992,479.667,479.361,479.061,478.758,478.45,478.156,477.877,477.603,477.327,477.046,476.776,476.52,476.269,476.018,475.762,475.518,475.288,475.065,474.84,474.612,474.397,474.196,473.999,473.801,473.601,473.411,473.232,473.059,472.886,472.713,472.55,472.397,472.249,472.102,471.955,471.815,471.686,471.562,471.444,471.327,471.211,471.107,471.013,470.921,470.833,470.751,470.673,470.596,470.523,470.458,470.403,470.354,470.309,470.275,470.227])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-0.6*1e-3).argmin()+1
# profile at 0.6ms
time_d.append(a[np.abs(a-0.6*1e-3).argmin()])
d8=np.array([1001,1001.02,1001.04,1001.04,1001.03,1001.02,1001,1000.99,1000.97,1000.94,1000.89,1000.84,1000.79,1000.73,1000.68,1000.62,1000.55,1000.49,1000.41,1000.34,1000.26,1000.18,1000.09,1000.01,999.913,999.816,999.716,999.611,999.502,999.39,999.273,999.154,999.03,998.902,998.77,998.634,998.495,998.351,998.204,998.053,997.897,997.739,997.576,997.409,997.238,997.064,996.886,996.704,996.518,996.328,996.135,995.938,995.736,995.531,995.323,995.11,994.893,994.673,994.449,994.221,993.99,993.754,993.515,993.272,993.025,992.775,992.52,992.262,992,991.735,991.465,991.192,990.915,990.635,990.351,990.063,989.771,989.476,989.177,988.874,988.567,988.257,987.944,987.626,987.305,986.98,986.652,986.32,985.985,985.645,985.303,984.956,984.606,984.253,983.895,983.535,983.17,982.802,982.431,982.056,981.677,981.295,980.91,980.521,980.128,979.732,979.333,978.93,978.523,978.113,977.7,977.283,976.863,976.439,976.012,975.582,975.148,974.711,974.27,973.826,973.379,972.928,972.474,972.016,971.556,971.092,970.624,970.154,969.68,969.203,968.722,968.239,967.752,967.261,966.768,966.272,965.772,965.269,964.763,964.253,963.741,963.225,962.706,962.184,961.659,961.131,960.6,960.066,959.528,958.988,958.445,957.898,957.348,956.796,956.24,955.682,955.12,954.556,953.988,953.418,952.844,952.268,951.689,951.107,950.522,949.934,949.343,948.75,948.153,947.554,946.952,946.347,945.739,945.129,944.516,943.9,943.281,942.659,942.035,941.408,940.779,940.147,939.512,938.874,938.234,937.591,936.946,936.298,935.647,934.994,934.338,933.68,933.019,932.355,931.689,931.021,930.35,929.677,929.001,928.322,927.642,926.958,926.273,925.585,924.895,924.202,923.507,922.809,922.11,921.408,920.703,919.997,919.288,918.577,917.863,917.148,916.43,915.71,914.988,914.263,913.537,912.808,912.077,911.344,910.609,909.872,909.133,908.391,907.648,906.903,906.155,905.406,904.654,903.901,903.146,902.388,901.629,900.868,900.105,899.34,898.573,897.804,897.034,896.262,895.487,894.711,893.934,893.154,892.373,891.589,890.805,890.018,889.23,888.44,887.648,886.855,886.06,885.263,884.465,883.666,882.864,882.061,881.257,880.451,879.643,878.834,878.023,877.211,876.398,875.583,874.766,873.948,873.129,872.308,871.486,870.662,869.838,869.011,868.184,867.355,866.525,865.694,864.861,864.027,863.192,862.355,861.518,860.679,859.839,858.998,858.155,857.312,856.467,855.622,854.775,853.927,853.078,852.228,851.377,850.525,849.672,848.818,847.963,847.107,846.25,845.392,844.533,843.673,842.813,841.951,841.089,840.226,839.361,838.497,837.631,836.764,835.897,835.029,834.16,833.291,832.42,831.55,830.678,829.806,828.933,828.059,827.185,826.31,825.434,824.558,823.681,822.804,821.926,821.048,820.169,819.289,818.41,817.529,816.648,815.767,814.885,814.003,813.12,812.237,811.354,810.47,809.586,808.701,807.817,806.931,806.046,805.16,804.274,803.388,802.501,801.614,800.727,799.84,798.953,798.065,797.177,796.289,795.401,794.513,793.624,792.736,791.847,790.958,790.07,789.181,788.292,787.403,786.514,785.625,784.736,783.847,782.958,782.069,781.181,780.292,779.403,778.515,777.626,776.738,775.85,774.962,774.074,773.186,772.298,771.411,770.524,769.637,768.75,767.864,766.977,766.091,765.206,764.32,763.435,762.55,761.665,760.781,759.897,759.014,758.131,757.248,756.366,755.484,754.602,753.721,752.841,751.961,751.081,750.202,749.323,748.445,747.567,746.69,745.813,744.937,744.061,743.186,742.312,741.438,740.564,739.692,738.819,737.948,737.077,736.207,735.337,734.468,733.6,732.733,731.866,731,730.134,729.269,728.406,727.542,726.68,725.818,724.957,724.097,723.238,722.379,721.521,720.664,719.808,718.953,718.099,717.245,716.392,715.541,714.69,713.84,712.991,712.143,711.295,710.449,709.604,708.759,707.916,707.074,706.233,705.392,704.553,703.715,702.878,702.042,701.207,700.373,699.54,698.709,697.879,697.049,696.221,695.394,694.568,693.744,692.92,692.098,691.277,690.457,689.638,688.821,688.005,687.19,686.378,685.565,684.754,683.944,683.136,682.329,681.523,680.72,679.919,679.127,678.328,677.497,676.685,674.733,672.726,670.753,668.788,666.822,664.854,662.893,660.944,658.987,657.054,655.134,653.232,651.341,649.464,647.597,645.739,643.888,642.041,640.202,638.373,636.552,634.739,632.934,631.14,629.36,627.594,625.84,624.096,622.361,620.636,618.918,617.21,615.518,613.838,612.163,610.494,608.836,607.193,605.567,603.953,602.342,600.734,599.135,597.547,595.975,594.419,592.874,591.339,589.814,588.297,586.786,585.292,583.833,582.376,580.908,579.448,577.998,576.57,575.173,573.778,572.378,570.988,569.606,568.241,566.906,565.575,564.239,562.912,561.604,560.326,559.052,557.772,556.5,555.244,554.02,552.801,551.577,550.361,549.163,547.993,546.827,545.658,544.496,543.351,542.23,541.115,539.998,538.891,537.801,536.738,535.679,534.618,533.567,532.53,531.518,530.512,529.503,528.502,527.516,526.555,525.601,524.645,523.697,522.765,521.854,520.948,520.044,519.15,518.27,517.408,516.553,515.698,514.853,514.021,513.21,512.404,511.598,510.801,510.018,509.254,508.496,507.74,506.993,506.259,505.541,504.83,504.12,503.419,502.73,502.058,501.393,500.73,500.074,499.432,498.806,498.186,497.568,496.959,496.36,495.776,495.199,494.625,494.059,493.504,492.965,492.432,491.901,491.377,490.864,490.364,489.871,489.381,488.899,488.427,487.969,487.516,487.067,486.625,486.193,485.775,485.363,484.954,484.552,484.16,483.78,483.406,483.035,482.672,482.318,481.974,481.637,481.304,480.979,480.663,480.357,480.058,479.762,479.473,479.194,478.924,478.661,478.402,478.15,477.905,477.669,477.443,477.223,477.008,476.801,476.603,476.411,476.229,476.058,475.899,475.752,475.619,475.503,475.412,475.348,475.337])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-1.03*1e-3).argmin()+1
# profile at 1.03ms
time_d.append(a[np.abs(a-1.03*1e-3).argmin()])
d9=np.array([873.991,874.002,874.017,874.021,874.017,874.011,874.004,873.996,873.985,873.964,873.934,873.901,873.865,873.828,873.787,873.744,873.698,873.648,873.595,873.54,873.482,873.42,873.357,873.29,873.221,873.148,873.072,872.994,872.912,872.828,872.741,872.651,872.558,872.462,872.363,872.261,872.156,872.049,871.938,871.825,871.709,871.589,871.467,871.342,871.215,871.084,870.95,870.814,870.674,870.532,870.387,870.239,870.088,869.935,869.778,869.619,869.456,869.291,869.123,868.952,868.779,868.602,868.423,868.24,868.055,867.867,867.676,867.483,867.286,867.087,866.885,866.68,866.473,866.262,866.049,865.833,865.614,865.393,865.168,864.941,864.711,864.479,864.243,864.005,863.764,863.521,863.274,863.025,862.773,862.519,862.262,862.002,861.739,861.474,861.206,860.935,860.662,860.386,860.107,859.826,859.542,859.255,858.966,858.674,858.379,858.082,857.782,857.48,857.175,856.867,856.557,856.244,855.929,855.61,855.29,854.967,854.641,854.313,853.982,853.649,853.313,852.975,852.634,852.29,851.945,851.596,851.245,850.892,850.536,850.178,849.817,849.454,849.089,848.721,848.35,847.977,847.602,847.224,846.844,846.462,846.077,845.69,845.3,844.908,844.514,844.117,843.718,843.317,842.913,842.507,842.099,841.688,841.276,840.861,840.443,840.024,839.602,839.178,838.751,838.323,837.892,837.459,837.024,836.586,836.147,835.705,835.261,834.815,834.367,833.917,833.464,833.01,832.553,832.094,831.633,831.17,830.705,830.238,829.769,829.298,828.824,828.349,827.872,827.392,826.911,826.428,825.943,825.455,824.966,824.475,823.982,823.487,822.99,822.491,821.99,821.487,820.983,820.476,819.968,819.458,818.946,818.432,817.916,817.399,816.879,816.358,815.835,815.311,814.784,814.256,813.726,813.194,812.661,812.126,811.589,811.051,810.51,809.968,809.425,808.88,808.333,807.784,807.234,806.682,806.129,805.574,805.018,804.459,803.9,803.339,802.776,802.212,801.646,801.078,800.51,799.939,799.368,798.794,798.22,797.643,797.066,796.487,795.906,795.325,794.741,794.157,793.571,792.983,792.395,791.805,791.213,790.62,790.026,789.431,788.834,788.237,787.637,787.037,786.435,785.832,785.228,784.623,784.016,783.409,782.8,782.19,781.579,780.966,780.353,779.738,779.122,778.505,777.887,777.268,776.648,776.027,775.405,774.782,774.157,773.532,772.906,772.278,771.65,771.021,770.39,769.759,769.127,768.494,767.86,767.225,766.589,765.952,765.315,764.676,764.037,763.397,762.756,762.114,761.471,760.828,760.183,759.538,758.893,758.246,757.599,756.951,756.302,755.652,755.002,754.351,753.699,753.047,752.394,751.74,751.086,750.431,749.776,749.12,748.463,747.806,747.148,746.489,745.83,745.17,744.51,743.85,743.188,742.527,741.865,741.202,740.539,739.875,739.211,738.546,737.881,737.216,736.55,735.884,735.217,734.55,733.883,733.215,732.547,731.878,731.21,730.541,729.871,729.201,728.531,727.861,727.19,726.52,725.849,725.177,724.506,723.834,723.162,722.49,721.817,721.144,720.472,719.799,719.126,718.452,717.779,717.105,716.432,715.758,715.084,714.41,713.736,713.062,712.388,711.714,711.04,710.365,709.691,709.017,708.343,707.668,706.994,706.32,705.646,704.971,704.297,703.623,702.949,702.275,701.602,700.928,700.254,699.581,698.907,698.234,697.561,696.888,696.215,695.543,694.87,694.198,693.526,692.854,692.182,691.511,690.84,690.169,689.498,688.828,688.158,687.488,686.818,686.149,685.48,684.811,684.143,683.475,682.807,682.14,681.473,680.806,680.14,679.474,678.809,678.144,677.479,676.815,676.151,675.487,674.824,674.162,673.499,672.838,672.177,671.516,670.855,670.196,669.536,668.878,668.219,667.562,666.904,666.248,665.591,664.936,664.281,663.626,662.972,662.319,661.666,661.014,660.362,659.711,659.061,658.411,657.762,657.114,656.466,655.819,655.172,654.526,653.881,653.237,652.593,651.95,651.308,650.666,650.025,649.385,648.746,648.107,647.469,646.832,646.196,645.56,644.925,644.291,643.658,643.025,642.394,641.763,641.133,640.503,639.875,639.247,638.62,637.994,637.369,636.744,636.12,635.497,634.874,634.251,633.629,633.008,632.388,631.769,631.151,630.537,629.918,629.284,628.658,627.16,625.634,624.134,622.637,621.137,619.636,618.139,616.651,615.159,613.681,612.209,610.745,609.285,607.833,606.388,604.951,603.523,602.101,600.688,599.282,597.882,596.491,595.108,593.731,592.359,590.999,589.646,588.299,586.958,585.621,584.29,582.969,581.667,580.376,579.085,577.795,576.51,575.235,573.977,572.73,571.481,570.234,568.993,567.761,566.545,565.346,564.155,562.968,561.785,560.607,559.432,558.272,557.138,556.005,554.866,553.733,552.605,551.493,550.404,549.315,548.224,547.143,546.069,545.009,543.973,542.937,541.896,540.86,539.84,538.842,537.847,536.85,535.859,534.883,533.929,532.976,532.019,531.068,530.132,529.216,528.302,527.386,526.476,525.581,524.706,523.834,522.96,522.094,521.24,520.406,519.575,518.743,517.918,517.105,516.311,515.521,514.732,513.948,513.178,512.425,511.675,510.923,510.178,509.446,508.729,508.014,507.301,506.596,505.904,505.228,504.557,503.888,503.225,502.572,501.934,501.299,500.665,500.038,499.423,498.822,498.223,497.626,497.038,496.46,495.896,495.337,494.779,494.229,493.689,493.162,492.638,492.117,491.602,491.097,490.604,490.115,489.628,489.149,488.68,488.223,487.771,487.322,486.879,486.445,486.023,485.604,485.187,484.777,484.377,483.987,483.601,483.218,482.842,482.475,482.118,481.766,481.417,481.075,480.741,480.418,480.098,479.782,479.471,479.17,478.877,478.589,478.304,478.025,477.755,477.493,477.237,476.984,476.738,476.499,476.268,476.042,475.82,475.605,475.397,475.197,475.002,474.812,474.629,474.451,474.282,474.121,473.965,473.814,473.671,473.537,473.412,473.296,473.192,473.1,473.018,472.948,472.891,472.851,472.826,472.828])

all_d = np.array([d,d1,d2,d3,d4,d5,d6,d7,d8,d9])
# all_d-=273.15
all_d-=300
all_d = np.array([y for x,y in sorted(zip(time_d, all_d))])
time_d_sort = [x for x,y in sorted(zip(time_d, all_d))]


guess = [400,1000,0.005]
all_areas = []
plt.figure(figsize=(20, 10))
plt.plot(c*1e3,power_input(0,c)/power_input(0,c).max(),':',color=color[0],label='input heat profile')
plt.plot(c*1e3,(np.mean([d1,d2,d3],axis=0)-d4)/(np.mean([d1,d2,d3],axis=0)-d4).max(),'-.',color=color[0],label='1,5 / 5ms average temp profile relative to before')
plt.plot([5]*2,[0,1],':',color=color[0])
# all_areas.append(2*np.pi*(0.005**2))

fit = curve_fit(gaussian_1D_fitting,c,d,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,d/d.max(),color=color[1],label='temp profile at peak temperature\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,(d-d4)/(d-d4).max(),'-.',color=color[1],label='temp profile at peak temperature relative to before')
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[1])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[1])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

fit = curve_fit(gaussian_1D_fitting,c,d1,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,d1/d1.max(),color=color[2],label='temp profile at peak temperature + 1.5ms\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,(d1-d4)/(d1-d4).max(),'-.',color=color[2],label='temp profile at peak temperature + 1.5ms relative to before')
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[2])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[2])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

fit = curve_fit(gaussian_1D_fitting,c,d2,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,d2/d2.max(),color=color[3],label='temp profile at peak temperature + 3ms\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,(d2-d4)/(d2-d4).max(),'-.',color=color[3],label='temp profile at peak temperature + 3ms relative to before')
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[3])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[3])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

fit = curve_fit(gaussian_1D_fitting,c,d3,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,d3/d3.max(),color=color[4],label='temp profile at peak temperature + 5ms\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,(d3-d4)/(d3-d4).max(),'-.',color=color[4],label='temp profile at peak temperature + 5ms relative to before')
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[4])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[4])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

fit = curve_fit(gaussian_1D_fitting,c,d4,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,d4/d4.max(),color=color[5],label='temp profile steady state\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[5])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[5])
all_areas = [2*np.pi*((fit_wit_errors[2])**2)] + all_areas

plt.legend(loc='best')
plt.xlabel('radious [mm]')
plt.ylabel('fraction of max [au]')
plt.grid()
# plt.ylim(bottom=b.min()/1.2,top=b.max()*1.2)
# plt.xlim(left=-1,right=15)
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

plt.figure(figsize=(20, 10))
plt.errorbar([-time_d[0]*1e3,0,1.5,3,5],nominal_values(all_areas)/(2*np.pi*(0.005**2)),yerr=std_devs(all_areas)/(2*np.pi*(0.005**2)))
# plt.plot([0,5],[2*np.pi*(0.005**2)]*2,'--')
plt.plot([-time_d[0]*1e3,5],[1]*2,'--')
plt.xlabel('time after peak temp [ms]')
plt.ylabel('measured area / reference area [au]')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)



# simulated weak pulses
# heat_flux = 2e8e^(-(r^2)/(2*(0.005^2)))*(0.0917*0.1+0.5*0.7*e^(-((t-0.00033-1)^2)/(2*(0.000144^2)))+0.5*0.208*e^(-((t-0.000457-1)^2)/(2*(0.000218^2))))

aw=np.array([0,0.0000300407,0.0000629425,0.0000993013,0.000139237,0.000183106,0.000231504,0.000284672,0.000329971,0.000388503,0.000452757,0.000523567,0.000601292,0.000686884,0.000781059,0.000884652,0.000998616,0.0011239,0.00126171,0.00141335,0.00158012,0.00171006,0.00189352,0.00209534,0.00231731,0.00256157,0.00283015,0.00312567,0.00345063,0.00380826,0.00420153,0.00463414,0.00511002,0.00563347,0.00620937,0.00678515,0.00736105,0.00793683,0.00851274,0.00908852,0.0096643,0.0102402,0.010816,0.0113919,0.0119677,0.0125434,0.0131193,0.0136951,0.014271,0.0148468,0.0154227,0.0159985,0.0165743,0.0171502,0.0177259,0.0183018,0.0188776,0.0194534,0.0200293,0.0206051,0.021181,0.0217568,0.0223325,0.0229085,0.0234842,0.0240601,0.0246359,0.0252118,0.0257876,0.0263634,0.0269393,0.027515,0.0280909,0.0286667,0.0292425,0.0298184,0.03])
bw=np.array([396.077,399.506,403.16,408.42,416.149,427.062,441.256,457.438,469.613,480.136,483.866,480.417,472.478,463.475,455.224,448.142,442.33,437.728,434.058,431.023,428.427,426.728,424.774,423.006,421.395,419.917,418.555,417.294,416.122,415.03,414.01,413.053,412.156,411.311,410.515,409.825,409.218,408.68,408.199,407.764,407.371,407.011,406.682,406.378,406.096,405.835,405.591,405.363,405.15,404.949,404.759,404.58,404.41,404.249,404.096,403.95,403.811,403.679,403.552,403.43,403.313,403.201,403.094,402.99,402.89,402.794,402.701,402.612,402.525,402.441,402.36,402.282,402.206,402.132,402.06,401.99,401.969])

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('weak pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
axx1, = ax1.plot(aw*1e3,bw,'b')
axx2, = ax2.plot(aw*1e3,1/4*power_input(aw,0),'r')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 heat flux [W/m2]', color=axx2.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('Comparison between strong (--) and weak (-) pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3.spines["right"].set_position(("axes", 1.1))
ax3.spines["right"].set_visible(True)
axx1, = ax1.plot(a*1e3,b,'--b')
ax1.axvline(x=a[b.argmax()]*1e3,color='b',linestyle='--')
axx1, = ax1.plot(aw*1e3,bw,'b')
ax1.axvline(x=aw[bw.argmax()]*1e3,color='b',linestyle='-')
axx2, = ax2.plot(a*1e3,b-b[0],'--r')
axx2, = ax2.plot(aw*1e3,bw-bw[0],'r')
interp = interp1d(aw,bw)(a)
axx2, = ax2.plot(a*1e3,(b-b[0])-(interp-bw[0]),':r')
axx3, = ax3.plot(a*1e3,power_input(a,0),'--g')
temp = np.trapz(power_input(a[:b.argmax()],0)-power_input(np.inf,0),x=a[:b.argmax()]) / np.trapz(power_input(a,0)-power_input(np.inf,0),x=a)
ax3.axvline(x=a[power_input(a,0).argmax()]*1e3,color='g',linestyle='--',label='%.3g' %(temp*100) + r'$ \% $'+' of ELM energy delivered before peak temp')
axx3, = ax3.plot(aw*1e3,1/4*power_input(aw,0),'g')
temp = np.trapz(1/4*power_input(aw[:bw.argmax()],0)-1/4*power_input(np.inf,0),x=aw[:bw.argmax()]) / np.trapz(1/4*power_input(aw,0)-1/4*power_input(np.inf,0),x=aw)
ax3.axvline(x=aw[power_input(aw,0).argmax()]*1e3,color='g',linestyle='-',label='%.3g' %(temp*100) + r'$ \% $'+' of ELM energy delivered before peak temp')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 dT [K]', color=axx2.get_color())  # we already handled the x-label with ax1
ax3.set_ylabel('r=0 heat flux [W/m2]', color=axx3.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax3.tick_params(axis='y', labelcolor=axx3.get_color())
ax1.set_xlim(left=0,right=5)
ax1.grid()
ax3.legend(loc='best', fontsize='x-small')
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


plt.figure(figsize=(20, 10))
plt.plot(aw*1e3,bw,color=color[0],label='full simulated temperature')
time_after_peak=1.5e-3
plt.plot([aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bw.min(),bw.max()],'--k')
bds = [[20,1e-3,3e-1,0],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
guess=[bw[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]), aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():], bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]-np.mean(bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]))**2)))
plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1],label='double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
plt.title('weak pulse')
# plt.ylim(bottom=b.min()*0.9,top=b.max()*1.2)
plt.xlim(right=10)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_energy1 = []
all_energy2 = []
all_energy3 = []
all_energy4 = []
all_energy5 = []
all_energy6 = []
for time_after_peak in np.array([0.5,1,1.5,2,3,5])*1e-3:
	plt.figure(figsize=(20, 10))
	plt.plot(aw*1e3,bw,color=color[0],linewidth=4,label='full simulated temperature')
	# plt.plot(a1*1e3,b1,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000616*1e3,1.34e-05*1e3,(13.25+0.0917*0.1)*8e8))
	# plt.plot(a2*1e3,b2,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(1e-07*1e3,0.00108*1e3,(0.1678+0.0917*0.1)*8e8))
	# plt.plot(a3*1e3,b3,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000762*1e3,1.66e-05*1e3,(10.31+0.0917*0.1)*8e8))
	# bds = [[20,1e-3,1e-4,1],[np.inf,np.inf,1e-3,1.0005]]
	# bds = [[b[0]-1,1e-3,1e-6,0],[b[0]+1,np.inf,1,a[np.abs(a-(a[bw.argmax()]+1.5e-3)).argmin()]]]
	# time_after_peak = 5e-3
	plt.title('weak pulse temperature profile used from ts=%.3gms after the temperature peak' %(time_after_peak*1e3))
	bds1 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess1=[bw[0],1,0.5,0.]
	bds2 = [[20,1e-3,1e-8,0],[np.inf,np.inf,1e-6,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess2=[bw[0],1,1e-6,0.]
	bds3 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,1e-7]]
	guess3=[bw[0],1,0.5,0.]
	bds4 = [[20,1e-3,0.01,0],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess4=[bw[0],1,1,0.]
	bds5 = [[20,1e-3,0.1,0],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess5=[bw[0],1,1,0.]
	bds6 = [[20,1e-3,1e-2,0.2*1e-3],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess6=[bw[0],1,0.5,0.6*1e-3]
	# plt.plot([1.5e-3]*2,[b.min(),b.max()],'--k')
	plt.plot([aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bw.min(),bw.max()],'--k')
	for i,arg in enumerate([[bds1,guess1],[bds2,guess2],[bds3,guess3],[bds4,guess4],[bds5,guess5],[bds6,guess6]]):
		bds,guess = arg
		# print(guess)
		fit = curve_fit(semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]), aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():], bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
		fit_wit_errors = correlated_values(fit[0],fit[1])
		energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
		pulse_duration_ms = 1e3*(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
		R2 = 1-np.sum(((bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]-np.mean(bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]))**2)))
		# print(fit_wit_errors)
		if i==0:
			all_energy1.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1],label='free double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1])
		elif i==1:
			all_energy2.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus<1e-6)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==2:
			all_energy3.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0<1e-7)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==3:
			all_energy4.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.01)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==4:
			all_energy5.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.1)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==5:
			all_energy6.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0>0.2)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
	# guess = [1000,1e8,1e-3,0]
	# bds=[[20,0,0,0],[np.inf,np.inf,np.inf,np.inf]]
	# fit = curve_fit(exponential_decay, a[np.abs(a-(a[bw.argmax()]+time_after_peak)).argmin():], bw[np.abs(a-(a[bw.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	# fit_wit_errors = correlated_values(fit[0],fit[1])
	# plt.plot(a*1e3,exponential_decay(a,*fit[0]),'--',label='exponential decay')

	plt.plot(aw*1e3,power_input(aw,0)/np.max(power_input(aw,0))*(bw.max()-bw.min())+bw.min(),':',color=color[i+2],label='power input (not in scale), energy input~5.5J')
	plt.legend(loc='best', fontsize='small')
	plt.ylim(top=(bw.max()-bw.min())*1.4+bw.min())
	plt.xlim(left=-1,right=15)
	plt.xlabel('time [ms]')
	plt.ylabel('temperature [K]')
	plt.grid()
	figure_index+=1
	plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	plt.close('all')
	# plt.pause(0.01)

all_energy1 = np.array(all_energy1)
all_energy2 = np.array(all_energy2)
all_energy3 = np.array(all_energy3)
all_energy4 = np.array(all_energy4)
all_energy5 = np.array(all_energy5)
all_energy6 = np.array(all_energy6)
nominal_energy = 5.5	# J
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy1)/nominal_energy,yerr=std_devs(all_energy1)/nominal_energy,color=color[1],label='free double root')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy2)/nominal_energy,yerr=std_devs(all_energy2)/nominal_energy,color=color[2],linestyle='--',label='constrained (taus<1e-6)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy3)/nominal_energy,yerr=std_devs(all_energy3)/nominal_energy,color=color[3],linestyle='--',label='constrained (t0<1e-7)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy4)/nominal_energy,yerr=std_devs(all_energy4)/nominal_energy,color=color[4],linestyle='--',label='constrained (taus>0.01)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy5)/nominal_energy,yerr=std_devs(all_energy5)/nominal_energy,color=color[5],linestyle='--',label='constrained (taus>0.1)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy6)/nominal_energy,yerr=std_devs(all_energy6)/nominal_energy,color=color[6],linestyle='--',label='constrained (t0>0.2)')
plt.plot([0,5],[1]*2,'--k')
plt.plot([1.5]*2,[1,1.1],'--k')
plt.xlabel('start of profile used after temperature peak (ts) [ms]')
plt.ylabel('fitted/delivered energy [au]')
plt.title('weak pulse')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_all_energy1.append(all_energy1/nominal_energy)


bw.argmax()+1
# profile at peak temperature
time_dw=[aw[bw.argmax()]]
dw=np.array([483.866,483.86,483.849,483.841,483.833,483.823,483.812,483.798,483.784,483.772,483.761,483.75,483.738,483.724,483.709,483.693,483.677,483.659,483.641,483.621,483.601,483.579,483.556,483.532,483.508,483.482,483.455,483.427,483.398,483.368,483.337,483.305,483.272,483.238,483.203,483.166,483.129,483.091,483.051,483.011,482.97,482.927,482.884,482.839,482.794,482.747,482.7,482.651,482.601,482.55,482.499,482.446,482.392,482.337,482.282,482.225,482.167,482.108,482.048,481.987,481.925,481.862,481.798,481.733,481.667,481.601,481.533,481.464,481.394,481.322,481.25,481.177,481.103,481.028,480.952,480.875,480.798,480.719,480.639,480.558,480.476,480.393,480.309,480.224,480.138,480.051,479.964,479.875,479.785,479.695,479.603,479.51,479.417,479.322,479.227,479.13,479.033,478.934,478.835,478.735,478.634,478.531,478.428,478.324,478.219,478.113,478.007,477.899,477.79,477.681,477.57,477.459,477.346,477.233,477.119,477.004,476.888,476.771,476.653,476.534,476.415,476.294,476.173,476.05,475.927,475.803,475.678,475.553,475.426,475.298,475.17,475.04,474.91,474.779,474.647,474.514,474.381,474.246,474.111,473.975,473.838,473.7,473.561,473.422,473.281,473.14,472.998,472.855,472.712,472.567,472.422,472.276,472.129,471.981,471.832,471.683,471.533,471.382,471.23,471.078,470.925,470.771,470.616,470.46,470.304,470.146,469.988,469.83,469.67,469.51,469.349,469.187,469.025,468.862,468.698,468.533,468.368,468.202,468.035,467.867,467.699,467.53,467.36,467.19,467.018,466.847,466.674,466.501,466.327,466.152,465.977,465.801,465.624,465.447,465.269,465.09,464.911,464.731,464.55,464.369,464.187,464.004,463.821,463.637,463.452,463.267,463.082,462.895,462.708,462.52,462.332,462.143,461.954,461.764,461.573,461.382,461.19,460.997,460.804,460.611,460.416,460.222,460.026,459.83,459.634,459.437,459.239,459.041,458.842,458.643,458.443,458.243,458.042,457.841,457.639,457.437,457.234,457.03,456.826,456.622,456.417,456.211,456.005,455.799,455.592,455.385,455.177,454.969,454.76,454.55,454.341,454.13,453.92,453.709,453.497,453.285,453.073,452.86,452.646,452.433,452.219,452.004,451.789,451.574,451.358,451.142,450.925,450.708,450.49,450.273,450.055,449.836,449.617,449.398,449.178,448.958,448.738,448.517,448.296,448.074,447.852,447.63,447.408,447.185,446.962,446.738,446.514,446.29,446.066,445.841,445.616,445.391,445.165,444.939,444.713,444.486,444.26,444.033,443.805,443.578,443.35,443.122,442.893,442.664,442.435,442.206,441.977,441.747,441.517,441.287,441.057,440.826,440.595,440.364,440.133,439.902,439.67,439.438,439.206,438.974,438.741,438.509,438.276,438.043,437.81,437.576,437.343,437.109,436.875,436.641,436.407,436.173,435.938,435.704,435.469,435.234,434.999,434.764,434.529,434.294,434.058,433.823,433.587,433.351,433.115,432.879,432.643,432.407,432.171,431.934,431.698,431.461,431.225,430.988,430.751,430.515,430.278,430.041,429.804,429.567,429.33,429.093,428.856,428.619,428.381,428.144,427.907,427.67,427.433,427.195,426.958,426.721,426.483,426.246,426.009,425.772,425.534,425.297,425.06,424.823,424.585,424.348,424.111,423.874,423.637,423.4,423.163,422.926,422.689,422.452,422.216,421.979,421.742,421.506,421.269,421.033,420.796,420.56,420.324,420.088,419.852,419.616,419.38,419.144,418.909,418.673,418.438,418.202,417.967,417.732,417.497,417.262,417.028,416.793,416.559,416.325,416.09,415.856,415.623,415.389,415.155,414.922,414.689,414.455,414.223,413.99,413.757,413.525,413.292,413.06,412.829,412.597,412.365,412.134,411.903,411.672,411.441,411.21,410.98,410.75,410.52,410.29,410.06,409.831,409.602,409.373,409.144,408.916,408.688,408.46,408.232,408.004,407.777,407.55,407.323,407.096,406.87,406.644,406.418,406.192,405.967,405.742,405.517,405.293,405.068,404.844,404.621,404.397,404.174,403.951,403.729,403.507,403.285,403.063,402.842,402.621,402.4,402.18,401.96,401.74,401.52,401.301,401.082,400.864,400.646,400.428,400.21,399.993,399.776,399.561,399.345,399.13,398.916,398.702,398.489,398.276,398.063,397.85,397.64,397.438,397.234,396.677,396.144,395.604,395.067,394.537,394.012,393.49,392.969,392.457,391.943,391.435,390.93,390.432,389.936,389.443,388.951,388.46,387.971,387.482,386.996,386.512,386.029,385.547,385.069,384.596,384.124,383.654,383.189,382.728,382.271,381.819,381.366,380.91,380.454,380.006,379.566,379.13,378.697,378.26,377.825,377.398,376.978,376.561,376.146,375.729,375.309,374.893,374.482,374.077,373.676,373.282,372.885,372.484,372.09,371.704,371.323,370.947,370.57,370.19,369.817,369.452,369.088,368.727,368.365,368,367.642,367.294,366.95,366.605,366.257,365.915,365.58,365.249,364.916,364.581,364.254,363.935,363.62,363.305,362.986,362.675,362.371,362.07,361.768,361.464,361.165,360.873,360.586,360.299,360.01,359.726,359.449,359.176,358.903,358.628,358.358,358.094,357.833,357.572,357.309,357.053,356.805,356.56,356.315,356.069,355.829,355.596,355.364,355.131,354.897,354.668,354.443,354.222,354.002,353.781,353.566,353.356,353.15,352.943,352.736,352.535,352.339,352.146,351.952,351.757,351.567,351.382,351.199,351.016,350.834,350.656,350.483,350.313,350.143,349.974,349.81,349.65,349.491,349.333,349.175,349.02,348.869,348.721,348.574,348.427,348.285,348.147,348.011,347.875,347.74,347.608,347.481,347.356,347.231,347.107,346.986,346.868,346.752,346.637,346.523,346.412,346.305,346.2,346.096,345.992,345.892,345.796,345.701,345.607,345.513,345.423,345.335,345.25,345.165,345.082,345.001,344.923,344.847,344.772,344.698,344.627,344.558,344.491,344.426,344.361,344.299,344.239,344.183,344.127,344.074,344.022,343.971,343.923,343.876,343.833,343.794,343.759,343.729,343.707,343.692])
np.abs(aw-(aw[bw.argmax()]+1.5*1e-3)).argmin()+1
# profile at peak +1.5ms
time_dw.append(aw[np.abs(aw-(aw[bw.argmax()]+1.5*1e-3)).argmin()])
dw1=np.array([424.774,424.774,424.774,424.774,424.772,424.77,424.767,424.764,424.76,424.755,424.749,424.743,424.736,424.729,424.721,424.712,424.703,424.693,424.683,424.672,424.66,424.648,424.635,424.622,424.608,424.594,424.579,424.563,424.547,424.53,424.512,424.494,424.476,424.457,424.437,424.416,424.395,424.374,424.352,424.329,424.306,424.282,424.257,424.232,424.207,424.18,424.154,424.126,424.098,424.07,424.041,424.011,423.981,423.95,423.918,423.886,423.854,423.821,423.787,423.753,423.718,423.683,423.647,423.61,423.573,423.535,423.497,423.458,423.419,423.379,423.338,423.297,423.255,423.213,423.171,423.127,423.083,423.039,422.994,422.948,422.902,422.856,422.808,422.76,422.712,422.663,422.614,422.564,422.514,422.462,422.411,422.359,422.306,422.253,422.199,422.145,422.09,422.034,421.978,421.922,421.865,421.808,421.75,421.691,421.632,421.572,421.512,421.451,421.39,421.328,421.266,421.203,421.14,421.076,421.012,420.947,420.882,420.816,420.749,420.683,420.615,420.547,420.479,420.41,420.34,420.27,420.2,420.129,420.058,419.986,419.913,419.84,419.767,419.693,419.618,419.544,419.468,419.392,419.316,419.239,419.162,419.084,419.006,418.927,418.848,418.768,418.688,418.608,418.526,418.445,418.363,418.28,418.197,418.114,418.03,417.946,417.861,417.776,417.69,417.604,417.517,417.43,417.343,417.255,417.166,417.078,416.988,416.899,416.809,416.718,416.627,416.536,416.444,416.351,416.259,416.166,416.072,415.978,415.884,415.789,415.694,415.598,415.502,415.406,415.309,415.212,415.114,415.016,414.918,414.819,414.719,414.62,414.52,414.419,414.318,414.217,414.116,414.014,413.911,413.809,413.706,413.602,413.498,413.394,413.289,413.185,413.079,412.974,412.868,412.761,412.654,412.547,412.44,412.332,412.224,412.115,412.007,411.897,411.788,411.678,411.568,411.457,411.346,411.235,411.123,411.012,410.899,410.787,410.674,410.561,410.447,410.334,410.22,410.105,409.99,409.875,409.76,409.645,409.529,409.412,409.296,409.179,409.062,408.945,408.827,408.709,408.591,408.472,408.353,408.234,408.115,407.995,407.875,407.755,407.635,407.514,407.393,407.272,407.15,407.029,406.906,406.784,406.662,406.539,406.416,406.293,406.169,406.046,405.921,405.797,405.673,405.548,405.423,405.298,405.173,405.047,404.921,404.796,404.669,404.543,404.416,404.289,404.162,404.035,403.908,403.78,403.652,403.524,403.396,403.267,403.139,403.01,402.881,402.752,402.622,402.493,402.363,402.233,402.103,401.973,401.842,401.712,401.581,401.45,401.319,401.188,401.056,400.925,400.793,400.661,400.529,400.397,400.264,400.132,399.999,399.867,399.734,399.601,399.468,399.334,399.201,399.068,398.934,398.8,398.666,398.532,398.398,398.264,398.13,397.995,397.861,397.726,397.591,397.457,397.322,397.187,397.051,396.916,396.781,396.645,396.51,396.374,396.239,396.103,395.967,395.831,395.695,395.559,395.423,395.287,395.151,395.014,394.878,394.742,394.605,394.469,394.332,394.195,394.059,393.922,393.785,393.648,393.511,393.375,393.238,393.101,392.964,392.827,392.689,392.552,392.415,392.278,392.141,392.004,391.866,391.729,391.592,391.455,391.317,391.18,391.043,390.905,390.768,390.631,390.493,390.356,390.219,390.082,389.944,389.807,389.67,389.532,389.395,389.258,389.121,388.983,388.846,388.709,388.572,388.435,388.298,388.161,388.024,387.887,387.75,387.613,387.476,387.339,387.203,387.066,386.929,386.793,386.656,386.519,386.383,386.247,386.11,385.974,385.838,385.701,385.565,385.429,385.293,385.157,385.022,384.886,384.75,384.614,384.479,384.343,384.208,384.073,383.937,383.802,383.667,383.532,383.397,383.262,383.128,382.993,382.859,382.724,382.59,382.456,382.322,382.188,382.054,381.92,381.786,381.652,381.519,381.386,381.252,381.119,380.986,380.853,380.721,380.588,380.455,380.323,380.191,380.058,379.926,379.795,379.663,379.531,379.4,379.268,379.137,379.006,378.875,378.744,378.613,378.483,378.352,378.222,378.092,377.962,377.832,377.702,377.573,377.443,377.314,377.185,377.056,376.927,376.799,376.67,376.542,376.414,376.286,376.158,376.03,375.902,375.775,375.648,375.521,375.394,375.267,375.139,375.012,374.699,374.385,374.074,373.764,373.454,373.145,372.837,372.531,372.225,371.921,371.618,371.316,371.015,370.716,370.417,370.12,369.825,369.531,369.239,368.948,368.659,368.371,368.084,367.799,367.516,367.233,366.953,366.673,366.395,366.118,365.843,365.57,365.298,365.029,364.76,364.492,364.226,363.962,363.699,363.439,363.179,362.921,362.664,362.409,362.156,361.905,361.656,361.408,361.161,360.916,360.673,360.431,360.192,359.954,359.717,359.482,359.248,359.016,358.787,358.559,358.332,358.106,357.882,357.661,357.442,357.224,357.007,356.792,356.579,356.368,356.159,355.95,355.744,355.539,355.337,355.136,354.936,354.738,354.542,354.348,354.155,353.964,353.774,353.586,353.401,353.217,353.034,352.853,352.674,352.497,352.321,352.147,351.974,351.803,351.634,351.467,351.301,351.137,350.975,350.815,350.656,350.498,350.342,350.188,350.036,349.885,349.735,349.587,349.441,349.297,349.155,349.014,348.874,348.736,348.601,348.466,348.333,348.201,348.072,347.944,347.817,347.692,347.568,347.446,347.326,347.207,347.09,346.974,346.86,346.748,346.637,346.527,346.419,346.313,346.208,346.104,346.002,345.901,345.803,345.705,345.61,345.515,345.422,345.331,345.241,345.152,345.065,344.979,344.895,344.813,344.731,344.651,344.573,344.496,344.421,344.347,344.274,344.202,344.133,344.065,343.998,343.932,343.868,343.805,343.744,343.684,343.625,343.567,343.512,343.457,343.404,343.353,343.302,343.253,343.206,343.16,343.115,343.072,343.031,342.99,342.952,342.915,342.879,342.845,342.812,342.782,342.752,342.725,342.699,342.675,342.654,342.634,342.616,342.601,342.588,342.577,342.568,342.561,342.558,342.557])
np.abs(aw-(aw[bw.argmax()]+3*1e-3)).argmin()+1
# profile at peak +3ms
time_dw.append(aw[np.abs(aw-(aw[bw.argmax()]+3*1e-3)).argmin()])
dw2=np.array([416.122,416.122,416.122,416.12,416.119,416.116,416.114,416.111,416.107,416.103,416.098,416.092,416.086,416.079,416.072,416.065,416.057,416.048,416.039,416.029,416.019,416.008,415.997,415.985,415.973,415.96,415.946,415.933,415.918,415.903,415.888,415.872,415.855,415.838,415.821,415.803,415.784,415.765,415.745,415.725,415.705,415.683,415.662,415.64,415.617,415.594,415.57,415.546,415.521,415.496,415.47,415.444,415.417,415.39,415.362,415.334,415.305,415.275,415.245,415.215,415.184,415.153,415.121,415.089,415.056,415.022,414.989,414.954,414.919,414.884,414.848,414.812,414.775,414.738,414.7,414.661,414.622,414.583,414.543,414.503,414.462,414.421,414.379,414.337,414.294,414.251,414.207,414.163,414.118,414.073,414.027,413.981,413.934,413.887,413.839,413.791,413.743,413.694,413.644,413.594,413.544,413.493,413.441,413.39,413.337,413.284,413.231,413.177,413.123,413.068,413.013,412.958,412.902,412.845,412.788,412.731,412.673,412.615,412.556,412.496,412.437,412.377,412.316,412.255,412.193,412.131,412.069,412.006,411.943,411.879,411.815,411.75,411.685,411.62,411.554,411.488,411.421,411.354,411.286,411.218,411.149,411.081,411.011,410.942,410.871,410.801,410.73,410.658,410.586,410.514,410.441,410.368,410.295,410.221,410.147,410.072,409.997,409.921,409.845,409.769,409.692,409.615,409.537,409.459,409.381,409.302,409.223,409.144,409.064,408.984,408.903,408.822,408.74,408.659,408.576,408.494,408.411,408.328,408.244,408.16,408.075,407.991,407.906,407.82,407.734,407.648,407.561,407.474,407.387,407.299,407.211,407.123,407.034,406.945,406.856,406.766,406.676,406.585,406.495,406.403,406.312,406.22,406.128,406.036,405.943,405.85,405.756,405.663,405.568,405.474,405.379,405.284,405.189,405.093,404.997,404.901,404.804,404.707,404.61,404.513,404.415,404.317,404.218,404.12,404.021,403.921,403.822,403.722,403.622,403.521,403.42,403.319,403.218,403.116,403.014,402.912,402.81,402.707,402.604,402.501,402.398,402.294,402.19,402.086,401.981,401.876,401.771,401.666,401.56,401.455,401.349,401.242,401.136,401.029,400.922,400.815,400.707,400.599,400.491,400.383,400.275,400.166,400.057,399.948,399.839,399.729,399.62,399.51,399.399,399.289,399.178,399.067,398.957,398.845,398.734,398.622,398.51,398.398,398.286,398.174,398.061,397.948,397.835,397.722,397.608,397.495,397.381,397.267,397.153,397.039,396.925,396.81,396.695,396.58,396.465,396.35,396.234,396.119,396.003,395.887,395.771,395.655,395.538,395.422,395.305,395.188,395.071,394.954,394.837,394.719,394.602,394.484,394.366,394.248,394.13,394.012,393.894,393.775,393.657,393.538,393.419,393.3,393.181,393.062,392.943,392.824,392.704,392.585,392.465,392.345,392.225,392.105,391.985,391.865,391.745,391.624,391.504,391.383,391.263,391.142,391.021,390.9,390.779,390.659,390.537,390.416,390.295,390.174,390.052,389.931,389.809,389.688,389.566,389.445,389.323,389.201,389.079,388.957,388.835,388.713,388.591,388.469,388.347,388.225,388.103,387.98,387.858,387.736,387.613,387.491,387.369,387.246,387.124,387.001,386.879,386.756,386.634,386.511,386.388,386.266,386.143,386.021,385.898,385.775,385.653,385.53,385.407,385.285,385.162,385.039,384.917,384.794,384.671,384.549,384.426,384.303,384.181,384.058,383.936,383.813,383.691,383.568,383.446,383.323,383.201,383.078,382.956,382.834,382.711,382.589,382.467,382.344,382.222,382.1,381.978,381.856,381.734,381.612,381.49,381.368,381.247,381.125,381.003,380.881,380.76,380.638,380.517,380.395,380.274,380.153,380.031,379.91,379.789,379.668,379.547,379.426,379.305,379.185,379.064,378.943,378.823,378.702,378.582,378.462,378.342,378.221,378.101,377.982,377.862,377.742,377.622,377.503,377.383,377.264,377.145,377.026,376.906,376.787,376.669,376.55,376.431,376.313,376.194,376.076,375.958,375.839,375.721,375.604,375.486,375.368,375.251,375.133,375.016,374.899,374.782,374.665,374.548,374.431,374.315,374.198,374.082,373.966,373.85,373.734,373.618,373.502,373.387,373.271,373.156,373.041,372.926,372.811,372.696,372.582,372.467,372.353,372.239,372.125,372.011,371.897,371.784,371.501,371.219,370.938,370.659,370.38,370.102,369.825,369.549,369.274,369,368.728,368.456,368.185,367.916,367.647,367.38,367.114,366.849,366.586,366.323,366.062,365.802,365.544,365.286,365.03,364.776,364.522,364.27,364.019,363.769,363.52,363.273,363.028,362.784,362.541,362.299,362.058,361.819,361.582,361.346,361.111,360.877,360.645,360.414,360.185,359.958,359.732,359.507,359.284,359.062,358.841,358.622,358.405,358.189,357.974,357.761,357.549,357.339,357.13,356.923,356.717,356.513,356.31,356.108,355.909,355.711,355.514,355.319,355.125,354.933,354.742,354.553,354.365,354.179,353.995,353.812,353.63,353.45,353.271,353.094,352.919,352.745,352.572,352.401,352.232,352.064,351.898,351.733,351.57,351.408,351.248,351.089,350.931,350.776,350.622,350.469,350.318,350.168,350.02,349.873,349.728,349.584,349.442,349.301,349.162,349.024,348.888,348.753,348.619,348.488,348.358,348.229,348.101,347.975,347.851,347.728,347.606,347.486,347.368,347.25,347.135,347.02,346.907,346.796,346.686,346.577,346.47,346.364,346.26,346.157,346.056,345.956,345.857,345.76,345.664,345.569,345.476,345.384,345.294,345.205,345.118,345.031,344.946,344.863,344.781,344.7,344.621,344.543,344.466,344.391,344.317,344.244,344.173,344.102,344.034,343.967,343.901,343.836,343.772,343.711,343.65,343.591,343.532,343.476,343.42,343.366,343.314,343.262,343.212,343.163,343.116,343.07,343.025,342.982,342.94,342.899,342.86,342.822,342.786,342.751,342.718,342.686,342.656,342.627,342.599,342.574,342.549,342.526,342.505,342.486,342.468,342.452,342.438,342.426,342.415,342.406,342.399,342.394,342.391,342.39])
np.abs(aw-(aw[bw.argmax()]+5*1e-3)).argmin()+1
# profile at peak +5ms
time_dw.append(aw[np.abs(aw-(aw[bw.argmax()]+5*1e-3)).argmin()])
dw3=np.array([411.311,411.311,411.31,411.309,411.308,411.305,411.303,411.3,411.296,411.292,411.287,411.282,411.277,411.271,411.264,411.257,411.249,411.241,411.233,411.224,411.214,411.204,411.194,411.183,411.172,411.16,411.147,411.134,411.121,411.107,411.093,411.078,411.063,411.047,411.031,411.014,410.997,410.979,410.961,410.942,410.923,410.904,410.884,410.863,410.842,410.82,410.798,410.776,410.753,410.73,410.706,410.681,410.656,410.631,410.605,410.579,410.552,410.525,410.497,410.469,410.441,410.412,410.382,410.352,410.322,410.291,410.259,410.227,410.195,410.162,410.129,410.095,410.061,410.026,409.991,409.955,409.92,409.883,409.846,409.809,409.771,409.732,409.694,409.654,409.615,409.575,409.534,409.493,409.452,409.409,409.367,409.324,409.281,409.237,409.193,409.149,409.103,409.058,409.012,408.966,408.919,408.872,408.824,408.776,408.727,408.678,408.629,408.579,408.529,408.478,408.427,408.375,408.323,408.271,408.218,408.164,408.111,408.057,408.002,407.947,407.892,407.836,407.779,407.723,407.666,407.608,407.55,407.492,407.433,407.374,407.315,407.255,407.194,407.134,407.072,407.011,406.949,406.887,406.824,406.761,406.697,406.633,406.569,406.504,406.439,406.373,406.307,406.241,406.174,406.107,406.04,405.972,405.904,405.835,405.766,405.697,405.627,405.557,405.486,405.415,405.344,405.273,405.201,405.128,405.055,404.982,404.909,404.835,404.761,404.686,404.611,404.536,404.461,404.385,404.308,404.232,404.155,404.077,404,403.922,403.843,403.764,403.685,403.606,403.526,403.446,403.366,403.285,403.204,403.122,403.041,402.959,402.876,402.793,402.71,402.627,402.543,402.459,402.375,402.29,402.205,402.12,402.034,401.949,401.862,401.776,401.689,401.602,401.514,401.427,401.339,401.25,401.162,401.073,400.984,400.894,400.805,400.714,400.624,400.533,400.442,400.351,400.26,400.168,400.076,399.984,399.891,399.798,399.705,399.612,399.518,399.424,399.33,399.236,399.141,399.046,398.951,398.855,398.76,398.664,398.567,398.471,398.374,398.277,398.18,398.083,397.985,397.887,397.789,397.691,397.592,397.493,397.394,397.295,397.195,397.096,396.995,396.895,396.795,396.694,396.593,396.492,396.391,396.29,396.188,396.086,395.984,395.882,395.779,395.676,395.573,395.47,395.367,395.264,395.16,395.056,394.952,394.848,394.743,394.639,394.534,394.429,394.324,394.218,394.113,394.007,393.901,393.795,393.689,393.583,393.476,393.369,393.262,393.156,393.048,392.941,392.834,392.726,392.618,392.51,392.402,392.294,392.185,392.077,391.968,391.86,391.751,391.642,391.532,391.423,391.313,391.204,391.094,390.984,390.874,390.764,390.654,390.544,390.433,390.323,390.212,390.101,389.99,389.88,389.768,389.657,389.546,389.434,389.323,389.211,389.1,388.988,388.876,388.764,388.652,388.54,388.427,388.315,388.203,388.09,387.978,387.865,387.752,387.639,387.526,387.413,387.3,387.187,387.074,386.961,386.848,386.734,386.621,386.507,386.394,386.281,386.167,386.053,385.939,385.826,385.712,385.598,385.484,385.37,385.256,385.142,385.028,384.914,384.8,384.685,384.571,384.457,384.343,384.228,384.114,384,383.885,383.771,383.657,383.542,383.428,383.313,383.199,383.084,382.97,382.855,382.741,382.626,382.512,382.397,382.283,382.168,382.054,381.939,381.825,381.71,381.596,381.481,381.367,381.252,381.138,381.024,380.909,380.795,380.68,380.566,380.452,380.338,380.223,380.109,379.995,379.881,379.767,379.652,379.538,379.424,379.31,379.196,379.082,378.969,378.855,378.741,378.627,378.513,378.4,378.286,378.173,378.059,377.946,377.832,377.719,377.606,377.492,377.379,377.266,377.153,377.04,376.927,376.814,376.701,376.589,376.476,376.364,376.251,376.139,376.026,375.914,375.802,375.69,375.578,375.466,375.354,375.242,375.13,375.019,374.907,374.796,374.685,374.573,374.462,374.351,374.24,374.129,374.019,373.908,373.797,373.687,373.576,373.466,373.356,373.246,373.136,373.026,372.916,372.807,372.697,372.588,372.478,372.369,372.26,372.151,372.043,371.934,371.825,371.717,371.608,371.5,371.392,371.284,371.176,371.068,370.961,370.853,370.746,370.639,370.532,370.425,370.318,370.211,370.105,369.998,369.733,369.469,369.205,368.943,368.681,368.42,368.16,367.901,367.644,367.387,367.131,366.876,366.622,366.369,366.117,365.866,365.616,365.367,365.12,364.873,364.628,364.384,364.141,363.899,363.658,363.418,363.18,362.943,362.707,362.472,362.238,362.005,361.774,361.545,361.316,361.088,360.862,360.637,360.413,360.191,359.97,359.75,359.532,359.314,359.098,358.884,358.671,358.459,358.248,358.039,357.831,357.625,357.42,357.216,357.014,356.812,356.613,356.414,356.217,356.022,355.828,355.635,355.443,355.253,355.065,354.878,354.692,354.508,354.325,354.143,353.963,353.784,353.607,353.431,353.257,353.084,352.912,352.741,352.573,352.405,352.24,352.075,351.912,351.75,351.59,351.431,351.274,351.118,350.963,350.81,350.658,350.508,350.359,350.211,350.065,349.921,349.778,349.636,349.495,349.356,349.219,349.083,348.948,348.815,348.683,348.552,348.423,348.295,348.169,348.044,347.92,347.798,347.677,347.558,347.44,347.324,347.208,347.094,346.982,346.871,346.761,346.652,346.545,346.44,346.335,346.232,346.131,346.031,345.932,345.834,345.738,345.643,345.549,345.457,345.366,345.277,345.188,345.101,345.016,344.932,344.849,344.767,344.687,344.608,344.53,344.453,344.378,344.304,344.232,344.161,344.091,344.022,343.954,343.888,343.824,343.76,343.698,343.637,343.577,343.519,343.462,343.406,343.351,343.298,343.246,343.196,343.147,343.098,343.052,343.006,342.962,342.92,342.878,342.838,342.8,342.762,342.726,342.691,342.658,342.626,342.596,342.567,342.539,342.513,342.488,342.465,342.443,342.423,342.404,342.386,342.37,342.356,342.344,342.332,342.323,342.315,342.308,342.304,342.301,342.3])
np.abs(aw-0*1e-3).argmin()+1
# profile at 0ms
time_dw.append(aw[np.abs(aw-0*1e-3).argmin()])
dw4=np.array([396.077,396.076,396.076,396.075,396.073,396.072,396.07,396.067,396.065,396.061,396.058,396.054,396.05,396.045,396.04,396.035,396.029,396.023,396.017,396.01,396.003,395.995,395.987,395.979,395.97,395.961,395.952,395.942,395.932,395.921,395.91,395.899,395.888,395.876,395.863,395.851,395.838,395.824,395.81,395.796,395.782,395.767,395.752,395.736,395.72,395.704,395.687,395.67,395.653,395.635,395.617,395.598,395.579,395.56,395.541,395.521,395.501,395.48,395.459,395.438,395.416,395.394,395.371,395.349,395.325,395.302,395.278,395.254,395.229,395.205,395.179,395.154,395.128,395.101,395.075,395.048,395.02,394.993,394.965,394.936,394.908,394.878,394.849,394.819,394.789,394.759,394.728,394.697,394.665,394.633,394.601,394.569,394.536,394.502,394.469,394.435,394.401,394.366,394.331,394.296,394.261,394.225,394.188,394.152,394.115,394.078,394.04,394.002,393.964,393.925,393.887,393.847,393.808,393.768,393.728,393.687,393.646,393.605,393.564,393.522,393.48,393.437,393.395,393.352,393.308,393.264,393.22,393.176,393.131,393.086,393.041,392.996,392.95,392.903,392.857,392.81,392.763,392.715,392.668,392.62,392.571,392.523,392.474,392.424,392.375,392.325,392.275,392.224,392.173,392.122,392.071,392.019,391.967,391.915,391.863,391.81,391.757,391.703,391.649,391.595,391.541,391.487,391.432,391.377,391.321,391.266,391.21,391.153,391.097,391.04,390.983,390.926,390.868,390.81,390.752,390.693,390.635,390.576,390.517,390.457,390.397,390.337,390.277,390.216,390.155,390.094,390.033,389.971,389.91,389.847,389.785,389.722,389.66,389.596,389.533,389.469,389.406,389.341,389.277,389.212,389.148,389.082,389.017,388.951,388.886,388.82,388.753,388.687,388.62,388.553,388.486,388.418,388.35,388.283,388.214,388.146,388.077,388.009,387.94,387.87,387.801,387.731,387.661,387.591,387.521,387.45,387.379,387.308,387.237,387.165,387.094,387.022,386.95,386.878,386.805,386.732,386.66,386.587,386.513,386.44,386.366,386.292,386.218,386.144,386.069,385.995,385.92,385.845,385.77,385.694,385.619,385.543,385.467,385.391,385.315,385.238,385.162,385.085,385.008,384.931,384.853,384.776,384.698,384.62,384.542,384.464,384.386,384.307,384.228,384.15,384.071,383.991,383.912,383.833,383.753,383.673,383.593,383.513,383.433,383.353,383.272,383.191,383.111,383.03,382.949,382.867,382.786,382.704,382.623,382.541,382.459,382.377,382.295,382.212,382.13,382.047,381.965,381.882,381.799,381.716,381.633,381.549,381.466,381.382,381.299,381.215,381.131,381.047,380.963,380.879,380.794,380.71,380.625,380.541,380.456,380.371,380.286,380.201,380.116,380.031,379.945,379.86,379.774,379.689,379.603,379.517,379.431,379.345,379.259,379.173,379.087,379,378.914,378.827,378.741,378.654,378.568,378.481,378.394,378.307,378.22,378.133,378.046,377.958,377.871,377.784,377.696,377.609,377.521,377.434,377.346,377.258,377.171,377.083,376.995,376.907,376.819,376.731,376.643,376.555,376.466,376.378,376.29,376.202,376.113,376.025,375.936,375.848,375.759,375.671,375.582,375.494,375.405,375.316,375.228,375.139,375.05,374.961,374.873,374.784,374.695,374.606,374.517,374.428,374.339,374.25,374.161,374.072,373.983,373.894,373.805,373.716,373.627,373.538,373.449,373.36,373.271,373.182,373.093,373.004,372.914,372.825,372.736,372.647,372.558,372.469,372.38,372.291,372.202,372.113,372.024,371.935,371.846,371.757,371.668,371.579,371.49,371.401,371.312,371.223,371.134,371.046,370.957,370.868,370.779,370.691,370.602,370.513,370.425,370.336,370.247,370.159,370.07,369.982,369.893,369.805,369.717,369.628,369.54,369.452,369.364,369.275,369.187,369.099,369.011,368.923,368.835,368.747,368.66,368.572,368.484,368.396,368.309,368.221,368.134,368.046,367.959,367.871,367.784,367.697,367.61,367.523,367.436,367.349,367.262,367.175,367.088,367.002,366.915,366.828,366.742,366.655,366.569,366.483,366.397,366.31,366.224,366.138,366.053,365.967,365.881,365.795,365.71,365.624,365.539,365.453,365.368,365.283,365.198,365.113,365.028,364.943,364.859,364.774,364.689,364.605,364.521,364.436,364.352,364.268,364.184,363.974,363.765,363.557,363.349,363.142,362.936,362.73,362.525,362.321,362.117,361.915,361.712,361.511,361.31,361.11,360.911,360.713,360.515,360.318,360.122,359.927,359.733,359.539,359.346,359.155,358.964,358.773,358.584,358.396,358.208,358.022,357.836,357.651,357.467,357.284,357.102,356.921,356.741,356.562,356.383,356.206,356.03,355.855,355.68,355.507,355.335,355.163,354.993,354.823,354.655,354.488,354.321,354.156,353.992,353.829,353.667,353.506,353.345,353.186,353.029,352.872,352.716,352.561,352.407,352.255,352.103,351.953,351.804,351.655,351.508,351.362,351.217,351.073,350.931,350.789,350.648,350.509,350.371,350.233,350.097,349.962,349.828,349.695,349.564,349.433,349.304,349.176,349.048,348.922,348.798,348.674,348.551,348.43,348.309,348.19,348.072,347.955,347.839,347.724,347.61,347.498,347.387,347.276,347.167,347.059,346.952,346.847,346.742,346.639,346.536,346.435,346.335,346.236,346.138,346.042,345.946,345.852,345.758,345.666,345.575,345.485,345.396,345.309,345.222,345.137,345.052,344.969,344.887,344.806,344.726,344.647,344.57,344.493,344.418,344.344,344.27,344.198,344.127,344.057,343.989,343.921,343.854,343.789,343.725,343.661,343.599,343.538,343.478,343.419,343.361,343.305,343.249,343.195,343.141,343.089,343.038,342.988,342.939,342.891,342.844,342.798,342.753,342.71,342.667,342.626,342.586,342.547,342.508,342.471,342.436,342.401,342.367,342.334,342.303,342.272,342.243,342.215,342.188,342.162,342.137,342.113,342.09,342.069,342.048,342.029,342.011,341.994,341.978,341.963,341.95,341.937,341.926,341.916,341.908,341.9,341.894,341.889,341.885,341.883,341.882])
np.abs(aw-0.33*1e-3).argmin()+1
# profile at 0.33ms
time_dw.append(aw[np.abs(aw-0.33*1e-3).argmin()])
dw5=np.array([469.613,469.595,469.569,469.553,469.541,469.527,469.51,469.49,469.469,469.455,469.448,469.441,469.431,469.42,469.407,469.394,469.379,469.364,469.348,469.33,469.313,469.294,469.274,469.252,469.23,469.207,469.183,469.158,469.133,469.106,469.078,469.049,469.02,468.989,468.958,468.926,468.892,468.858,468.823,468.787,468.75,468.712,468.674,468.634,468.593,468.552,468.509,468.466,468.421,468.376,468.33,468.282,468.234,468.185,468.136,468.085,468.033,467.98,467.927,467.872,467.817,467.761,467.704,467.646,467.587,467.527,467.466,467.404,467.342,467.278,467.214,467.149,467.083,467.016,466.948,466.879,466.809,466.738,466.667,466.595,466.521,466.447,466.372,466.297,466.22,466.142,466.064,465.984,465.904,465.823,465.741,465.658,465.575,465.49,465.405,465.318,465.231,465.143,465.055,464.965,464.874,464.783,464.691,464.598,464.504,464.409,464.314,464.218,464.12,464.022,463.923,463.824,463.723,463.622,463.52,463.417,463.313,463.209,463.103,462.997,462.89,462.783,462.674,462.565,462.454,462.343,462.232,462.119,462.006,461.892,461.777,461.661,461.545,461.428,461.31,461.191,461.071,460.951,460.83,460.708,460.586,460.462,460.338,460.213,460.088,459.961,459.834,459.707,459.578,459.449,459.319,459.188,459.057,458.925,458.792,458.658,458.524,458.389,458.253,458.117,457.979,457.842,457.703,457.564,457.424,457.283,457.142,457,456.857,456.714,456.57,456.425,456.28,456.134,455.987,455.84,455.692,455.543,455.394,455.244,455.093,454.942,454.79,454.638,454.484,454.331,454.176,454.021,453.866,453.709,453.552,453.395,453.237,453.078,452.919,452.759,452.598,452.437,452.275,452.113,451.95,451.787,451.623,451.458,451.293,451.127,450.961,450.794,450.627,450.459,450.29,450.121,449.951,449.781,449.61,449.439,449.267,449.095,448.922,448.749,448.575,448.401,448.226,448.05,447.874,447.698,447.521,447.344,447.166,446.987,446.808,446.629,446.449,446.269,446.088,445.907,445.725,445.543,445.36,445.177,444.994,444.81,444.625,444.44,444.255,444.069,443.883,443.697,443.509,443.322,443.134,442.946,442.757,442.568,442.379,442.189,441.998,441.808,441.617,441.425,441.233,441.041,440.848,440.655,440.462,440.268,440.074,439.88,439.685,439.49,439.294,439.099,438.902,438.706,438.509,438.312,438.114,437.917,437.718,437.52,437.321,437.122,436.923,436.723,436.523,436.323,436.122,435.921,435.72,435.519,435.317,435.115,434.913,434.71,434.507,434.304,434.101,433.898,433.694,433.49,433.285,433.081,432.876,432.671,432.466,432.26,432.055,431.849,431.642,431.436,431.23,431.023,430.816,430.609,430.401,430.194,429.986,429.778,429.57,429.362,429.153,428.945,428.736,428.527,428.318,428.108,427.899,427.689,427.48,427.27,427.06,426.849,426.639,426.429,426.218,426.007,425.797,425.586,425.375,425.164,424.952,424.741,424.529,424.318,424.106,423.894,423.682,423.471,423.259,423.046,422.834,422.622,422.41,422.197,421.985,421.772,421.56,421.347,421.134,420.922,420.709,420.496,420.283,420.07,419.858,419.645,419.432,419.219,419.006,418.793,418.58,418.366,418.153,417.94,417.727,417.514,417.301,417.088,416.875,416.662,416.449,416.236,416.023,415.81,415.597,415.384,415.172,414.959,414.746,414.533,414.321,414.108,413.895,413.683,413.47,413.258,413.046,412.833,412.621,412.409,412.197,411.985,411.773,411.561,411.349,411.138,410.926,410.715,410.504,410.292,410.081,409.87,409.659,409.448,409.238,409.027,408.816,408.606,408.396,408.186,407.976,407.766,407.556,407.347,407.137,406.928,406.719,406.51,406.301,406.092,405.884,405.675,405.467,405.259,405.051,404.843,404.636,404.428,404.221,404.014,403.807,403.6,403.394,403.188,402.982,402.776,402.57,402.364,402.159,401.954,401.749,401.544,401.339,401.135,400.931,400.727,400.523,400.32,400.117,399.914,399.711,399.508,399.306,399.104,398.902,398.7,398.498,398.297,398.096,397.896,397.695,397.495,397.295,397.096,396.896,396.697,396.499,396.3,396.102,395.904,395.706,395.508,395.311,395.114,394.918,394.721,394.525,394.33,394.134,393.94,393.747,393.554,393.361,393.169,392.977,392.785,392.593,392.398,392.211,392.047,391.876,391.336,390.86,390.36,389.865,389.381,388.907,388.436,387.965,387.512,387.051,386.595,386.143,385.696,385.252,384.81,384.369,383.926,383.486,383.046,382.607,382.171,381.734,381.298,380.867,380.439,380.011,379.583,379.161,378.744,378.333,377.927,377.519,377.101,376.682,376.275,375.879,375.489,375.099,374.7,374.302,373.917,373.542,373.172,372.803,372.426,372.041,371.66,371.285,370.917,370.557,370.205,369.847,369.47,369.105,368.76,368.421,368.089,367.749,367.396,367.055,366.729,366.404,366.083,365.755,365.414,365.085,364.775,364.47,364.16,363.836,363.521,363.222,362.927,362.626,362.313,362.011,361.727,361.448,361.164,360.867,360.582,360.311,360.044,359.772,359.488,359.214,358.954,358.697,358.438,358.169,357.908,357.66,357.417,357.17,356.914,356.665,356.427,356.194,355.957,355.711,355.475,355.253,355.036,354.814,354.586,354.369,354.161,353.955,353.744,353.526,353.314,353.111,352.913,352.712,352.506,352.308,352.121,351.937,351.749,351.557,351.374,351.199,351.027,350.85,350.67,350.495,350.328,350.164,349.998,349.827,349.664,349.509,349.358,349.204,349.047,348.897,348.755,348.613,348.47,348.322,348.18,348.044,347.912,347.778,347.641,347.511,347.387,347.266,347.143,347.018,346.899,346.786,346.674,346.561,346.446,346.335,346.23,346.127,346.023,345.917,345.815,345.72,345.627,345.532,345.437,345.346,345.261,345.177,345.093,345.007,344.924,344.847,344.771,344.695,344.619,344.547,344.478,344.411,344.344,344.276,344.212,344.151,344.092,344.035,343.978,343.921,343.869,343.82,343.772,343.725,343.68,343.636,343.592,343.55,343.511,343.476,343.444,343.415,343.393,343.37])
np.abs(aw-0.23*1e-3).argmin()+1
# profile at 0.23ms
time_dw.append(aw[np.abs(aw-0.23*1e-3).argmin()])
dw6=np.array([441.256,441.238,441.213,441.198,441.188,441.176,441.161,441.144,441.125,441.114,441.11,441.105,441.099,441.091,441.081,441.071,441.06,441.048,441.037,441.023,441.01,440.996,440.98,440.964,440.947,440.93,440.911,440.892,440.873,440.852,440.831,440.809,440.786,440.763,440.739,440.714,440.689,440.663,440.636,440.609,440.58,440.551,440.522,440.491,440.46,440.428,440.396,440.363,440.329,440.294,440.259,440.222,440.186,440.148,440.11,440.071,440.032,439.991,439.95,439.909,439.866,439.823,439.78,439.735,439.69,439.644,439.598,439.551,439.503,439.454,439.405,439.355,439.304,439.253,439.201,439.148,439.095,439.041,438.986,438.931,438.875,438.818,438.761,438.703,438.644,438.585,438.524,438.464,438.402,438.34,438.277,438.214,438.15,438.085,438.02,437.954,437.887,437.82,437.752,437.683,437.614,437.544,437.473,437.402,437.33,437.258,437.185,437.111,437.036,436.961,436.886,436.809,436.732,436.655,436.577,436.498,436.418,436.338,436.258,436.176,436.094,436.012,435.929,435.845,435.76,435.675,435.59,435.504,435.417,435.329,435.241,435.153,435.063,434.974,434.883,434.792,434.701,434.608,434.516,434.422,434.328,434.234,434.139,434.043,433.947,433.85,433.753,433.655,433.556,433.457,433.358,433.257,433.157,433.055,432.953,432.851,432.748,432.645,432.54,432.436,432.331,432.225,432.119,432.012,431.905,431.797,431.688,431.58,431.47,431.36,431.25,431.139,431.027,430.915,430.803,430.69,430.576,430.462,430.348,430.232,430.117,430.001,429.884,429.767,429.65,429.532,429.413,429.294,429.175,429.055,428.934,428.814,428.692,428.57,428.448,428.325,428.202,428.078,427.954,427.83,427.705,427.579,427.453,427.327,427.2,427.073,426.945,426.817,426.688,426.559,426.43,426.3,426.17,426.039,425.908,425.776,425.644,425.512,425.379,425.246,425.112,424.978,424.844,424.709,424.574,424.438,424.302,424.166,424.029,423.892,423.755,423.617,423.479,423.34,423.201,423.062,422.922,422.782,422.641,422.501,422.36,422.218,422.076,421.934,421.791,421.649,421.505,421.362,421.218,421.074,420.929,420.784,420.639,420.494,420.348,420.202,420.055,419.909,419.762,419.614,419.467,419.319,419.17,419.022,418.873,418.724,418.574,418.425,418.275,418.125,417.974,417.823,417.672,417.521,417.369,417.217,417.065,416.913,416.76,416.607,416.454,416.301,416.147,415.993,415.839,415.685,415.53,415.376,415.22,415.065,414.91,414.754,414.598,414.442,414.286,414.129,413.972,413.815,413.658,413.501,413.343,413.186,413.028,412.869,412.711,412.553,412.394,412.235,412.076,411.917,411.757,411.598,411.438,411.278,411.118,410.958,410.798,410.637,410.477,410.316,410.155,409.994,409.832,409.671,409.51,409.348,409.186,409.024,408.862,408.7,408.538,408.376,408.213,408.05,407.888,407.725,407.562,407.399,407.236,407.073,406.909,406.746,406.582,406.419,406.255,406.091,405.928,405.764,405.6,405.436,405.272,405.107,404.943,404.779,404.614,404.45,404.286,404.121,403.956,403.792,403.627,403.462,403.298,403.133,402.968,402.803,402.638,402.473,402.308,402.143,401.978,401.813,401.648,401.483,401.318,401.153,400.988,400.823,400.658,400.493,400.328,400.163,399.998,399.832,399.667,399.502,399.337,399.172,399.007,398.842,398.677,398.512,398.348,398.183,398.018,397.853,397.688,397.524,397.359,397.194,397.03,396.865,396.701,396.536,396.372,396.208,396.043,395.879,395.715,395.551,395.387,395.223,395.059,394.895,394.732,394.568,394.404,394.241,394.077,393.914,393.751,393.588,393.425,393.262,393.099,392.936,392.773,392.611,392.448,392.286,392.124,391.962,391.8,391.638,391.476,391.314,391.153,390.991,390.83,390.669,390.508,390.347,390.186,390.025,389.865,389.704,389.544,389.384,389.224,389.064,388.904,388.745,388.585,388.426,388.267,388.108,387.949,387.791,387.632,387.474,387.316,387.158,387,386.842,386.684,386.527,386.37,386.213,386.056,385.899,385.743,385.587,385.431,385.275,385.119,384.964,384.808,384.653,384.498,384.344,384.189,384.035,383.881,383.727,383.573,383.419,383.266,383.113,382.96,382.808,382.657,382.506,382.355,382.205,382.055,381.904,381.754,381.599,381.452,381.33,381.199,380.765,380.394,380.001,379.61,379.23,378.859,378.49,378.121,377.769,377.409,377.052,376.697,376.348,375.999,375.652,375.306,374.958,374.613,374.267,373.922,373.579,373.235,372.892,372.553,372.216,371.878,371.541,371.207,370.879,370.555,370.235,369.913,369.582,369.25,368.928,368.616,368.309,368.001,367.685,367.369,367.065,366.77,366.479,366.188,365.89,365.584,365.281,364.984,364.693,364.407,364.13,363.845,363.543,363.252,362.979,362.712,362.45,362.181,361.897,361.626,361.368,361.111,360.857,360.597,360.323,360.06,359.815,359.574,359.327,359.067,358.815,358.578,358.344,358.105,357.853,357.611,357.385,357.165,356.938,356.699,356.471,356.256,356.044,355.827,355.599,355.379,355.171,354.968,354.761,354.543,354.334,354.137,353.943,353.746,353.539,353.338,353.149,352.963,352.773,352.574,352.384,352.207,352.034,351.857,351.673,351.498,351.333,351.168,350.998,350.823,350.652,350.489,350.331,350.17,350.003,349.844,349.694,349.547,349.396,349.241,349.093,348.954,348.816,348.675,348.529,348.388,348.254,348.123,347.99,347.852,347.72,347.597,347.476,347.353,347.226,347.106,346.992,346.879,346.764,346.645,346.531,346.423,346.317,346.21,346.1,345.995,345.897,345.801,345.702,345.602,345.507,345.417,345.329,345.239,345.147,345.059,344.975,344.894,344.811,344.727,344.646,344.571,344.498,344.424,344.348,344.276,344.21,344.145,344.079,344.011,343.947,343.887,343.829,343.77,343.711,343.655,343.602,343.551,343.5,343.448,343.399,343.353,343.309,343.267,343.224,343.181,343.143,343.107,343.073,343.039,343.006,342.975,342.944,342.914,342.886,342.862,342.84,342.82,342.804,342.783])
np.abs(aw-0.14*1e-3).argmin()+1
# profile at 0.14ms
time_dw.append(aw[np.abs(aw-0.14*1e-3).argmin()])
dw7=np.array([416.149,416.138,416.122,416.113,416.107,416.099,416.09,416.079,416.066,416.059,416.056,416.053,416.048,416.042,416.035,416.028,416.02,416.011,416.003,415.993,415.983,415.973,415.962,415.95,415.937,415.925,415.911,415.897,415.883,415.868,415.853,415.837,415.82,415.803,415.786,415.768,415.749,415.73,415.711,415.691,415.67,415.649,415.627,415.605,415.583,415.559,415.536,415.512,415.487,415.462,415.436,415.409,415.383,415.355,415.328,415.299,415.271,415.241,415.211,415.181,415.15,415.119,415.087,415.054,415.021,414.988,414.954,414.92,414.885,414.849,414.814,414.777,414.74,414.703,414.665,414.627,414.588,414.548,414.508,414.468,414.427,414.386,414.344,414.302,414.259,414.215,414.172,414.127,414.083,414.037,413.992,413.945,413.899,413.851,413.804,413.756,413.707,413.658,413.608,413.558,413.508,413.457,413.405,413.353,413.301,413.248,413.194,413.141,413.086,413.032,412.976,412.921,412.865,412.808,412.751,412.693,412.635,412.577,412.518,412.459,412.399,412.339,412.278,412.217,412.155,412.093,412.031,411.968,411.904,411.84,411.776,411.711,411.646,411.581,411.515,411.448,411.381,411.314,411.246,411.178,411.11,411.041,410.971,410.901,410.831,410.76,410.689,410.618,410.546,410.473,410.4,410.327,410.254,410.179,410.105,410.03,409.955,409.879,409.803,409.727,409.65,409.573,409.495,409.417,409.338,409.26,409.18,409.101,409.021,408.94,408.86,408.778,408.697,408.615,408.533,408.45,408.367,408.283,408.2,408.115,408.031,407.946,407.861,407.775,407.689,407.603,407.516,407.429,407.341,407.254,407.166,407.077,406.988,406.899,406.809,406.72,406.629,406.539,406.448,406.357,406.265,406.173,406.081,405.988,405.895,405.802,405.708,405.615,405.52,405.426,405.331,405.236,405.14,405.044,404.948,404.852,404.755,404.658,404.561,404.463,404.365,404.267,404.168,404.069,403.97,403.871,403.771,403.671,403.571,403.47,403.369,403.268,403.167,403.065,402.963,402.861,402.758,402.655,402.552,402.449,402.345,402.241,402.137,402.033,401.928,401.823,401.718,401.613,401.507,401.401,401.295,401.188,401.082,400.975,400.868,400.76,400.652,400.545,400.436,400.328,400.22,400.111,400.002,399.893,399.783,399.673,399.564,399.453,399.343,399.232,399.122,399.011,398.9,398.788,398.677,398.565,398.453,398.341,398.228,398.116,398.003,397.89,397.777,397.664,397.55,397.436,397.322,397.208,397.094,396.98,396.865,396.75,396.635,396.52,396.405,396.29,396.174,396.058,395.943,395.826,395.71,395.594,395.477,395.361,395.244,395.127,395.01,394.893,394.775,394.658,394.54,394.422,394.304,394.186,394.068,393.95,393.831,393.713,393.594,393.475,393.356,393.237,393.118,392.999,392.879,392.76,392.64,392.521,392.401,392.281,392.161,392.041,391.921,391.8,391.68,391.56,391.439,391.318,391.198,391.077,390.956,390.835,390.714,390.593,390.472,390.35,390.229,390.108,389.986,389.865,389.743,389.621,389.5,389.378,389.256,389.134,389.012,388.89,388.768,388.646,388.524,388.402,388.279,388.157,388.035,387.912,387.79,387.668,387.545,387.423,387.3,387.178,387.055,386.932,386.81,386.687,386.565,386.442,386.319,386.197,386.074,385.951,385.828,385.706,385.583,385.46,385.337,385.215,385.092,384.969,384.846,384.724,384.601,384.478,384.356,384.233,384.11,383.988,383.865,383.742,383.62,383.497,383.375,383.252,383.129,383.007,382.885,382.762,382.64,382.517,382.395,382.273,382.151,382.028,381.906,381.784,381.662,381.54,381.418,381.296,381.174,381.052,380.931,380.809,380.687,380.566,380.444,380.323,380.201,380.08,379.959,379.837,379.716,379.595,379.474,379.353,379.232,379.112,378.991,378.87,378.75,378.629,378.509,378.388,378.268,378.148,378.028,377.908,377.788,377.668,377.549,377.429,377.31,377.19,377.071,376.952,376.833,376.714,376.595,376.476,376.357,376.239,376.12,376.002,375.884,375.765,375.647,375.529,375.412,375.294,375.176,375.059,374.942,374.824,374.707,374.591,374.474,374.357,374.24,374.124,374.008,373.892,373.776,373.66,373.544,373.428,373.313,373.197,373.082,372.967,372.853,372.739,372.625,372.512,372.398,372.284,372.17,372.054,371.942,371.846,371.745,371.425,371.145,370.851,370.56,370.274,369.995,369.717,369.438,369.171,368.899,368.628,368.359,368.092,367.827,367.562,367.299,367.034,366.771,366.509,366.247,365.986,365.725,365.465,365.207,364.951,364.694,364.438,364.184,363.933,363.685,363.44,363.194,362.943,362.691,362.446,362.207,361.971,361.735,361.494,361.253,361.02,360.792,360.567,360.343,360.114,359.882,359.651,359.423,359.2,358.98,358.765,358.546,358.317,358.094,357.883,357.676,357.472,357.264,357.048,356.839,356.638,356.439,356.241,356.041,355.832,355.63,355.439,355.25,355.059,354.859,354.665,354.48,354.298,354.113,353.92,353.733,353.557,353.384,353.207,353.023,352.846,352.678,352.512,352.342,352.167,351.996,351.834,351.674,351.513,351.345,351.182,351.028,350.875,350.721,350.561,350.406,350.257,350.111,349.963,349.81,349.662,349.523,349.386,349.247,349.104,348.967,348.836,348.706,348.573,348.437,348.304,348.177,348.052,347.926,347.797,347.672,347.554,347.438,347.32,347.2,347.084,346.974,346.865,346.754,346.64,346.531,346.425,346.322,346.218,346.111,346.009,345.911,345.816,345.719,345.621,345.527,345.437,345.348,345.258,345.166,345.077,344.993,344.91,344.826,344.742,344.66,344.583,344.508,344.431,344.354,344.28,344.21,344.141,344.072,344.001,343.933,343.869,343.806,343.742,343.678,343.617,343.559,343.503,343.446,343.389,343.335,343.284,343.234,343.184,343.134,343.086,343.041,342.997,342.953,342.91,342.868,342.83,342.792,342.755,342.718,342.683,342.65,342.618,342.588,342.559,342.529,342.503,342.479,342.455,342.433,342.412,342.392,342.372,342.353,342.337,342.322,342.31,342.298,342.289,342.277])
np.abs(aw-0.6*1e-3).argmin()+1
# profile at 0.6ms
time_dw.append(aw[np.abs(aw-0.6*1e-3).argmin()])
dw8=np.array([472.478,472.482,472.487,472.487,472.484,472.481,472.477,472.473,472.469,472.46,472.449,472.437,472.425,472.412,472.398,472.383,472.368,472.352,472.334,472.316,472.297,472.277,472.256,472.234,472.212,472.188,472.163,472.137,472.111,472.083,472.055,472.025,471.995,471.964,471.931,471.898,471.864,471.829,471.793,471.756,471.718,471.679,471.639,471.598,471.556,471.513,471.47,471.425,471.38,471.333,471.286,471.237,471.188,471.138,471.087,471.035,470.982,470.928,470.873,470.817,470.76,470.703,470.644,470.584,470.524,470.462,470.4,470.337,470.273,470.208,470.142,470.075,470.007,469.938,469.868,469.798,469.726,469.654,469.581,469.507,469.432,469.356,469.279,469.201,469.122,469.043,468.962,468.881,468.799,468.716,468.632,468.547,468.461,468.374,468.287,468.198,468.109,468.019,467.928,467.836,467.743,467.65,467.555,467.46,467.364,467.266,467.169,467.07,466.97,466.87,466.768,466.666,466.563,466.46,466.355,466.249,466.143,466.036,465.928,465.819,465.709,465.599,465.488,465.376,465.263,465.149,465.034,464.919,464.803,464.686,464.568,464.45,464.33,464.21,464.089,463.968,463.845,463.722,463.598,463.473,463.347,463.221,463.094,462.966,462.837,462.708,462.578,462.447,462.315,462.182,462.049,461.915,461.781,461.645,461.509,461.372,461.234,461.096,460.957,460.817,460.677,460.535,460.393,460.251,460.107,459.963,459.818,459.673,459.527,459.38,459.232,459.084,458.935,458.785,458.635,458.484,458.332,458.18,458.027,457.873,457.719,457.564,457.408,457.252,457.095,456.938,456.779,456.621,456.461,456.301,456.14,455.979,455.817,455.654,455.491,455.327,455.163,454.997,454.832,454.665,454.499,454.331,454.163,453.994,453.825,453.655,453.485,453.314,453.142,452.97,452.798,452.624,452.451,452.276,452.101,451.926,451.75,451.573,451.396,451.219,451.041,450.862,450.683,450.503,450.323,450.142,449.961,449.779,449.597,449.414,449.231,449.047,448.863,448.678,448.493,448.307,448.121,447.934,447.747,447.56,447.372,447.183,446.994,446.805,446.615,446.425,446.234,446.043,445.851,445.659,445.467,445.274,445.081,444.887,444.693,444.498,444.303,444.108,443.912,443.716,443.52,443.323,443.125,442.928,442.73,442.531,442.333,442.133,441.934,441.734,441.534,441.333,441.132,440.931,440.729,440.527,440.325,440.123,439.92,439.716,439.513,439.309,439.105,438.9,438.695,438.49,438.285,438.079,437.873,437.667,437.46,437.253,437.046,436.839,436.631,436.423,436.215,436.006,435.798,435.589,435.379,435.17,434.96,434.75,434.54,434.33,434.119,433.908,433.697,433.486,433.274,433.062,432.85,432.638,432.426,432.213,432.001,431.788,431.575,431.361,431.148,430.934,430.72,430.507,430.292,430.078,429.864,429.649,429.434,429.219,429.004,428.789,428.574,428.358,428.143,427.927,427.711,427.495,427.279,427.063,426.846,426.63,426.414,426.197,425.98,425.763,425.546,425.329,425.112,424.895,424.678,424.461,424.243,424.026,423.808,423.591,423.373,423.156,422.938,422.72,422.502,422.284,422.066,421.849,421.631,421.413,421.195,420.977,420.758,420.54,420.322,420.104,419.886,419.668,419.45,419.232,419.014,418.796,418.578,418.359,418.141,417.923,417.705,417.488,417.27,417.052,416.834,416.616,416.398,416.18,415.963,415.745,415.528,415.31,415.093,414.875,414.658,414.441,414.223,414.006,413.789,413.572,413.355,413.139,412.922,412.705,412.489,412.272,412.056,411.84,411.624,411.408,411.192,410.976,410.761,410.545,410.33,410.114,409.899,409.684,409.469,409.255,409.04,408.826,408.611,408.397,408.183,407.969,407.755,407.542,407.329,407.115,406.902,406.689,406.477,406.264,406.052,405.839,405.627,405.416,405.204,404.992,404.781,404.57,404.359,404.148,403.938,403.728,403.518,403.308,403.098,402.888,402.679,402.47,402.261,402.053,401.844,401.636,401.428,401.221,401.013,400.806,400.599,400.392,400.186,399.98,399.774,399.568,399.362,399.157,398.952,398.748,398.543,398.339,398.135,397.932,397.729,397.526,397.323,397.121,396.918,396.716,396.515,396.314,396.113,395.912,395.712,395.512,395.312,395.113,394.914,394.715,394.516,394.318,394.12,393.923,393.726,393.532,393.335,393.132,392.933,392.453,391.96,391.476,390.993,390.511,390.028,389.547,389.069,388.589,388.114,387.643,387.176,386.712,386.251,385.793,385.336,384.882,384.428,383.977,383.528,383.081,382.636,382.193,381.753,381.316,380.882,380.452,380.023,379.597,379.173,378.752,378.332,377.917,377.504,377.093,376.683,376.276,375.873,375.474,375.077,374.681,374.287,373.894,373.505,373.119,372.737,372.357,371.981,371.606,371.234,370.863,370.496,370.137,369.779,369.419,369.06,368.705,368.354,368.01,367.668,367.324,366.983,366.644,366.309,365.981,365.654,365.326,365,364.679,364.365,364.052,363.738,363.425,363.117,362.816,362.517,362.216,361.918,361.624,361.336,361.05,360.762,360.477,360.196,359.921,359.647,359.373,359.101,358.833,358.572,358.312,358.051,357.793,357.539,357.29,357.042,356.795,356.549,356.307,356.071,355.836,355.602,355.369,355.14,354.916,354.694,354.472,354.252,354.036,353.824,353.614,353.404,353.197,352.992,352.793,352.595,352.397,352.201,352.009,351.821,351.635,351.449,351.266,351.085,350.909,350.734,350.56,350.388,350.219,350.054,349.89,349.727,349.566,349.409,349.255,349.102,348.951,348.801,348.654,348.51,348.369,348.228,348.089,347.952,347.82,347.689,347.558,347.43,347.304,347.181,347.06,346.94,346.821,346.705,346.593,346.481,346.371,346.263,346.157,346.054,345.952,345.852,345.753,345.657,345.564,345.472,345.381,345.292,345.205,345.12,345.037,344.956,344.876,344.798,344.723,344.65,344.577,344.506,344.438,344.371,344.307,344.243,344.181,344.121,344.063,344.008,343.954,343.901,343.851,343.802,343.755,343.711,343.669,343.631,343.595,343.563,343.535,343.513,343.497,343.494])
np.abs(aw-1*1e-3).argmin()+1
# profile at 1ms
time_dw.append(aw[np.abs(aw-1*1e-3).argmin()])
dw9=np.array([442.33,442.333,442.336,442.337,442.336,442.335,442.333,442.331,442.328,442.323,442.315,442.307,442.298,442.289,442.279,442.268,442.257,442.245,442.232,442.218,442.204,442.188,442.173,442.156,442.139,442.121,442.102,442.083,442.063,442.042,442.021,441.998,441.975,441.952,441.927,441.902,441.876,441.85,441.822,441.794,441.766,441.736,441.706,441.675,441.643,441.611,441.578,441.544,441.51,441.475,441.439,441.403,441.365,441.327,441.289,441.249,441.209,441.168,441.127,441.085,441.042,440.998,440.954,440.909,440.863,440.816,440.769,440.721,440.673,440.624,440.574,440.523,440.472,440.42,440.367,440.314,440.26,440.205,440.15,440.093,440.037,439.979,439.921,439.862,439.803,439.742,439.682,439.62,439.558,439.495,439.431,439.367,439.302,439.237,439.17,439.104,439.036,438.968,438.899,438.829,438.759,438.688,438.617,438.545,438.472,438.398,438.324,438.25,438.174,438.098,438.022,437.944,437.866,437.788,437.708,437.629,437.548,437.467,437.385,437.303,437.22,437.136,437.052,436.967,436.882,436.796,436.709,436.622,436.534,436.445,436.356,436.266,436.176,436.085,435.993,435.901,435.808,435.715,435.621,435.527,435.431,435.336,435.239,435.142,435.045,434.947,434.848,434.749,434.649,434.549,434.448,434.347,434.245,434.142,434.039,433.935,433.831,433.726,433.621,433.515,433.408,433.301,433.194,433.085,432.977,432.867,432.758,432.647,432.537,432.425,432.313,432.201,432.088,431.975,431.861,431.746,431.631,431.516,431.4,431.283,431.166,431.049,430.931,430.812,430.693,430.574,430.454,430.333,430.212,430.091,429.969,429.846,429.724,429.6,429.476,429.352,429.227,429.102,428.976,428.85,428.724,428.596,428.469,428.341,428.212,428.084,427.954,427.825,427.694,427.564,427.433,427.301,427.169,427.037,426.904,426.771,426.637,426.503,426.369,426.234,426.099,425.963,425.827,425.69,425.554,425.416,425.279,425.141,425.002,424.863,424.724,424.585,424.445,424.304,424.164,424.022,423.881,423.739,423.597,423.454,423.312,423.168,423.025,422.881,422.736,422.592,422.447,422.302,422.156,422.01,421.864,421.717,421.57,421.423,421.275,421.127,420.979,420.83,420.681,420.532,420.383,420.233,420.083,419.932,419.782,419.631,419.48,419.328,419.176,419.024,418.872,418.719,418.566,418.413,418.259,418.106,417.952,417.797,417.643,417.488,417.333,417.178,417.022,416.867,416.711,416.554,416.398,416.241,416.084,415.927,415.77,415.612,415.454,415.296,415.138,414.98,414.821,414.662,414.503,414.344,414.184,414.024,413.865,413.705,413.544,413.384,413.223,413.062,412.901,412.74,412.579,412.417,412.256,412.094,411.932,411.77,411.608,411.445,411.282,411.12,410.957,410.794,410.631,410.467,410.304,410.14,409.976,409.813,409.649,409.485,409.32,409.156,408.992,408.827,408.662,408.498,408.333,408.168,408.003,407.837,407.672,407.507,407.341,407.176,407.01,406.844,406.679,406.513,406.347,406.181,406.015,405.848,405.682,405.516,405.35,405.183,405.017,404.85,404.684,404.517,404.35,404.184,404.017,403.85,403.683,403.517,403.35,403.183,403.016,402.849,402.682,402.515,402.348,402.181,402.014,401.847,401.68,401.513,401.346,401.179,401.012,400.845,400.678,400.51,400.343,400.176,400.009,399.842,399.676,399.509,399.342,399.175,399.008,398.841,398.674,398.508,398.341,398.174,398.008,397.841,397.674,397.508,397.342,397.175,397.009,396.843,396.676,396.51,396.344,396.178,396.012,395.846,395.681,395.515,395.349,395.184,395.018,394.853,394.687,394.522,394.357,394.192,394.027,393.862,393.697,393.533,393.368,393.204,393.039,392.875,392.711,392.547,392.383,392.219,392.056,391.892,391.729,391.565,391.402,391.239,391.076,390.913,390.751,390.588,390.426,390.264,390.101,389.939,389.778,389.616,389.454,389.293,389.132,388.971,388.81,388.649,388.488,388.328,388.168,388.008,387.848,387.688,387.528,387.369,387.21,387.05,386.892,386.733,386.574,386.416,386.258,386.1,385.942,385.784,385.627,385.47,385.313,385.156,384.999,384.843,384.686,384.53,384.374,384.219,384.063,383.908,383.753,383.598,383.443,383.289,383.134,382.98,382.826,382.672,382.518,382.364,382.211,382.059,381.905,381.748,381.593,381.221,380.843,380.471,380.099,379.727,379.355,378.984,378.615,378.244,377.878,377.513,377.149,376.787,376.427,376.069,375.712,375.358,375.005,374.654,374.305,373.958,373.613,373.27,372.928,372.588,372.25,371.915,371.58,371.247,370.916,370.586,370.258,369.935,369.614,369.294,368.974,368.655,368.338,368.026,367.717,367.407,367.097,366.789,366.483,366.182,365.884,365.588,365.294,365,364.708,364.416,364.128,363.847,363.566,363.283,363.002,362.722,362.445,362.175,361.905,361.634,361.366,361.099,360.836,360.579,360.321,360.063,359.806,359.553,359.305,359.058,358.81,358.564,358.322,358.085,357.849,357.611,357.375,357.142,356.915,356.688,356.46,356.235,356.012,355.795,355.579,355.362,355.146,354.935,354.727,354.521,354.315,354.11,353.908,353.711,353.514,353.318,353.124,352.932,352.746,352.559,352.373,352.187,352.006,351.828,351.65,351.473,351.298,351.126,350.958,350.792,350.625,350.461,350.298,350.14,349.983,349.825,349.669,349.516,349.367,349.219,349.07,348.924,348.78,348.64,348.501,348.363,348.226,348.092,347.961,347.831,347.702,347.574,347.448,347.326,347.204,347.083,346.964,346.848,346.734,346.622,346.51,346.4,346.292,346.187,346.083,345.98,345.878,345.778,345.682,345.586,345.49,345.397,345.306,345.217,345.129,345.043,344.958,344.875,344.794,344.715,344.636,344.559,344.484,344.411,344.339,344.269,344.199,344.132,344.067,344.003,343.94,343.879,343.819,343.762,343.706,343.65,343.597,343.545,343.495,343.447,343.4,343.354,343.31,343.267,343.227,343.188,343.151,343.115,343.082,343.051,343.022,342.996,342.973,342.952,342.934,342.92,342.91,342.904,342.904])

all_dw = np.array([dw,dw1,dw2,dw3,dw4,dw5,dw6,dw7,dw8,dw9])
# all_dw-=273.15
all_dw-=300
all_dw = np.array([y for x,y in sorted(zip(time_dw, all_dw))])
time_dw_sort = [x for x,y in sorted(zip(time_dw, all_dw))]


guess = [400,1000,0.005]
all_areas = []
plt.figure(figsize=(20, 10))
plt.plot(c*1e3,power_input(0,c)/power_input(0,c).max(),':',color=color[0],label='input heat profile')
plt.plot(c*1e3,(np.mean([dw1,dw2,dw3],axis=0)-dw4)/(np.mean([dw1,dw2,dw3],axis=0)-dw4).max(),'-.',color=color[0],label='1,5 / 5ms average temp profile relative to before')
plt.plot([5]*2,[0,1],':',color=color[0])
# all_areas.append(2*np.pi*(0.005**2))

fit = curve_fit(gaussian_1D_fitting,c,dw,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,dw/dw.max(),color=color[1],label='temp profile at peak temperature\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,(dw-dw4)/(dw-dw4).max(),'-.',color=color[1],label='temp profile at peak temperature relative to before')
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[1])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[1])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

fit = curve_fit(gaussian_1D_fitting,c,dw1,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,dw1/dw1.max(),color=color[2],label='temp profile at peak temperature + 1.5ms\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,(dw1-dw4)/(dw1-dw4).max(),'-.',color=color[2],label='temp profile at peak temperature + 1.5ms relative to before')
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[2])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[2])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

fit = curve_fit(gaussian_1D_fitting,c,dw2,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,dw2/dw2.max(),color=color[3],label='temp profile at peak temperature + 3ms\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,(dw2-dw4)/(dw2-dw4).max(),'-.',color=color[3],label='temp profile at peak temperature + 3ms relative to before')
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[3])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[3])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

fit = curve_fit(gaussian_1D_fitting,c,dw3,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,dw3/dw3.max(),color=color[4],label='temp profile at peak temperature + 5ms\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,(dw3-dw4)/(dw3-dw4).max(),'-.',color=color[4],label='temp profile at peak temperature + 5ms relative to before')
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[4])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[4])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

fit = curve_fit(gaussian_1D_fitting,c,dw4,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,dw4/dw4.max(),color=color[5],label='temp profile steady state\ngaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[5])
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[5])
all_areas = [2*np.pi*((fit_wit_errors[2])**2)] + all_areas

plt.legend(loc='best')
plt.xlabel('radious [mm]')
plt.ylabel('weak pulse fraction of max [au]')
plt.grid()
# plt.ylim(bottom=b.min()/1.2,top=b.max()*1.2)
# plt.xlim(left=-1,right=15)
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

plt.figure(figsize=(20, 10))
plt.errorbar([-time_dw[0]*1e3,0,1.5,3,5],nominal_values(all_areas)/(2*np.pi*(0.005**2)),yerr=std_devs(all_areas)/(2*np.pi*(0.005**2)))
# plt.plot([0,5],[2*np.pi*(0.005**2)]*2,'--')
plt.plot([-time_dw[0]*1e3,5],[1]*2,'--')
plt.xlabel('time after peak temp [ms]')
plt.ylabel('weak pulse measured area / reference area [au]')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


# simulated very weak pulses
# heat_flux = 0.5e8e^(-(r^2)/(2*(0.005^2)))*(0.0917*0.1+0.5*0.7*e^(-((t-0.00033-1)^2)/(2*(0.000144^2)))+0.5*0.208*e^(-((t-0.000457-1)^2)/(2*(0.000218^2))))

aww=np.array([0,0.0000599623,0.000131965,0.000218391,0.000322104,0.000329971,0.000454426,0.000603676,0.000782847,0.000997901,0.00125587,0.00156546,0.00171006,0.00208151,0.00252736,0.00306225,0.00366223,0.00426233,0.00486231,0.00546229,0.00606227,0.00666225,0.00726223,0.00786233,0.00846231,0.00906229,0.00966227,0.0102623,0.0108622,0.0114623,0.0120623,0.0126623,0.0132623,0.0138622,0.0144622,0.0150623,0.0156623,0.0162623,0.0168623,0.0174622,0.0180622,0.0186623,0.0192623,0.0198623,0.0204623,0.0210623,0.0216622,0.0222623,0.0228623,0.0234623,0.0240623,0.0246623,0.0252622,0.0258622,0.0264623,0.0270623,0.0276623,0.0282623,0.0288622,0.0294622,0.03])
bww=np.array([323.918,325.686,328.874,334.852,342.402,342.931,345.595,342.12,337.967,334.978,333.082,331.768,331.279,330.428,329.713,329.101,328.597,328.208,327.898,327.643,327.429,327.246,327.088,326.949,326.826,326.715,326.616,326.526,326.443,326.368,326.298,326.233,326.173,326.117,326.065,326.016,325.969,325.926,325.884,325.845,325.808,325.773,325.739,325.707,325.676,325.647,325.619,325.592,325.566,325.541,325.517,325.494,325.472,325.45,325.429,325.409,325.39,325.371,325.353,325.335,325.32])

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('very weak pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
axx1, = ax1.plot(aww*1e3,bww,'b')
axx2, = ax2.plot(aww*1e3,1/8*power_input(aww,0),'r')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 heat flux [W/m2]', color=axx2.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('Comparison between strong (--) and weak (-) pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3.spines["right"].set_position(("axes", 1.1))
ax3.spines["right"].set_visible(True)
axx1, = ax1.plot(a*1e3,b,'--b')
axx1, = ax1.plot(aww*1e3,bww,'b')
axx2, = ax2.plot(a*1e3,b-b[0],'--r')
axx2, = ax2.plot(aww*1e3,bww-bww[0],'r')
interp = interp1d(aww,bww)(a)
axx2, = ax2.plot(a*1e3,(b-b[0])-(interp-bww[0]),':r')
axx3, = ax3.plot(a*1e3,power_input(a,0),'--g')
axx3, = ax3.plot(aww*1e3,1/8*power_input(aww,0),'g')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 dT [K]', color=axx2.get_color())  # we already handled the x-label with ax1
ax3.set_ylabel('r=0 heat flux [W/m2]', color=axx3.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax3.tick_params(axis='y', labelcolor=axx3.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


plt.figure(figsize=(20, 10))
plt.plot(aww*1e3,bww,color=color[0],label='full simulated temperature')
time_after_peak=1.5e-3
plt.plot([aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bww.min(),bww.max()],'--k')
bds = [[20,1e-3,3e-1,0],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
guess=[bww[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]), aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():], bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]-np.mean(bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]))**2)))
plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1],label='double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
plt.title('very weak pulse')
# plt.ylim(bottom=b.min()*0.9,top=b.max()*1.2)
plt.xlim(right=10)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_energy1 = []
all_energy2 = []
all_energy3 = []
all_energy4 = []
all_energy5 = []
all_energy6 = []
for time_after_peak in np.array([0.5,1,1.5,2,3,5])*1e-3:
	plt.figure(figsize=(20, 10))
	plt.plot(aww*1e3,bww,color=color[0],linewidth=4,label='full simulated temperature')
	# plt.plot(a1*1e3,b1,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000616*1e3,1.34e-05*1e3,(13.25+0.0917*0.1)*8e8))
	# plt.plot(a2*1e3,b2,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(1e-07*1e3,0.00108*1e3,(0.1678+0.0917*0.1)*8e8))
	# plt.plot(a3*1e3,b3,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000762*1e3,1.66e-05*1e3,(10.31+0.0917*0.1)*8e8))
	# bds = [[20,1e-3,1e-4,1],[np.inf,np.inf,1e-3,1.0005]]
	# bds = [[b[0]-1,1e-3,1e-6,0],[b[0]+1,np.inf,1,a[np.abs(a-(a[bww.argmax()]+1.5e-3)).argmin()]]]
	# time_after_peak = 5e-3
	plt.title('very weak pulse temperature profile used from ts=%.3gms after the temperature peak' %(time_after_peak*1e3))
	bds1 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess1=[bww[0],1,0.5,0.]
	bds2 = [[20,1e-3,1e-8,0],[np.inf,np.inf,1e-6,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess2=[bww[0],1,1e-6,0.]
	bds3 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,1e-7]]
	guess3=[bww[0],1,0.5,0.]
	bds4 = [[20,1e-3,0.01,0],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess4=[bww[0],1,1,0.]
	bds5 = [[20,1e-3,0.1,0],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess5=[bww[0],1,1,0.]
	bds6 = [[20,1e-3,1e-2,0.2*1e-3],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess6=[bww[0],1,0.5,0.6*1e-3]
	# plt.plot([1.5e-3]*2,[b.min(),b.max()],'--k')
	plt.plot([aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bww.min(),bww.max()],'--k')
	for i,arg in enumerate([[bds1,guess1],[bds2,guess2],[bds3,guess3],[bds4,guess4],[bds5,guess5],[bds6,guess6]]):
		bds,guess = arg
		# print(guess)
		fit = curve_fit(semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]), aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():], bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
		fit_wit_errors = correlated_values(fit[0],fit[1])
		energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
		pulse_duration_ms = 1e3*(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
		R2 = 1-np.sum(((bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]-np.mean(bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]))**2)))
		# print(fit_wit_errors)
		if i==0:
			all_energy1.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1],label='free double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1])
		elif i==1:
			all_energy2.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus<1e-6)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==2:
			all_energy3.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0<1e-7)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==3:
			all_energy4.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.01)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==4:
			all_energy5.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.1)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==5:
			all_energy6.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0>0.2)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
	# guess = [1000,1e8,1e-3,0]
	# bds=[[20,0,0,0],[np.inf,np.inf,np.inf,np.inf]]
	# fit = curve_fit(exponential_decay, a[np.abs(a-(a[bww.argmax()]+time_after_peak)).argmin():], bww[np.abs(a-(a[bww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	# fit_wit_errors = correlated_values(fit[0],fit[1])
	# plt.plot(a*1e3,exponential_decay(a,*fit[0]),'--',label='exponential decay')

	plt.plot(aww*1e3,power_input(aww,0)/np.max(power_input(aw,0))*(bww.max()-bww.min())+bww.min(),':',color=color[i+2],label='power input (not in scale), energy input~1.38J')
	plt.legend(loc='best', fontsize='small')
	plt.ylim(top=(bww.max()-bww.min())*1.4+bww.min())
	plt.xlim(left=-1,right=15)
	plt.xlabel('time [ms]')
	plt.ylabel('temperature [K]')
	plt.grid()
	figure_index+=1
	plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	plt.close('all')
	# plt.pause(0.01)

all_energy1 = np.array(all_energy1)
all_energy2 = np.array(all_energy2)
all_energy3 = np.array(all_energy3)
all_energy4 = np.array(all_energy4)
all_energy5 = np.array(all_energy5)
all_energy6 = np.array(all_energy6)
nominal_energy = 5.5/4	# J
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy1)/nominal_energy,yerr=std_devs(all_energy1)/nominal_energy,color=color[1],label='free double root')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy2)/nominal_energy,yerr=std_devs(all_energy2)/nominal_energy,color=color[2],linestyle='--',label='constrained (taus<1e-6)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy3)/nominal_energy,yerr=std_devs(all_energy3)/nominal_energy,color=color[3],linestyle='--',label='constrained (t0<1e-7)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy4)/nominal_energy,yerr=std_devs(all_energy4)/nominal_energy,color=color[4],linestyle='--',label='constrained (taus>0.01)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy5)/nominal_energy,yerr=std_devs(all_energy5)/nominal_energy,color=color[5],linestyle='--',label='constrained (taus>0.1)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy6)/nominal_energy,yerr=std_devs(all_energy6)/nominal_energy,color=color[6],linestyle='--',label='constrained (t0>0.2)')
plt.plot([0,5],[1]*2,'--k')
plt.plot([1.5]*2,[1,1.1],'--k')
plt.xlabel('start of profile used after temperature peak (ts) [ms]')
plt.ylabel('fitted/delivered energy [au]')
plt.title('very weak pulse')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_all_energy1.append(all_energy1/nominal_energy)


bww.argmax()+1
# profile at peak temperature
time_dww=[aww[bww.argmax()]]
dww=np.array([345.595,345.593,345.59,345.588,345.586,345.583,345.58,345.577,345.573,345.57,345.568,345.565,345.562,345.559,345.555,345.551,345.547,345.543,345.538,345.533,345.528,345.523,345.517,345.511,345.505,345.499,345.492,345.485,345.478,345.471,345.463,345.455,345.447,345.439,345.43,345.421,345.412,345.402,345.392,345.382,345.372,345.362,345.351,345.34,345.329,345.317,345.305,345.293,345.281,345.268,345.256,345.243,345.229,345.216,345.202,345.188,345.173,345.159,345.144,345.129,345.114,345.098,345.082,345.066,345.05,345.033,345.016,344.999,344.982,344.964,344.947,344.928,344.91,344.892,344.873,344.854,344.834,344.815,344.795,344.775,344.755,344.734,344.713,344.692,344.671,344.65,344.628,344.606,344.584,344.561,344.539,344.516,344.493,344.469,344.445,344.422,344.397,344.373,344.349,344.324,344.299,344.273,344.248,344.222,344.196,344.17,344.143,344.117,344.09,344.063,344.035,344.008,343.98,343.952,343.924,343.895,343.866,343.838,343.808,343.779,343.749,343.72,343.689,343.659,343.629,343.598,343.567,343.536,343.505,343.473,343.441,343.409,343.377,343.344,343.312,343.279,343.246,343.213,343.179,343.145,343.111,343.077,343.043,343.008,342.974,342.939,342.904,342.868,342.833,342.797,342.761,342.725,342.688,342.652,342.615,342.578,342.541,342.503,342.466,342.428,342.39,342.352,342.314,342.275,342.236,342.198,342.158,342.119,342.08,342.04,342,341.96,341.92,341.88,341.839,341.798,341.757,341.716,341.675,341.633,341.592,341.55,341.508,341.466,341.423,341.381,341.338,341.295,341.252,341.209,341.165,341.122,341.078,341.034,340.99,340.946,340.901,340.857,340.812,340.767,340.722,340.677,340.632,340.586,340.54,340.495,340.449,340.402,340.356,340.31,340.263,340.216,340.169,340.122,340.075,340.028,339.98,339.933,339.885,339.837,339.789,339.741,339.692,339.644,339.595,339.546,339.497,339.448,339.399,339.35,339.3,339.251,339.201,339.151,339.101,339.051,339.001,338.951,338.9,338.85,338.799,338.748,338.697,338.646,338.595,338.543,338.492,338.44,338.389,338.337,338.285,338.233,338.181,338.128,338.076,338.024,337.971,337.918,337.866,337.813,337.76,337.706,337.653,337.6,337.547,337.493,337.439,337.386,337.332,337.278,337.224,337.17,337.116,337.061,337.007,336.952,336.898,336.843,336.789,336.734,336.679,336.624,336.569,336.514,336.458,336.403,336.348,336.292,336.237,336.181,336.125,336.069,336.014,335.958,335.902,335.846,335.789,335.733,335.677,335.621,335.564,335.508,335.451,335.395,335.338,335.281,335.224,335.168,335.111,335.054,334.997,334.94,334.883,334.825,334.768,334.711,334.653,334.596,334.539,334.481,334.424,334.366,334.308,334.251,334.193,334.135,334.077,334.02,333.962,333.904,333.846,333.788,333.73,333.672,333.614,333.556,333.497,333.439,333.381,333.323,333.264,333.206,333.148,333.089,333.031,332.973,332.914,332.856,332.797,332.739,332.68,332.622,332.563,332.504,332.446,332.387,332.329,332.27,332.211,332.153,332.094,332.035,331.977,331.918,331.859,331.801,331.742,331.683,331.624,331.566,331.507,331.448,331.389,331.331,331.272,331.213,331.155,331.096,331.037,330.978,330.92,330.861,330.802,330.744,330.685,330.626,330.568,330.509,330.45,330.392,330.333,330.275,330.216,330.157,330.099,330.04,329.982,329.923,329.865,329.807,329.748,329.69,329.631,329.573,329.515,329.456,329.398,329.34,329.282,329.224,329.165,329.107,329.049,328.991,328.933,328.875,328.817,328.759,328.701,328.643,328.586,328.528,328.47,328.412,328.355,328.297,328.24,328.182,328.125,328.067,328.01,327.952,327.895,327.838,327.781,327.723,327.666,327.609,327.552,327.495,327.438,327.382,327.325,327.268,327.211,327.155,327.098,327.041,326.985,326.928,326.872,326.816,326.759,326.703,326.647,326.591,326.535,326.479,326.423,326.367,326.312,326.256,326.2,326.145,326.089,326.034,325.978,325.923,325.868,325.813,325.758,325.703,325.648,325.593,325.538,325.483,325.429,325.374,325.32,325.265,325.211,325.157,325.103,325.048,324.994,324.94,324.887,324.833,324.779,324.726,324.673,324.619,324.566,324.513,324.46,324.408,324.355,324.302,324.25,324.2,324.15,324.012,323.88,323.746,323.613,323.482,323.352,323.223,323.094,322.967,322.84,322.714,322.59,322.466,322.343,322.221,322.1,321.978,321.857,321.736,321.616,321.496,321.376,321.257,321.139,321.022,320.905,320.789,320.673,320.559,320.446,320.334,320.222,320.109,319.996,319.886,319.777,319.669,319.561,319.453,319.346,319.24,319.136,319.033,318.93,318.827,318.723,318.62,318.518,318.418,318.319,318.221,318.123,318.024,317.926,317.83,317.736,317.643,317.55,317.456,317.363,317.273,317.183,317.094,317.004,316.914,316.825,316.739,316.654,316.569,316.482,316.398,316.315,316.233,316.151,316.068,315.986,315.908,315.83,315.752,315.673,315.596,315.52,315.446,315.371,315.296,315.222,315.15,315.079,315.008,314.936,314.866,314.797,314.73,314.662,314.594,314.527,314.462,314.397,314.332,314.267,314.204,314.142,314.082,314.021,313.96,313.901,313.843,313.786,313.728,313.67,313.613,313.558,313.503,313.449,313.394,313.341,313.289,313.238,313.186,313.135,313.085,313.037,312.989,312.941,312.893,312.846,312.8,312.755,312.709,312.664,312.62,312.577,312.535,312.493,312.451,312.411,312.371,312.332,312.293,312.254,312.215,312.178,312.141,312.105,312.069,312.033,311.999,311.965,311.932,311.898,311.866,311.834,311.803,311.772,311.742,311.712,311.682,311.654,311.625,311.597,311.57,311.543,311.517,311.492,311.466,311.441,311.417,311.394,311.371,311.347,311.325,311.303,311.282,311.261,311.241,311.221,311.201,311.183,311.164,311.146,311.128,311.111,311.094,311.078,311.063,311.047,311.032,311.018,311.005,310.991,310.979,310.966,310.954,310.943,310.932,310.923,310.914,310.907,310.902,310.898])
np.abs(aww-(aww[bww.argmax()]+1.5*1e-3)).argmin()+1
# profile at peak +1.5ms
time_dww.append(aww[np.abs(aww-(aww[bww.argmax()]+1.5*1e-3)).argmin()])
dww1=np.array([330.428,330.428,330.428,330.428,330.427,330.427,330.426,330.425,330.424,330.423,330.422,330.42,330.419,330.417,330.415,330.413,330.411,330.408,330.406,330.403,330.4,330.397,330.394,330.391,330.388,330.384,330.381,330.377,330.373,330.369,330.365,330.36,330.356,330.351,330.347,330.342,330.337,330.332,330.326,330.321,330.315,330.309,330.304,330.298,330.291,330.285,330.279,330.272,330.265,330.259,330.252,330.244,330.237,330.23,330.222,330.215,330.207,330.199,330.191,330.182,330.174,330.166,330.157,330.148,330.139,330.13,330.121,330.112,330.102,330.093,330.083,330.073,330.063,330.053,330.043,330.032,330.022,330.011,330,329.989,329.978,329.967,329.956,329.944,329.933,329.921,329.909,329.897,329.885,329.873,329.86,329.848,329.835,329.823,329.81,329.797,329.783,329.77,329.757,329.743,329.73,329.716,329.702,329.688,329.674,329.659,329.645,329.63,329.616,329.601,329.586,329.571,329.556,329.54,329.525,329.509,329.493,329.478,329.462,329.446,329.43,329.413,329.397,329.38,329.364,329.347,329.33,329.313,329.296,329.278,329.261,329.244,329.226,329.208,329.19,329.172,329.154,329.136,329.118,329.099,329.081,329.062,329.043,329.024,329.005,328.986,328.967,328.948,328.928,328.909,328.889,328.869,328.849,328.829,328.809,328.789,328.768,328.748,328.727,328.707,328.686,328.665,328.644,328.623,328.602,328.58,328.559,328.537,328.516,328.494,328.472,328.45,328.428,328.406,328.384,328.361,328.339,328.316,328.294,328.271,328.248,328.225,328.202,328.179,328.156,328.132,328.109,328.085,328.062,328.038,328.014,327.99,327.966,327.942,327.918,327.893,327.869,327.845,327.82,327.795,327.771,327.746,327.721,327.696,327.671,327.645,327.62,327.595,327.569,327.544,327.518,327.492,327.467,327.441,327.415,327.389,327.363,327.336,327.31,327.284,327.257,327.231,327.204,327.177,327.15,327.124,327.097,327.07,327.042,327.015,326.988,326.961,326.933,326.906,326.878,326.851,326.823,326.795,326.767,326.739,326.711,326.683,326.655,326.627,326.599,326.57,326.542,326.513,326.485,326.456,326.428,326.399,326.37,326.341,326.312,326.283,326.254,326.225,326.196,326.166,326.137,326.108,326.078,326.049,326.019,325.99,325.96,325.93,325.9,325.871,325.841,325.811,325.781,325.751,325.72,325.69,325.66,325.63,325.599,325.569,325.539,325.508,325.478,325.447,325.416,325.386,325.355,325.324,325.293,325.262,325.231,325.2,325.169,325.138,325.107,325.076,325.045,325.014,324.982,324.951,324.92,324.888,324.857,324.825,324.794,324.762,324.731,324.699,324.667,324.636,324.604,324.572,324.54,324.508,324.477,324.445,324.413,324.381,324.349,324.317,324.285,324.252,324.22,324.188,324.156,324.124,324.091,324.059,324.027,323.994,323.962,323.93,323.897,323.865,323.832,323.8,323.767,323.735,323.702,323.67,323.637,323.605,323.572,323.539,323.507,323.474,323.441,323.408,323.376,323.343,323.31,323.277,323.244,323.212,323.179,323.146,323.113,323.08,323.047,323.014,322.981,322.949,322.916,322.883,322.85,322.817,322.784,322.751,322.718,322.685,322.652,322.619,322.586,322.553,322.52,322.487,322.453,322.42,322.387,322.354,322.321,322.288,322.255,322.222,322.189,322.156,322.123,322.09,322.057,322.024,321.991,321.958,321.925,321.892,321.858,321.825,321.792,321.759,321.726,321.693,321.66,321.627,321.594,321.561,321.528,321.495,321.462,321.429,321.397,321.364,321.331,321.298,321.265,321.232,321.199,321.166,321.133,321.101,321.068,321.035,321.002,320.969,320.937,320.904,320.871,320.838,320.806,320.773,320.74,320.708,320.675,320.642,320.61,320.577,320.545,320.512,320.48,320.447,320.415,320.382,320.35,320.317,320.285,320.253,320.22,320.188,320.156,320.124,320.091,320.059,320.027,319.995,319.963,319.931,319.898,319.866,319.834,319.802,319.77,319.739,319.707,319.675,319.643,319.611,319.579,319.548,319.516,319.484,319.453,319.421,319.389,319.358,319.326,319.295,319.263,319.232,319.201,319.169,319.138,319.107,319.075,319.044,319.013,318.982,318.951,318.92,318.889,318.858,318.827,318.796,318.765,318.734,318.703,318.672,318.642,318.611,318.58,318.55,318.519,318.488,318.458,318.382,318.306,318.231,318.156,318.081,318.007,317.933,317.859,317.785,317.711,317.638,317.565,317.493,317.421,317.348,317.277,317.205,317.135,317.064,316.994,316.924,316.854,316.785,316.716,316.648,316.579,316.512,316.444,316.377,316.31,316.243,316.177,316.112,316.046,315.981,315.917,315.852,315.789,315.725,315.662,315.599,315.537,315.475,315.413,315.352,315.291,315.231,315.171,315.111,315.052,314.993,314.934,314.877,314.819,314.762,314.705,314.648,314.592,314.537,314.481,314.426,314.372,314.318,314.264,314.211,314.158,314.106,314.054,314.002,313.951,313.9,313.85,313.8,313.75,313.701,313.653,313.604,313.556,313.509,313.462,313.415,313.368,313.323,313.277,313.232,313.188,313.143,313.099,313.056,313.013,312.97,312.928,312.886,312.845,312.804,312.763,312.723,312.683,312.644,312.605,312.567,312.528,312.491,312.453,312.416,312.38,312.343,312.307,312.272,312.237,312.203,312.168,312.135,312.101,312.068,312.036,312.003,311.971,311.94,311.909,311.878,311.848,311.818,311.788,311.759,311.73,311.702,311.674,311.646,311.619,311.592,311.565,311.539,311.513,311.488,311.463,311.438,311.413,311.389,311.366,311.343,311.32,311.297,311.275,311.253,311.232,311.211,311.19,311.169,311.149,311.13,311.11,311.091,311.073,311.054,311.036,311.019,311.002,310.985,310.968,310.952,310.936,310.92,310.905,310.891,310.876,310.862,310.848,310.834,310.821,310.809,310.796,310.784,310.772,310.761,310.75,310.739,310.729,310.719,310.709,310.7,310.691,310.682,310.674,310.666,310.659,310.652,310.646,310.64,310.634,310.629,310.624,310.62,310.616,310.613,310.611,310.608,310.607,310.606,310.606])
np.abs(aww-(aww[bww.argmax()]+3*1e-3)).argmin()+1
# profile at peak +3ms
time_dww.append(aww[np.abs(aww-(aww[bww.argmax()]+3*1e-3)).argmin()])
dww2=np.array([328.597,328.597,328.597,328.597,328.596,328.596,328.595,328.594,328.593,328.592,328.591,328.59,328.588,328.587,328.585,328.583,328.581,328.579,328.577,328.574,328.572,328.569,328.566,328.564,328.561,328.557,328.554,328.551,328.547,328.544,328.54,328.536,328.532,328.528,328.524,328.519,328.515,328.51,328.505,328.5,328.495,328.49,328.485,328.48,328.474,328.468,328.463,328.457,328.451,328.444,328.438,328.432,328.425,328.419,328.412,328.405,328.398,328.391,328.384,328.376,328.369,328.361,328.353,328.345,328.337,328.329,328.321,328.313,328.304,328.295,328.287,328.278,328.269,328.26,328.251,328.241,328.232,328.222,328.212,328.203,328.193,328.183,328.172,328.162,328.152,328.141,328.131,328.12,328.109,328.098,328.087,328.075,328.064,328.053,328.041,328.029,328.017,328.006,327.993,327.981,327.969,327.957,327.944,327.931,327.919,327.906,327.893,327.88,327.867,327.853,327.84,327.826,327.813,327.799,327.785,327.771,327.757,327.743,327.728,327.714,327.699,327.685,327.67,327.655,327.64,327.625,327.61,327.594,327.579,327.563,327.548,327.532,327.516,327.5,327.484,327.468,327.452,327.435,327.419,327.402,327.386,327.369,327.352,327.335,327.318,327.301,327.283,327.266,327.248,327.231,327.213,327.195,327.177,327.159,327.141,327.123,327.105,327.086,327.068,327.049,327.031,327.012,326.993,326.974,326.955,326.936,326.916,326.897,326.877,326.858,326.838,326.818,326.799,326.779,326.759,326.739,326.718,326.698,326.678,326.657,326.637,326.616,326.595,326.574,326.553,326.532,326.511,326.49,326.469,326.447,326.426,326.404,326.383,326.361,326.339,326.317,326.295,326.273,326.251,326.229,326.207,326.184,326.162,326.139,326.117,326.094,326.071,326.048,326.025,326.002,325.979,325.956,325.933,325.91,325.886,325.863,325.839,325.816,325.792,325.768,325.744,325.72,325.696,325.672,325.648,325.624,325.6,325.575,325.551,325.526,325.502,325.477,325.452,325.428,325.403,325.378,325.353,325.328,325.303,325.278,325.252,325.227,325.202,325.176,325.151,325.125,325.1,325.074,325.048,325.022,324.997,324.971,324.945,324.919,324.892,324.866,324.84,324.814,324.788,324.761,324.735,324.708,324.682,324.655,324.628,324.602,324.575,324.548,324.521,324.494,324.467,324.44,324.413,324.386,324.359,324.332,324.304,324.277,324.25,324.222,324.195,324.167,324.14,324.112,324.084,324.057,324.029,324.001,323.973,323.945,323.917,323.889,323.861,323.833,323.805,323.777,323.749,323.721,323.693,323.664,323.636,323.608,323.579,323.551,323.522,323.494,323.465,323.437,323.408,323.379,323.351,323.322,323.293,323.264,323.236,323.207,323.178,323.149,323.12,323.091,323.062,323.033,323.004,322.975,322.946,322.917,322.888,322.858,322.829,322.8,322.771,322.741,322.712,322.683,322.653,322.624,322.595,322.565,322.536,322.506,322.477,322.447,322.418,322.388,322.359,322.329,322.299,322.27,322.24,322.211,322.181,322.151,322.122,322.092,322.062,322.032,322.003,321.973,321.943,321.913,321.883,321.854,321.824,321.794,321.764,321.734,321.704,321.675,321.645,321.615,321.585,321.555,321.525,321.495,321.465,321.435,321.405,321.375,321.346,321.316,321.286,321.256,321.226,321.196,321.166,321.136,321.106,321.076,321.046,321.016,320.986,320.956,320.926,320.896,320.866,320.836,320.806,320.776,320.746,320.716,320.687,320.657,320.627,320.597,320.567,320.537,320.507,320.477,320.447,320.417,320.388,320.358,320.328,320.298,320.268,320.238,320.208,320.179,320.149,320.119,320.089,320.06,320.03,320,319.97,319.941,319.911,319.881,319.852,319.822,319.792,319.763,319.733,319.704,319.674,319.644,319.615,319.585,319.556,319.526,319.497,319.468,319.438,319.409,319.379,319.35,319.321,319.291,319.262,319.233,319.204,319.174,319.145,319.116,319.087,319.058,319.029,318.999,318.97,318.941,318.912,318.883,318.854,318.825,318.797,318.768,318.739,318.71,318.681,318.652,318.624,318.595,318.566,318.538,318.509,318.48,318.452,318.423,318.395,318.366,318.338,318.309,318.281,318.253,318.224,318.196,318.168,318.14,318.111,318.083,318.055,318.027,317.999,317.971,317.943,317.915,317.887,317.859,317.831,317.803,317.776,317.706,317.637,317.569,317.5,317.432,317.364,317.296,317.229,317.162,317.095,317.028,316.961,316.895,316.829,316.763,316.698,316.633,316.568,316.503,316.439,316.375,316.312,316.248,316.185,316.123,316.06,315.998,315.936,315.875,315.814,315.753,315.692,315.632,315.572,315.513,315.454,315.395,315.336,315.278,315.22,315.163,315.105,315.048,314.992,314.936,314.88,314.825,314.77,314.715,314.66,314.606,314.553,314.499,314.446,314.394,314.341,314.29,314.238,314.187,314.136,314.086,314.035,313.986,313.936,313.887,313.839,313.791,313.743,313.695,313.648,313.601,313.555,313.509,313.463,313.418,313.373,313.328,313.284,313.24,313.197,313.154,313.111,313.069,313.027,312.985,312.944,312.903,312.863,312.823,312.783,312.744,312.705,312.666,312.628,312.59,312.553,312.516,312.479,312.442,312.406,312.371,312.336,312.301,312.266,312.232,312.198,312.165,312.131,312.099,312.066,312.034,312.003,311.971,311.941,311.91,311.88,311.85,311.82,311.791,311.763,311.734,311.706,311.678,311.651,311.624,311.597,311.571,311.545,311.519,311.494,311.469,311.445,311.42,311.396,311.373,311.35,311.327,311.304,311.282,311.26,311.239,311.218,311.197,311.176,311.156,311.136,311.117,311.098,311.079,311.06,311.042,311.024,311.007,310.99,310.973,310.956,310.94,310.924,310.909,310.894,310.879,310.864,310.85,310.836,310.822,310.809,310.796,310.784,310.771,310.76,310.748,310.737,310.726,310.715,310.705,310.695,310.685,310.676,310.667,310.659,310.651,310.643,310.635,310.628,310.622,310.615,310.61,310.604,310.599,310.594,310.59,310.586,310.582,310.579,310.577,310.575,310.573,310.572,310.571,310.571])
np.abs(aww-(aww[bww.argmax()]+5*1e-3)).argmin()+1
# profile at peak +5ms
time_dww.append(aww[np.abs(aww-(aww[bww.argmax()]+5*1e-3)).argmin()])
dww3=np.array([327.643,327.643,327.643,327.643,327.642,327.642,327.641,327.64,327.639,327.638,327.637,327.636,327.634,327.633,327.631,327.63,327.628,327.626,327.624,327.621,327.619,327.617,327.614,327.611,327.609,327.606,327.603,327.599,327.596,327.593,327.589,327.585,327.582,327.578,327.574,327.57,327.565,327.561,327.557,327.552,327.547,327.542,327.537,327.532,327.527,327.522,327.516,327.511,327.505,327.499,327.493,327.487,327.481,327.475,327.469,327.462,327.456,327.449,327.442,327.435,327.428,327.421,327.413,327.406,327.398,327.391,327.383,327.375,327.367,327.359,327.351,327.343,327.334,327.326,327.317,327.308,327.299,327.29,327.281,327.272,327.262,327.253,327.243,327.234,327.224,327.214,327.204,327.194,327.184,327.173,327.163,327.152,327.141,327.131,327.12,327.109,327.098,327.086,327.075,327.063,327.052,327.04,327.028,327.017,327.005,326.992,326.98,326.968,326.955,326.943,326.93,326.918,326.905,326.892,326.879,326.865,326.852,326.839,326.825,326.812,326.798,326.784,326.77,326.756,326.742,326.728,326.714,326.699,326.685,326.67,326.655,326.641,326.626,326.611,326.596,326.58,326.565,326.55,326.534,326.519,326.503,326.487,326.471,326.455,326.439,326.423,326.406,326.39,326.374,326.357,326.34,326.324,326.307,326.29,326.273,326.256,326.238,326.221,326.204,326.186,326.168,326.151,326.133,326.115,326.097,326.079,326.061,326.043,326.024,326.006,325.987,325.969,325.95,325.931,325.912,325.893,325.874,325.855,325.836,325.817,325.797,325.778,325.758,325.739,325.719,325.699,325.679,325.659,325.639,325.619,325.599,325.579,325.558,325.538,325.517,325.497,325.476,325.455,325.434,325.414,325.393,325.371,325.35,325.329,325.308,325.286,325.265,325.243,325.222,325.2,325.178,325.156,325.135,325.113,325.091,325.068,325.046,325.024,325.002,324.979,324.957,324.934,324.912,324.889,324.866,324.843,324.82,324.797,324.774,324.751,324.728,324.705,324.682,324.658,324.635,324.611,324.588,324.564,324.541,324.517,324.493,324.469,324.445,324.421,324.397,324.373,324.349,324.325,324.301,324.276,324.252,324.227,324.203,324.178,324.154,324.129,324.104,324.08,324.055,324.03,324.005,323.98,323.955,323.93,323.905,323.879,323.854,323.829,323.803,323.778,323.753,323.727,323.702,323.676,323.65,323.625,323.599,323.573,323.547,323.521,323.495,323.47,323.443,323.417,323.391,323.365,323.339,323.313,323.287,323.26,323.234,323.207,323.181,323.155,323.128,323.102,323.075,323.048,323.022,322.995,322.968,322.941,322.915,322.888,322.861,322.834,322.807,322.78,322.753,322.726,322.699,322.672,322.645,322.617,322.59,322.563,322.536,322.508,322.481,322.454,322.426,322.399,322.372,322.344,322.317,322.289,322.262,322.234,322.206,322.179,322.151,322.124,322.096,322.068,322.04,322.013,321.985,321.957,321.929,321.901,321.874,321.846,321.818,321.79,321.762,321.734,321.706,321.678,321.65,321.622,321.594,321.566,321.538,321.51,321.482,321.454,321.425,321.397,321.369,321.341,321.313,321.285,321.256,321.228,321.2,321.172,321.144,321.115,321.087,321.059,321.031,321.002,320.974,320.946,320.917,320.889,320.861,320.832,320.804,320.776,320.748,320.719,320.691,320.663,320.634,320.606,320.578,320.549,320.521,320.492,320.464,320.436,320.407,320.379,320.351,320.322,320.294,320.266,320.237,320.209,320.181,320.152,320.124,320.096,320.067,320.039,320.011,319.983,319.954,319.926,319.898,319.869,319.841,319.813,319.785,319.756,319.728,319.7,319.672,319.644,319.615,319.587,319.559,319.531,319.503,319.475,319.447,319.418,319.39,319.362,319.334,319.306,319.278,319.25,319.222,319.194,319.166,319.138,319.11,319.082,319.054,319.026,318.999,318.971,318.943,318.915,318.887,318.859,318.832,318.804,318.776,318.749,318.721,318.693,318.666,318.638,318.61,318.583,318.555,318.528,318.5,318.473,318.445,318.418,318.39,318.363,318.336,318.308,318.281,318.254,318.226,318.199,318.172,318.145,318.118,318.091,318.063,318.036,318.009,317.982,317.955,317.928,317.901,317.875,317.848,317.821,317.794,317.767,317.74,317.714,317.687,317.66,317.634,317.607,317.581,317.554,317.528,317.501,317.475,317.448,317.422,317.356,317.291,317.225,317.16,317.096,317.031,316.967,316.902,316.839,316.775,316.711,316.648,316.585,316.523,316.46,316.398,316.336,316.274,316.213,316.152,316.091,316.031,315.97,315.91,315.851,315.791,315.732,315.673,315.615,315.557,315.499,315.441,315.384,315.327,315.27,315.214,315.158,315.102,315.047,314.991,314.937,314.882,314.828,314.774,314.72,314.667,314.615,314.562,314.51,314.458,314.406,314.355,314.304,314.254,314.204,314.154,314.104,314.055,314.006,313.958,313.909,313.862,313.814,313.767,313.72,313.674,313.628,313.582,313.537,313.492,313.447,313.403,313.359,313.315,313.272,313.229,313.186,313.144,313.102,313.061,313.019,312.979,312.938,312.898,312.858,312.819,312.78,312.741,312.703,312.665,312.627,312.59,312.553,312.516,312.48,312.444,312.409,312.373,312.339,312.304,312.27,312.236,312.203,312.17,312.137,312.105,312.073,312.041,312.009,311.978,311.948,311.918,311.888,311.858,311.829,311.8,311.771,311.743,311.715,311.687,311.66,311.633,311.607,311.58,311.555,311.529,311.504,311.479,311.454,311.43,311.406,311.383,311.359,311.337,311.314,311.292,311.27,311.248,311.227,311.206,311.186,311.165,311.145,311.126,311.106,311.087,311.069,311.051,311.033,311.015,310.997,310.98,310.964,310.947,310.931,310.915,310.9,310.885,310.87,310.856,310.841,310.828,310.814,310.801,310.788,310.775,310.763,310.751,310.74,310.728,310.718,310.707,310.697,310.687,310.677,310.668,310.659,310.65,310.642,310.634,310.626,310.619,310.612,310.606,310.6,310.594,310.589,310.583,310.579,310.574,310.57,310.567,310.564,310.561,310.559,310.557,310.555,310.554,310.553,310.553])
np.abs(aww-0*1e-3).argmin()+1
# profile at 0ms
time_dww.append(aww[np.abs(aww-0*1e-3).argmin()])
dww4=np.array([323.918,323.918,323.918,323.918,323.918,323.917,323.917,323.916,323.915,323.915,323.914,323.913,323.912,323.911,323.909,323.908,323.907,323.905,323.904,323.902,323.9,323.898,323.896,323.894,323.892,323.89,323.887,323.885,323.883,323.88,323.877,323.874,323.872,323.869,323.866,323.862,323.859,323.856,323.852,323.849,323.845,323.842,323.838,323.834,323.83,323.826,323.822,323.818,323.813,323.809,323.804,323.8,323.795,323.79,323.786,323.781,323.776,323.77,323.765,323.76,323.755,323.749,323.744,323.738,323.732,323.726,323.72,323.714,323.708,323.702,323.696,323.69,323.683,323.677,323.67,323.663,323.657,323.65,323.643,323.636,323.629,323.621,323.614,323.607,323.599,323.592,323.584,323.576,323.568,323.561,323.553,323.545,323.536,323.528,323.52,323.511,323.503,323.494,323.486,323.477,323.468,323.459,323.45,323.441,323.432,323.423,323.414,323.404,323.395,323.385,323.375,323.366,323.356,323.346,323.336,323.326,323.316,323.306,323.295,323.285,323.275,323.264,323.253,323.243,323.232,323.221,323.21,323.199,323.188,323.177,323.166,323.154,323.143,323.132,323.12,323.108,323.097,323.085,323.073,323.061,323.049,323.037,323.025,323.013,323.001,322.988,322.976,322.963,322.951,322.938,322.925,322.912,322.9,322.887,322.874,322.86,322.847,322.834,322.821,322.807,322.794,322.78,322.767,322.753,322.739,322.725,322.712,322.698,322.684,322.67,322.655,322.641,322.627,322.613,322.598,322.584,322.569,322.554,322.54,322.525,322.51,322.495,322.48,322.465,322.45,322.435,322.42,322.405,322.389,322.374,322.358,322.343,322.327,322.311,322.296,322.28,322.264,322.248,322.232,322.216,322.2,322.184,322.168,322.151,322.135,322.119,322.102,322.086,322.069,322.053,322.036,322.019,322.002,321.986,321.969,321.952,321.935,321.918,321.9,321.883,321.866,321.849,321.831,321.814,321.797,321.779,321.761,321.744,321.726,321.708,321.691,321.673,321.655,321.637,321.619,321.601,321.583,321.565,321.547,321.528,321.51,321.492,321.473,321.455,321.436,321.418,321.399,321.381,321.362,321.343,321.325,321.306,321.287,321.268,321.249,321.23,321.211,321.192,321.173,321.154,321.135,321.115,321.096,321.077,321.057,321.038,321.019,320.999,320.98,320.96,320.94,320.921,320.901,320.881,320.862,320.842,320.822,320.802,320.782,320.762,320.742,320.722,320.702,320.682,320.662,320.642,320.622,320.601,320.581,320.561,320.541,320.52,320.5,320.479,320.459,320.438,320.418,320.397,320.377,320.356,320.335,320.315,320.294,320.273,320.253,320.232,320.211,320.19,320.169,320.148,320.127,320.106,320.085,320.064,320.043,320.022,320.001,319.98,319.959,319.938,319.917,319.895,319.874,319.853,319.832,319.81,319.789,319.768,319.746,319.725,319.703,319.682,319.66,319.639,319.618,319.596,319.574,319.553,319.531,319.51,319.488,319.467,319.445,319.423,319.402,319.38,319.358,319.336,319.315,319.293,319.271,319.249,319.228,319.206,319.184,319.162,319.14,319.118,319.097,319.075,319.053,319.031,319.009,318.987,318.965,318.943,318.921,318.899,318.877,318.855,318.833,318.811,318.789,318.767,318.745,318.723,318.701,318.679,318.657,318.635,318.613,318.591,318.569,318.547,318.524,318.502,318.48,318.458,318.436,318.414,318.392,318.37,318.348,318.325,318.303,318.281,318.259,318.237,318.215,318.193,318.171,318.148,318.126,318.104,318.082,318.06,318.038,318.016,317.994,317.971,317.949,317.927,317.905,317.883,317.861,317.839,317.817,317.795,317.773,317.75,317.728,317.706,317.684,317.662,317.64,317.618,317.596,317.574,317.552,317.53,317.508,317.486,317.464,317.442,317.42,317.398,317.376,317.354,317.332,317.31,317.288,317.266,317.245,317.223,317.201,317.179,317.157,317.135,317.113,317.092,317.07,317.048,317.026,317.004,316.983,316.961,316.939,316.918,316.896,316.874,316.853,316.831,316.809,316.788,316.766,316.744,316.723,316.701,316.68,316.658,316.637,316.615,316.594,316.572,316.551,316.53,316.508,316.487,316.465,316.444,316.423,316.402,316.38,316.359,316.338,316.317,316.295,316.274,316.253,316.232,316.211,316.19,316.169,316.148,316.127,316.106,316.085,316.064,316.043,316.022,316.001,315.949,315.897,315.845,315.794,315.742,315.691,315.64,315.589,315.538,315.487,315.437,315.387,315.336,315.286,315.237,315.187,315.138,315.089,315.04,314.991,314.943,314.894,314.846,314.798,314.75,314.703,314.656,314.609,314.562,314.515,314.469,314.422,314.376,314.331,314.285,314.24,314.195,314.15,314.105,314.061,314.017,313.973,313.93,313.886,313.843,313.8,313.758,313.715,313.673,313.631,313.59,313.548,313.507,313.466,313.426,313.385,313.345,313.305,313.266,313.226,313.187,313.149,313.11,313.072,313.034,312.996,312.959,312.922,312.885,312.848,312.812,312.776,312.74,312.704,312.669,312.634,312.599,312.565,312.531,312.497,312.463,312.43,312.397,312.364,312.332,312.299,312.267,312.236,312.204,312.173,312.143,312.112,312.082,312.052,312.022,311.993,311.964,311.935,311.906,311.878,311.85,311.822,311.795,311.768,311.741,311.714,311.688,311.662,311.636,311.61,311.585,311.56,311.536,311.511,311.487,311.463,311.44,311.417,311.394,311.371,311.349,311.327,311.305,311.283,311.262,311.241,311.22,311.2,311.18,311.16,311.14,311.121,311.102,311.083,311.064,311.046,311.028,311.011,310.993,310.976,310.959,310.943,310.926,310.91,310.895,310.879,310.864,310.849,310.834,310.82,310.806,310.792,310.778,310.765,310.752,310.739,310.727,310.715,310.703,310.691,310.68,310.668,310.658,310.647,310.637,310.627,310.617,310.607,310.598,310.589,310.581,310.572,310.564,310.556,310.549,310.541,310.534,310.527,310.521,310.515,310.509,310.503,310.498,310.493,310.488,310.483,310.479,310.475,310.472,310.468,310.465,310.462,310.46,310.458,310.456,310.454,310.453,310.452,310.452,310.451])
np.abs(aww-0.33*1e-3).argmin()+1
# profile at 0.33ms
time_dww.append(aww[np.abs(aww-0.33*1e-3).argmin()])
dww5=np.array([342.931,342.927,342.921,342.917,342.914,342.911,342.906,342.902,342.896,342.893,342.891,342.889,342.887,342.884,342.881,342.877,342.874,342.87,342.866,342.861,342.857,342.852,342.847,342.841,342.835,342.83,342.824,342.817,342.811,342.804,342.797,342.789,342.782,342.774,342.766,342.758,342.749,342.741,342.732,342.723,342.713,342.704,342.694,342.684,342.673,342.663,342.652,342.641,342.629,342.618,342.606,342.594,342.582,342.569,342.557,342.544,342.531,342.517,342.504,342.49,342.476,342.461,342.447,342.432,342.417,342.402,342.386,342.37,342.354,342.338,342.322,342.305,342.288,342.271,342.254,342.236,342.219,342.201,342.183,342.164,342.145,342.127,342.107,342.088,342.069,342.049,342.029,342.009,341.988,341.968,341.947,341.926,341.904,341.883,341.861,341.839,341.817,341.794,341.772,341.749,341.726,341.703,341.679,341.655,341.632,341.607,341.583,341.559,341.534,341.509,341.484,341.458,341.433,341.407,341.381,341.355,341.328,341.302,341.275,341.248,341.22,341.193,341.165,341.138,341.109,341.081,341.053,341.024,340.995,340.966,340.937,340.907,340.878,340.848,340.818,340.788,340.757,340.727,340.696,340.665,340.633,340.602,340.57,340.539,340.507,340.474,340.442,340.41,340.377,340.344,340.311,340.278,340.244,340.21,340.177,340.143,340.108,340.074,340.039,340.005,339.97,339.935,339.899,339.864,339.828,339.792,339.756,339.72,339.684,339.647,339.611,339.574,339.537,339.5,339.462,339.425,339.387,339.349,339.311,339.273,339.235,339.196,339.157,339.119,339.08,339.04,339.001,338.962,338.922,338.882,338.842,338.802,338.762,338.721,338.681,338.64,338.599,338.558,338.517,338.476,338.434,338.393,338.351,338.309,338.267,338.225,338.182,338.14,338.097,338.054,338.011,337.968,337.925,337.882,337.838,337.795,337.751,337.707,337.663,337.619,337.575,337.53,337.486,337.441,337.396,337.351,337.306,337.261,337.216,337.171,337.125,337.079,337.034,336.988,336.942,336.895,336.849,336.803,336.756,336.71,336.663,336.616,336.569,336.522,336.475,336.428,336.38,336.333,336.285,336.237,336.19,336.142,336.094,336.045,335.997,335.949,335.9,335.852,335.803,335.754,335.706,335.657,335.608,335.559,335.509,335.46,335.411,335.361,335.311,335.262,335.212,335.162,335.112,335.062,335.012,334.962,334.912,334.861,334.811,334.76,334.71,334.659,334.608,334.557,334.507,334.456,334.405,334.353,334.302,334.251,334.2,334.148,334.097,334.045,333.994,333.942,333.89,333.838,333.786,333.734,333.682,333.63,333.578,333.526,333.474,333.422,333.369,333.317,333.264,333.212,333.159,333.107,333.054,333.001,332.949,332.896,332.843,332.79,332.737,332.684,332.631,332.578,332.525,332.471,332.418,332.365,332.312,332.258,332.205,332.152,332.098,332.045,331.991,331.938,331.884,331.83,331.777,331.723,331.669,331.616,331.562,331.508,331.454,331.4,331.347,331.293,331.239,331.185,331.131,331.077,331.023,330.969,330.915,330.861,330.807,330.753,330.699,330.645,330.59,330.536,330.482,330.428,330.374,330.32,330.266,330.211,330.157,330.103,330.049,329.995,329.941,329.886,329.832,329.778,329.724,329.669,329.615,329.561,329.507,329.453,329.399,329.344,329.29,329.236,329.182,329.128,329.074,329.019,328.965,328.911,328.857,328.803,328.749,328.695,328.641,328.587,328.533,328.479,328.425,328.371,328.317,328.263,328.209,328.155,328.101,328.048,327.994,327.94,327.886,327.833,327.779,327.725,327.672,327.618,327.564,327.511,327.457,327.404,327.35,327.297,327.243,327.19,327.137,327.083,327.03,326.977,326.924,326.871,326.818,326.764,326.711,326.658,326.605,326.553,326.5,326.447,326.394,326.341,326.289,326.236,326.183,326.131,326.078,326.026,325.973,325.921,325.869,325.817,325.764,325.712,325.66,325.608,325.556,325.504,325.452,325.4,325.348,325.297,325.245,325.193,325.142,325.09,325.039,324.988,324.936,324.885,324.834,324.783,324.732,324.681,324.63,324.579,324.528,324.477,324.426,324.376,324.325,324.275,324.225,324.174,324.124,324.074,324.024,323.974,323.924,323.874,323.824,323.774,323.724,323.675,323.626,323.577,323.528,323.479,323.43,323.381,323.333,323.283,323.235,323.193,323.15,323.013,322.892,322.765,322.64,322.517,322.396,322.277,322.157,322.042,321.925,321.809,321.694,321.58,321.467,321.355,321.243,321.13,321.019,320.907,320.795,320.685,320.573,320.463,320.353,320.245,320.136,320.027,319.92,319.814,319.71,319.607,319.503,319.397,319.291,319.187,319.087,318.988,318.888,318.787,318.686,318.588,318.493,318.399,318.305,318.21,318.112,318.015,317.92,317.827,317.735,317.646,317.555,317.459,317.367,317.279,317.193,317.109,317.022,316.933,316.846,316.764,316.681,316.599,316.516,316.43,316.346,316.268,316.19,316.111,316.029,315.949,315.873,315.799,315.722,315.643,315.566,315.494,315.423,315.351,315.276,315.204,315.135,315.067,314.998,314.926,314.857,314.79,314.725,314.66,314.591,314.525,314.462,314.401,314.338,314.273,314.21,314.15,314.09,314.03,313.968,313.908,313.852,313.797,313.74,313.683,313.627,313.575,313.522,313.469,313.414,313.36,313.308,313.258,313.207,313.155,313.105,313.057,313.011,312.963,312.914,312.868,312.824,312.78,312.735,312.689,312.645,312.603,312.561,312.519,312.476,312.434,312.395,312.357,312.318,312.278,312.24,312.204,312.168,312.131,312.094,312.058,312.023,311.99,311.956,311.921,311.888,311.857,311.826,311.795,311.763,311.733,311.704,311.676,311.647,311.618,311.59,311.563,311.537,311.51,311.484,311.458,311.434,311.41,311.386,311.362,311.339,311.317,311.296,311.274,311.252,311.232,311.212,311.193,311.173,311.154,311.135,311.118,311.101,311.084,311.067,311.05,311.035,311.02,311.005,310.991,310.976,310.963,310.951,310.938,310.926,310.915,310.903,310.892,310.882,310.872,310.863,310.855,310.847,310.842,310.836])
np.abs(aww-0.22*1e-3).argmin()+1
# profile at 0.22ms
time_dww.append(aww[np.abs(aww-0.22*1e-3).argmin()])
dww6=np.array([334.852,334.848,334.842,334.839,334.836,334.834,334.83,334.826,334.822,334.819,334.818,334.817,334.815,334.813,334.811,334.808,334.806,334.803,334.8,334.797,334.793,334.79,334.786,334.782,334.778,334.774,334.769,334.764,334.76,334.755,334.749,334.744,334.738,334.733,334.727,334.721,334.715,334.708,334.702,334.695,334.688,334.681,334.674,334.666,334.659,334.651,334.643,334.635,334.626,334.618,334.609,334.6,334.591,334.582,334.573,334.563,334.553,334.543,334.533,334.523,334.513,334.502,334.492,334.481,334.47,334.458,334.447,334.435,334.424,334.412,334.4,334.387,334.375,334.362,334.35,334.337,334.324,334.31,334.297,334.283,334.27,334.256,334.242,334.227,334.213,334.198,334.184,334.169,334.154,334.138,334.123,334.108,334.092,334.076,334.06,334.044,334.027,334.011,333.994,333.977,333.96,333.943,333.926,333.908,333.891,333.873,333.855,333.837,333.819,333.8,333.782,333.763,333.744,333.725,333.706,333.686,333.667,333.647,333.628,333.608,333.588,333.567,333.547,333.526,333.506,333.485,333.464,333.443,333.421,333.4,333.378,333.357,333.335,333.313,333.29,333.268,333.246,333.223,333.2,333.177,333.154,333.131,333.108,333.084,333.061,333.037,333.013,332.989,332.965,332.941,332.916,332.892,332.867,332.842,332.817,332.792,332.767,332.741,332.716,332.69,332.664,332.638,332.612,332.586,332.56,332.533,332.507,332.48,332.453,332.426,332.399,332.372,332.344,332.317,332.289,332.262,332.234,332.206,332.178,332.15,332.121,332.093,332.064,332.035,332.007,331.978,331.949,331.919,331.89,331.861,331.831,331.801,331.772,331.742,331.712,331.682,331.651,331.621,331.591,331.56,331.529,331.499,331.468,331.437,331.406,331.374,331.343,331.311,331.28,331.248,331.217,331.185,331.153,331.121,331.088,331.056,331.024,330.991,330.959,330.926,330.893,330.86,330.827,330.794,330.761,330.728,330.695,330.661,330.628,330.594,330.56,330.526,330.492,330.458,330.424,330.39,330.356,330.322,330.287,330.253,330.218,330.183,330.148,330.113,330.079,330.043,330.008,329.973,329.938,329.902,329.867,329.831,329.796,329.76,329.724,329.688,329.653,329.617,329.58,329.544,329.508,329.472,329.435,329.399,329.362,329.326,329.289,329.252,329.216,329.179,329.142,329.105,329.068,329.031,328.993,328.956,328.919,328.881,328.844,328.806,328.769,328.731,328.694,328.656,328.618,328.58,328.542,328.504,328.466,328.428,328.39,328.352,328.313,328.275,328.237,328.198,328.16,328.121,328.083,328.044,328.005,327.967,327.928,327.889,327.85,327.811,327.772,327.733,327.694,327.655,327.616,327.577,327.538,327.499,327.459,327.42,327.381,327.341,327.302,327.262,327.223,327.183,327.144,327.104,327.065,327.025,326.985,326.945,326.906,326.866,326.826,326.786,326.746,326.706,326.667,326.627,326.587,326.547,326.507,326.466,326.426,326.386,326.346,326.306,326.266,326.226,326.185,326.145,326.105,326.065,326.024,325.984,325.944,325.903,325.863,325.823,325.782,325.742,325.702,325.661,325.621,325.58,325.54,325.499,325.459,325.418,325.378,325.338,325.297,325.257,325.216,325.176,325.135,325.094,325.054,325.013,324.973,324.932,324.892,324.851,324.811,324.77,324.73,324.689,324.649,324.608,324.568,324.527,324.487,324.446,324.406,324.365,324.325,324.284,324.244,324.203,324.163,324.122,324.082,324.042,324.001,323.961,323.92,323.88,323.84,323.799,323.759,323.719,323.678,323.638,323.598,323.558,323.517,323.477,323.437,323.397,323.357,323.316,323.276,323.236,323.196,323.156,323.116,323.076,323.036,322.996,322.956,322.916,322.876,322.836,322.797,322.757,322.717,322.677,322.638,322.598,322.558,322.519,322.479,322.439,322.4,322.36,322.321,322.281,322.242,322.203,322.163,322.124,322.085,322.045,322.006,321.967,321.928,321.889,321.85,321.81,321.771,321.733,321.694,321.655,321.616,321.577,321.538,321.5,321.461,321.422,321.384,321.345,321.307,321.268,321.23,321.191,321.153,321.115,321.076,321.038,321,320.962,320.924,320.886,320.848,320.81,320.772,320.734,320.697,320.659,320.621,320.584,320.546,320.509,320.472,320.435,320.398,320.361,320.324,320.287,320.25,320.212,320.176,320.145,320.113,320.007,319.916,319.819,319.724,319.631,319.539,319.449,319.358,319.272,319.183,319.095,319.008,318.922,318.836,318.751,318.666,318.58,318.496,318.41,318.326,318.241,318.157,318.073,317.989,317.907,317.824,317.741,317.659,317.578,317.498,317.42,317.341,317.259,317.178,317.099,317.022,316.946,316.871,316.793,316.716,316.641,316.568,316.496,316.425,316.351,316.277,316.202,316.129,316.058,315.987,315.919,315.849,315.775,315.704,315.636,315.571,315.506,315.44,315.37,315.304,315.24,315.177,315.114,315.05,314.983,314.919,314.858,314.799,314.738,314.674,314.612,314.554,314.496,314.437,314.376,314.316,314.261,314.206,314.15,314.092,314.036,313.983,313.93,313.877,313.821,313.767,313.716,313.666,313.615,313.561,313.51,313.461,313.413,313.365,313.314,313.265,313.218,313.172,313.126,313.077,313.03,312.987,312.944,312.9,312.855,312.812,312.771,312.73,312.689,312.646,312.604,312.564,312.525,312.485,312.444,312.405,312.368,312.332,312.295,312.257,312.22,312.186,312.152,312.117,312.081,312.047,312.014,311.981,311.948,311.915,311.882,311.852,311.822,311.792,311.761,311.731,311.703,311.675,311.647,311.618,311.59,311.563,311.537,311.51,311.483,311.458,311.433,311.41,311.386,311.361,311.337,311.315,311.294,311.272,311.249,311.227,311.207,311.187,311.166,311.146,311.126,311.107,311.089,311.071,311.052,311.035,311.019,311.003,310.986,310.97,310.954,310.939,310.925,310.91,310.896,310.882,310.869,310.857,310.844,310.831,310.819,310.808,310.797,310.787,310.777,310.766,310.757,310.748,310.739,310.731,310.723,310.716,310.708,310.701,310.694,310.688,310.683,310.678,310.674,310.67])
np.abs(aww-0.13*1e-3).argmin()+1
# profile at 0.13ms
time_dww.append(aww[np.abs(aww-0.13*1e-3).argmin()])
dww7=np.array([328.874,328.871,328.868,328.866,328.864,328.862,328.86,328.858,328.855,328.853,328.852,328.851,328.85,328.849,328.847,328.845,328.843,328.841,328.839,328.836,328.834,328.831,328.829,328.826,328.823,328.819,328.816,328.813,328.809,328.805,328.802,328.798,328.794,328.789,328.785,328.781,328.776,328.771,328.766,328.761,328.756,328.751,328.746,328.74,328.735,328.729,328.723,328.717,328.711,328.705,328.698,328.692,328.685,328.678,328.671,328.664,328.657,328.65,328.643,328.635,328.627,328.62,328.612,328.604,328.596,328.587,328.579,328.57,328.562,328.553,328.544,328.535,328.526,328.517,328.507,328.498,328.488,328.478,328.468,328.458,328.448,328.438,328.428,328.417,328.407,328.396,328.385,328.374,328.363,328.352,328.34,328.329,328.317,328.306,328.294,328.282,328.27,328.258,328.245,328.233,328.22,328.208,328.195,328.182,328.169,328.156,328.143,328.13,328.116,328.103,328.089,328.075,328.061,328.047,328.033,328.019,328.004,327.99,327.975,327.961,327.946,327.931,327.916,327.901,327.885,327.87,327.855,327.839,327.823,327.807,327.791,327.775,327.759,327.743,327.727,327.71,327.694,327.677,327.66,327.643,327.626,327.609,327.592,327.575,327.557,327.54,327.522,327.504,327.487,327.469,327.451,327.432,327.414,327.396,327.377,327.359,327.34,327.321,327.303,327.284,327.265,327.245,327.226,327.207,327.187,327.168,327.148,327.128,327.109,327.089,327.069,327.049,327.028,327.008,326.988,326.967,326.947,326.926,326.905,326.884,326.863,326.842,326.821,326.8,326.779,326.757,326.736,326.714,326.693,326.671,326.649,326.627,326.605,326.583,326.561,326.538,326.516,326.494,326.471,326.448,326.426,326.403,326.38,326.357,326.334,326.311,326.288,326.265,326.241,326.218,326.194,326.171,326.147,326.123,326.099,326.076,326.052,326.027,326.003,325.979,325.955,325.931,325.906,325.882,325.857,325.832,325.808,325.783,325.758,325.733,325.708,325.683,325.658,325.633,325.607,325.582,325.557,325.531,325.506,325.48,325.454,325.428,325.403,325.377,325.351,325.325,325.299,325.273,325.246,325.22,325.194,325.167,325.141,325.115,325.088,325.061,325.035,325.008,324.981,324.954,324.927,324.9,324.873,324.846,324.819,324.792,324.765,324.737,324.71,324.683,324.655,324.628,324.6,324.573,324.545,324.517,324.489,324.462,324.434,324.406,324.378,324.35,324.322,324.294,324.266,324.237,324.209,324.181,324.153,324.124,324.096,324.067,324.039,324.01,323.982,323.953,323.924,323.896,323.867,323.838,323.809,323.781,323.752,323.723,323.694,323.665,323.636,323.607,323.578,323.549,323.519,323.49,323.461,323.432,323.402,323.373,323.344,323.314,323.285,323.255,323.226,323.196,323.167,323.137,323.108,323.078,323.048,323.019,322.989,322.959,322.93,322.9,322.87,322.84,322.81,322.78,322.751,322.721,322.691,322.661,322.631,322.601,322.571,322.541,322.511,322.481,322.45,322.42,322.39,322.36,322.33,322.3,322.27,322.239,322.209,322.179,322.149,322.118,322.088,322.058,322.028,321.997,321.967,321.937,321.906,321.876,321.846,321.815,321.785,321.755,321.724,321.694,321.663,321.633,321.603,321.572,321.542,321.511,321.481,321.451,321.42,321.39,321.359,321.329,321.298,321.268,321.237,321.207,321.177,321.146,321.116,321.085,321.055,321.024,320.994,320.964,320.933,320.903,320.872,320.842,320.811,320.781,320.751,320.72,320.69,320.659,320.629,320.599,320.568,320.538,320.508,320.477,320.447,320.417,320.386,320.356,320.326,320.296,320.265,320.235,320.205,320.175,320.144,320.114,320.084,320.054,320.024,319.994,319.964,319.933,319.903,319.873,319.843,319.813,319.783,319.753,319.723,319.693,319.663,319.633,319.603,319.574,319.544,319.514,319.484,319.454,319.424,319.395,319.365,319.335,319.306,319.276,319.246,319.217,319.187,319.157,319.128,319.098,319.069,319.039,319.01,318.981,318.951,318.922,318.892,318.863,318.834,318.805,318.775,318.746,318.717,318.688,318.659,318.63,318.601,318.572,318.543,318.514,318.485,318.456,318.427,318.398,318.369,318.341,318.312,318.283,318.255,318.226,318.197,318.169,318.141,318.112,318.084,318.056,318.028,317.999,317.971,317.942,317.915,317.89,317.865,317.786,317.717,317.644,317.572,317.501,317.432,317.363,317.294,317.227,317.16,317.093,317.026,316.96,316.894,316.828,316.762,316.697,316.631,316.566,316.501,316.436,316.372,316.307,316.243,316.18,316.116,316.052,315.989,315.927,315.866,315.805,315.744,315.681,315.619,315.558,315.499,315.44,315.381,315.322,315.262,315.204,315.147,315.092,315.036,314.979,314.921,314.864,314.808,314.752,314.697,314.644,314.59,314.533,314.478,314.425,314.374,314.323,314.271,314.218,314.166,314.116,314.066,314.017,313.967,313.916,313.866,313.818,313.771,313.724,313.674,313.626,313.58,313.535,313.489,313.441,313.395,313.351,313.308,313.264,313.218,313.174,313.132,313.091,313.049,313.005,312.963,312.923,312.883,312.843,312.801,312.761,312.723,312.685,312.646,312.607,312.568,312.531,312.495,312.458,312.42,312.383,312.349,312.315,312.28,312.245,312.211,312.178,312.146,312.113,312.079,312.046,312.014,311.983,311.952,311.92,311.889,311.86,311.831,311.801,311.772,311.743,311.715,311.688,311.661,311.633,311.605,311.579,311.553,311.528,311.501,311.476,311.451,311.428,311.404,311.379,311.356,311.333,311.311,311.289,311.266,311.244,311.223,311.203,311.182,311.161,311.141,311.121,311.103,311.084,311.065,311.046,311.029,311.012,310.994,310.977,310.96,310.944,310.928,310.912,310.897,310.881,310.867,310.853,310.839,310.825,310.811,310.799,310.786,310.774,310.761,310.749,310.738,310.727,310.716,310.706,310.695,310.686,310.676,310.667,310.658,310.649,310.641,310.633,310.626,310.618,310.611,310.605,310.599,310.593,310.587,310.582,310.577,310.572,310.568,310.563,310.56,310.557,310.554,310.552,310.549])
np.abs(aww-0.6*1e-3).argmin()+1
# profile at 0.6ms
time_dww.append(aww[np.abs(aww-0.6*1e-3).argmin()])
dww8=np.array([342.12,342.12,342.121,342.121,342.121,342.12,342.119,342.118,342.116,342.114,342.112,342.109,342.106,342.103,342.099,342.096,342.092,342.088,342.084,342.08,342.075,342.07,342.065,342.06,342.054,342.049,342.043,342.036,342.03,342.023,342.016,342.009,342.002,341.994,341.986,341.978,341.97,341.962,341.953,341.944,341.935,341.925,341.916,341.906,341.896,341.885,341.875,341.864,341.853,341.842,341.83,341.818,341.806,341.794,341.782,341.769,341.756,341.743,341.73,341.717,341.703,341.689,341.675,341.66,341.646,341.631,341.616,341.6,341.585,341.569,341.553,341.537,341.52,341.504,341.487,341.47,341.453,341.435,341.417,341.399,341.381,341.363,341.344,341.325,341.306,341.287,341.267,341.248,341.228,341.208,341.187,341.167,341.146,341.125,341.104,341.082,341.061,341.039,341.017,340.995,340.972,340.95,340.927,340.904,340.88,340.857,340.833,340.809,340.785,340.761,340.736,340.711,340.687,340.661,340.636,340.61,340.585,340.559,340.533,340.506,340.48,340.453,340.426,340.399,340.372,340.344,340.316,340.288,340.26,340.232,340.203,340.175,340.146,340.117,340.087,340.058,340.028,339.998,339.968,339.938,339.908,339.877,339.846,339.815,339.784,339.753,339.721,339.69,339.658,339.626,339.593,339.561,339.528,339.495,339.462,339.429,339.396,339.362,339.329,339.295,339.261,339.227,339.192,339.158,339.123,339.088,339.053,339.018,338.982,338.947,338.911,338.875,338.839,338.803,338.766,338.73,338.693,338.656,338.619,338.582,338.545,338.507,338.469,338.431,338.393,338.355,338.317,338.278,338.24,338.201,338.162,338.123,338.084,338.044,338.005,337.965,337.925,337.885,337.845,337.805,337.764,337.724,337.683,337.642,337.601,337.56,337.519,337.478,337.436,337.394,337.352,337.31,337.268,337.226,337.184,337.141,337.099,337.056,337.013,336.97,336.927,336.884,336.84,336.797,336.753,336.709,336.665,336.621,336.577,336.533,336.488,336.444,336.399,336.355,336.31,336.265,336.22,336.174,336.129,336.084,336.038,335.992,335.947,335.901,335.855,335.809,335.762,335.716,335.67,335.623,335.577,335.53,335.483,335.436,335.389,335.342,335.295,335.247,335.2,335.153,335.105,335.057,335.009,334.962,334.914,334.865,334.817,334.769,334.721,334.672,334.624,334.575,334.527,334.478,334.429,334.38,334.331,334.282,334.233,334.183,334.134,334.085,334.035,333.986,333.936,333.886,333.837,333.787,333.737,333.687,333.637,333.587,333.536,333.486,333.436,333.385,333.335,333.285,333.234,333.183,333.133,333.082,333.031,332.98,332.929,332.878,332.827,332.776,332.725,332.674,332.623,332.571,332.52,332.468,332.417,332.365,332.314,332.262,332.211,332.159,332.107,332.056,332.004,331.952,331.9,331.848,331.796,331.744,331.692,331.64,331.588,331.536,331.483,331.431,331.379,331.327,331.274,331.222,331.17,331.117,331.065,331.012,330.96,330.907,330.855,330.802,330.75,330.697,330.645,330.592,330.539,330.487,330.434,330.381,330.329,330.276,330.223,330.17,330.118,330.065,330.012,329.959,329.906,329.854,329.801,329.748,329.695,329.642,329.589,329.536,329.484,329.431,329.378,329.325,329.272,329.219,329.166,329.114,329.061,329.008,328.955,328.902,328.849,328.796,328.744,328.691,328.638,328.585,328.532,328.48,328.427,328.374,328.321,328.269,328.216,328.163,328.111,328.058,328.005,327.953,327.9,327.847,327.795,327.742,327.69,327.637,327.585,327.532,327.48,327.427,327.375,327.323,327.27,327.218,327.166,327.113,327.061,327.009,326.957,326.905,326.853,326.801,326.749,326.697,326.645,326.593,326.541,326.489,326.437,326.385,326.333,326.282,326.23,326.178,326.127,326.075,326.024,325.972,325.921,325.87,325.818,325.767,325.716,325.665,325.613,325.562,325.511,325.46,325.409,325.358,325.308,325.257,325.206,325.155,325.105,325.054,325.004,324.953,324.903,324.852,324.802,324.752,324.702,324.651,324.601,324.551,324.501,324.451,324.402,324.352,324.302,324.253,324.203,324.153,324.104,324.055,324.005,323.956,323.907,323.858,323.809,323.76,323.711,323.662,323.613,323.565,323.516,323.467,323.419,323.371,323.322,323.274,323.226,323.178,323.13,323.082,323.034,322.987,322.939,322.89,322.842,322.725,322.606,322.488,322.371,322.254,322.137,322.02,321.904,321.788,321.673,321.558,321.445,321.332,321.221,321.109,320.999,320.888,320.778,320.669,320.56,320.451,320.343,320.236,320.129,320.023,319.918,319.813,319.709,319.606,319.503,319.4,319.299,319.198,319.097,318.997,318.898,318.799,318.701,318.604,318.508,318.412,318.316,318.221,318.126,318.033,317.94,317.848,317.756,317.665,317.575,317.485,317.396,317.308,317.221,317.134,317.047,316.96,316.875,316.792,316.708,316.625,316.542,316.46,316.378,316.298,316.219,316.139,316.06,315.982,315.906,315.83,315.753,315.678,315.603,315.529,315.457,315.384,315.311,315.24,315.17,315.1,315.03,314.961,314.893,314.826,314.759,314.693,314.627,314.562,314.498,314.435,314.371,314.309,314.247,314.186,314.126,314.066,314.006,313.947,313.89,313.833,313.776,313.719,313.664,313.609,313.555,313.501,313.448,313.395,313.343,313.292,313.241,313.191,313.141,313.093,313.044,312.996,312.949,312.902,312.856,312.811,312.766,312.721,312.678,312.635,312.592,312.55,312.508,312.467,312.426,312.387,312.347,312.308,312.27,312.232,312.195,312.158,312.122,312.086,312.051,312.017,311.982,311.949,311.916,311.883,311.851,311.82,311.789,311.758,311.728,311.699,311.669,311.641,311.612,311.585,311.558,311.531,311.505,311.479,311.454,311.43,311.405,311.381,311.358,311.335,311.313,311.291,311.269,311.248,311.228,311.207,311.188,311.168,311.15,311.131,311.113,311.096,311.079,311.062,311.046,311.03,311.015,311,310.986,310.972,310.958,310.945,310.933,310.921,310.909,310.898,310.887,310.877,310.868,310.859,310.852,310.845,310.84,310.836,310.835])
np.abs(aww-1*1e-3).argmin()+1
# profile at 1ms
time_dww.append(aww[np.abs(aww-1*1e-3).argmin()])
dww9=np.array([334.978,334.979,334.98,334.98,334.98,334.98,334.979,334.979,334.978,334.977,334.975,334.973,334.971,334.968,334.966,334.963,334.961,334.958,334.954,334.951,334.948,334.944,334.94,334.936,334.932,334.928,334.923,334.918,334.913,334.908,334.903,334.898,334.892,334.886,334.88,334.874,334.868,334.861,334.855,334.848,334.841,334.834,334.826,334.819,334.811,334.803,334.795,334.787,334.779,334.77,334.761,334.752,334.743,334.734,334.725,334.715,334.705,334.695,334.685,334.675,334.665,334.654,334.643,334.632,334.621,334.61,334.598,334.587,334.575,334.563,334.551,334.538,334.526,334.513,334.5,334.487,334.474,334.461,334.447,334.434,334.42,334.406,334.391,334.377,334.363,334.348,334.333,334.318,334.303,334.288,334.272,334.257,334.241,334.225,334.209,334.192,334.176,334.159,334.142,334.125,334.108,334.091,334.074,334.056,334.038,334.02,334.002,333.984,333.966,333.947,333.929,333.91,333.891,333.872,333.852,333.833,333.813,333.793,333.774,333.753,333.733,333.713,333.692,333.672,333.651,333.63,333.609,333.587,333.566,333.544,333.523,333.501,333.479,333.457,333.434,333.412,333.389,333.367,333.344,333.321,333.297,333.274,333.251,333.227,333.203,333.179,333.155,333.131,333.107,333.082,333.058,333.033,333.008,332.983,332.958,332.933,332.907,332.882,332.856,332.83,332.804,332.778,332.752,332.726,332.699,332.673,332.646,332.619,332.592,332.565,332.537,332.51,332.483,332.455,332.427,332.399,332.371,332.343,332.315,332.286,332.258,332.229,332.2,332.172,332.143,332.113,332.084,332.055,332.025,331.996,331.966,331.936,331.906,331.876,331.846,331.816,331.785,331.755,331.724,331.693,331.662,331.631,331.6,331.569,331.538,331.506,331.475,331.443,331.411,331.38,331.348,331.316,331.283,331.251,331.219,331.186,331.154,331.121,331.088,331.055,331.022,330.989,330.956,330.923,330.89,330.856,330.823,330.789,330.755,330.721,330.687,330.653,330.619,330.585,330.551,330.516,330.482,330.447,330.413,330.378,330.343,330.308,330.273,330.238,330.203,330.167,330.132,330.097,330.061,330.026,329.99,329.954,329.918,329.882,329.846,329.81,329.774,329.738,329.702,329.665,329.629,329.592,329.556,329.519,329.482,329.445,329.409,329.372,329.335,329.298,329.26,329.223,329.186,329.148,329.111,329.074,329.036,328.998,328.961,328.923,328.885,328.847,328.809,328.771,328.733,328.695,328.657,328.619,328.581,328.542,328.504,328.465,328.427,328.388,328.35,328.311,328.272,328.234,328.195,328.156,328.117,328.078,328.039,328,327.961,327.922,327.883,327.843,327.804,327.765,327.726,327.686,327.647,327.607,327.568,327.528,327.489,327.449,327.409,327.37,327.33,327.29,327.25,327.21,327.171,327.131,327.091,327.051,327.011,326.971,326.931,326.891,326.85,326.81,326.77,326.73,326.69,326.649,326.609,326.569,326.528,326.488,326.448,326.407,326.367,326.327,326.286,326.246,326.205,326.165,326.124,326.083,326.043,326.002,325.962,325.921,325.881,325.84,325.799,325.759,325.718,325.677,325.637,325.596,325.555,325.514,325.474,325.433,325.392,325.352,325.311,325.27,325.229,325.189,325.148,325.107,325.066,325.025,324.985,324.944,324.903,324.862,324.822,324.781,324.74,324.699,324.659,324.618,324.577,324.536,324.496,324.455,324.414,324.373,324.333,324.292,324.251,324.211,324.17,324.129,324.089,324.048,324.007,323.967,323.926,323.886,323.845,323.804,323.764,323.723,323.683,323.642,323.602,323.561,323.521,323.481,323.44,323.4,323.359,323.319,323.279,323.238,323.198,323.158,323.118,323.077,323.037,322.997,322.957,322.917,322.877,322.837,322.797,322.757,322.717,322.677,322.637,322.597,322.557,322.517,322.478,322.438,322.398,322.358,322.319,322.279,322.24,322.2,322.161,322.121,322.082,322.042,322.003,321.963,321.924,321.885,321.846,321.806,321.767,321.728,321.689,321.65,321.611,321.572,321.533,321.494,321.456,321.417,321.378,321.339,321.301,321.262,321.224,321.185,321.147,321.108,321.07,321.032,320.993,320.955,320.917,320.879,320.841,320.803,320.765,320.727,320.689,320.651,320.613,320.576,320.538,320.5,320.462,320.425,320.387,320.35,320.312,320.275,320.238,320.199,320.161,320.071,319.978,319.887,319.796,319.705,319.614,319.524,319.434,319.343,319.253,319.164,319.075,318.987,318.899,318.811,318.724,318.638,318.551,318.466,318.38,318.295,318.211,318.127,318.043,317.96,317.878,317.796,317.714,317.633,317.551,317.471,317.391,317.312,317.233,317.155,317.077,316.999,316.921,316.845,316.769,316.693,316.618,316.542,316.467,316.394,316.321,316.248,316.176,316.105,316.033,315.962,315.891,315.822,315.754,315.684,315.616,315.547,315.479,315.413,315.347,315.281,315.215,315.15,315.086,315.023,314.96,314.896,314.833,314.771,314.711,314.65,314.59,314.53,314.47,314.412,314.354,314.296,314.238,314.181,314.126,314.07,314.014,313.959,313.905,313.852,313.798,313.745,313.693,313.641,313.59,313.539,313.489,313.439,313.389,313.341,313.293,313.245,313.197,313.15,313.105,313.059,313.013,312.968,312.923,312.88,312.836,312.793,312.75,312.708,312.667,312.626,312.585,312.545,312.505,312.466,312.428,312.389,312.351,312.314,312.277,312.241,312.204,312.168,312.133,312.099,312.065,312.031,311.997,311.965,311.932,311.901,311.869,311.837,311.807,311.777,311.747,311.717,311.688,311.66,311.632,311.604,311.577,311.55,311.524,311.498,311.472,311.447,311.422,311.398,311.374,311.351,311.327,311.304,311.282,311.26,311.239,311.218,311.197,311.176,311.157,311.137,311.118,311.099,311.081,311.063,311.046,311.028,311.011,310.995,310.979,310.963,310.948,310.933,310.918,310.904,310.891,310.877,310.864,310.851,310.839,310.828,310.816,310.805,310.794,310.784,310.774,310.765,310.756,310.747,310.739,310.731,310.724,310.718,310.712,310.707,310.703,310.7,310.697,310.696,310.696])

all_dww = np.array([dww,dww1,dww2,dww3,dww4,dww5,dww6,dww7,dww8,dww9])
# all_dww-=273.15
all_dww-=300
all_dww = np.array([y for x,y in sorted(zip(time_dww, all_dww))])
time_dww_sort = [x for x,y in sorted(zip(time_dww, all_dww))]


# simulated very very weak pulses
# heat_flux = 0.1e8e^(-(r^2)/(2*(0.005^2)))*(0.0917*0.1+0.5*0.7*e^(-((t-0.00033-1)^2)/(2*(0.000144^2)))+0.5*0.208*e^(-((t-0.000457-1)^2)/(2*(0.000218^2))))

awww=np.array([0,0.0000599623,0.000131965,0.000218391,0.000322104,0.000329971,0.000454426,0.000603676,0.000782847,0.000997901,0.00125587,0.00156546,0.00171006,0.00208151,0.00252736,0.00306225,0.00366223,0.00426233,0.00486231,0.00546229,0.00606227,0.00666225,0.00726223,0.00786233,0.00846231,0.00906229,0.00966227,0.0102623,0.0108622,0.0114623,0.0120623,0.0126623,0.0132623,0.0138622,0.0144622,0.0150623,0.0156623,0.0162623,0.0168623,0.0174622,0.0180622,0.0186623,0.0192623,0.0198623,0.0204623,0.0210623,0.0216622,0.0222623,0.0228623,0.0234623,0.0240623,0.0246623,0.0252622,0.0258622,0.0264623,0.0270623,0.0276623,0.0282623,0.0288622,0.0294622,0.03])
bwww=np.array([304.778,305.132,305.771,306.968,308.48,308.585,309.119,308.422,307.59,306.992,306.612,306.349,306.252,306.081,305.938,305.816,305.715,305.637,305.575,305.524,305.481,305.444,305.413,305.385,305.36,305.338,305.318,305.3,305.284,305.268,305.254,305.241,305.229,305.218,305.208,305.198,305.189,305.18,305.172,305.164,305.156,305.149,305.142,305.136,305.13,305.124,305.118,305.113,305.108,305.103,305.098,305.093,305.089,305.085,305.08,305.076,305.072,305.069,305.065,305.062,305.058])

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('very very weak pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
axx1, = ax1.plot(awww*1e3,bwww,'b')
axx2, = ax2.plot(awww*1e3,1/8*power_input(awww,0),'r')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 heat flux [W/m2]', color=axx2.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('Comparison between strong (--) and weak (-) pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3.spines["right"].set_position(("axes", 1.1))
ax3.spines["right"].set_visible(True)
axx1, = ax1.plot(a*1e3,b,'--b')
axx1, = ax1.plot(awww*1e3,bwww,'b')
axx2, = ax2.plot(a*1e3,b-b[0],'--r')
axx2, = ax2.plot(awww*1e3,bwww-bwww[0],'r')
interp = interp1d(awww,bwww)(a)
axx2, = ax2.plot(a*1e3,(b-b[0])-(interp-bwww[0]),':r')
axx3, = ax3.plot(a*1e3,power_input(a,0),'--g')
axx3, = ax3.plot(awww*1e3,1/8/5*power_input(awww,0),'g')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 dT [K]', color=axx2.get_color())  # we already handled the x-label with ax1
ax3.set_ylabel('r=0 heat flux [W/m2]', color=axx3.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax3.tick_params(axis='y', labelcolor=axx3.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


plt.figure(figsize=(20, 10))
plt.plot(awww*1e3,bwww,color=color[0],label='full simulated temperature')
time_after_peak=1.5e-3
plt.plot([awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bwww.min(),bwww.max()],'--k')
bds = [[20,1e-3,3e-1,0],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
guess=[bwww[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]), awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():], bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]-np.mean(bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]))**2)))
plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1],label='double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
plt.title('very very weak pulse')
# plt.ylim(bottom=b.min()*0.9,top=b.max()*1.2)
plt.xlim(right=10)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_energy1 = []
all_energy2 = []
all_energy3 = []
all_energy4 = []
all_energy5 = []
all_energy6 = []
for time_after_peak in np.array([0.5,1,1.5,2,3,5])*1e-3:
	plt.figure(figsize=(20, 10))
	plt.plot(awww*1e3,bwww,color=color[0],linewidth=4,label='full simulated temperature')
	# plt.plot(a1*1e3,b1,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000616*1e3,1.34e-05*1e3,(13.25+0.0917*0.1)*8e8))
	# plt.plot(a2*1e3,b2,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(1e-07*1e3,0.00108*1e3,(0.1678+0.0917*0.1)*8e8))
	# plt.plot(a3*1e3,b3,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000762*1e3,1.66e-05*1e3,(10.31+0.0917*0.1)*8e8))
	# bds = [[20,1e-3,1e-4,1],[np.inf,np.inf,1e-3,1.0005]]
	# bds = [[b[0]-1,1e-3,1e-6,0],[b[0]+1,np.inf,1,a[np.abs(a-(a[bwww.argmax()]+1.5e-3)).argmin()]]]
	# time_after_peak = 5e-3
	plt.title('very very weak pulse temperature profile used from ts=%.3gms after the temperature peak' %(time_after_peak*1e3))
	bds1 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess1=[bwww[0],1,0.5,0.]
	bds2 = [[20,1e-3,1e-8,0],[np.inf,np.inf,1e-6,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess2=[bwww[0],1,1e-6,0.]
	bds3 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,1e-7]]
	guess3=[bwww[0],1,0.5,0.]
	bds4 = [[20,1e-3,0.01,0],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess4=[bwww[0],1,1,0.]
	bds5 = [[20,1e-3,0.1,0],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess5=[bwww[0],1,1,0.]
	bds6 = [[20,1e-3,1e-2,0.2*1e-3],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess6=[bwww[0],1,0.5,0.6*1e-3]
	# plt.plot([1.5e-3]*2,[b.min(),b.max()],'--k')
	plt.plot([awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bwww.min(),bwww.max()],'--k')
	for i,arg in enumerate([[bds1,guess1],[bds2,guess2],[bds3,guess3],[bds4,guess4],[bds5,guess5],[bds6,guess6]]):
		bds,guess = arg
		# print(guess)
		fit = curve_fit(semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]), awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():], bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
		fit_wit_errors = correlated_values(fit[0],fit[1])
		energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
		pulse_duration_ms = 1e3*(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
		R2 = 1-np.sum(((bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]-np.mean(bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]))**2)))
		# print(fit_wit_errors)
		if i==0:
			all_energy1.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1],label='free double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1])
		elif i==1:
			all_energy2.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus<1e-6)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==2:
			all_energy3.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0<1e-7)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==3:
			all_energy4.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.01)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==4:
			all_energy5.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.1)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==5:
			all_energy6.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0>0.2)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
	# guess = [1000,1e8,1e-3,0]
	# bds=[[20,0,0,0],[np.inf,np.inf,np.inf,np.inf]]
	# fit = curve_fit(exponential_decay, a[np.abs(a-(a[bwww.argmax()]+time_after_peak)).argmin():], bwww[np.abs(a-(a[bwww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	# fit_wit_errors = correlated_values(fit[0],fit[1])
	# plt.plot(a*1e3,exponential_decay(a,*fit[0]),'--',label='exponential decay')

	plt.plot(awww*1e3,power_input(awww,0)/np.max(power_input(aw,0))*(bwww.max()-bwww.min())+bwww.min(),':',color=color[i+2],label='power input (not in scale), energy input~1.38J')
	plt.legend(loc='best', fontsize='small')
	plt.ylim(top=(bwww.max()-bwww.min())*1.4+bwww.min())
	plt.xlim(left=-1,right=15)
	plt.xlabel('time [ms]')
	plt.ylabel('temperature [K]')
	plt.grid()
	figure_index+=1
	plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	plt.close('all')
	# plt.pause(0.01)

all_energy1 = np.array(all_energy1)
all_energy2 = np.array(all_energy2)
all_energy3 = np.array(all_energy3)
all_energy4 = np.array(all_energy4)
all_energy5 = np.array(all_energy5)
all_energy6 = np.array(all_energy6)
nominal_energy = 5.5/4/5	# J
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy1)/nominal_energy,yerr=std_devs(all_energy1)/nominal_energy,color=color[1],label='free double root')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy2)/nominal_energy,yerr=std_devs(all_energy2)/nominal_energy,color=color[2],linestyle='--',label='constrained (taus<1e-6)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy3)/nominal_energy,yerr=std_devs(all_energy3)/nominal_energy,color=color[3],linestyle='--',label='constrained (t0<1e-7)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy4)/nominal_energy,yerr=std_devs(all_energy4)/nominal_energy,color=color[4],linestyle='--',label='constrained (taus>0.01)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy5)/nominal_energy,yerr=std_devs(all_energy5)/nominal_energy,color=color[5],linestyle='--',label='constrained (taus>0.1)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy6)/nominal_energy,yerr=std_devs(all_energy6)/nominal_energy,color=color[6],linestyle='--',label='constrained (t0>0.2)')
plt.plot([0,5],[1]*2,'--k')
plt.plot([1.5]*2,[1,1.1],'--k')
plt.xlabel('start of profile used after temperature peak (ts) [ms]')
plt.ylabel('fitted/delivered energy [au]')
plt.title('very very weak pulse')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_all_energy1.append(all_energy1/nominal_energy)



all_all_energy1 = np.array(all_all_energy1)
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([22,5.5,5.5/4,5.5/4/5]),nominal_values(all_all_energy1[:,0]),yerr=std_devs(all_all_energy1[:,0]),linestyle='--',color=color[1],label='used data 0.5ms after the peak')
plt.errorbar(np.array([22,5.5,5.5/4,5.5/4/5]),nominal_values(all_all_energy1[:,2]),yerr=std_devs(all_all_energy1[:,2]),color=color[2],label='1.5ms')
plt.errorbar(np.array([22,5.5,5.5/4,5.5/4/5]),nominal_values(all_all_energy1[:,-1]),yerr=std_devs(all_all_energy1[:,-1]),linestyle='--',color=color[3],label='used data 5ms after the peak')
plt.plot([5.5/4/5,22],[1]*2,'--k')
plt.xlabel('Energy delivered to the target [J]')
plt.ylabel('fitted/delivered energy [au]')
plt.title('Comparison of estimated to delivered energy with pulse strength')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')









plt.figure(figsize=(20, 10))
temp1 = np.sum((all_d.T>all_d.max(axis=1)*0.8).T * area,axis=(1))
temp2 = np.sum(((all_d-all_d[0]).T>(all_d-all_d[0]).max(axis=1)*0.5).T * area,axis=(1))
plt.plot(time_d_sort,temp1/np.sum(area),color=color[0],label='E=22J')
plt.plot(time_d_sort,temp2/np.sum(area),'--',color=color[0])
plt.plot([a[b.argmax()]]*2,[0,(temp2/np.sum(area)).max()],':',color=color[0])
temp1 = np.sum((all_dw.T>all_dw.max(axis=1)*0.8).T * area,axis=(1))
temp2 = np.sum(((all_dw-all_dw[0]).T>(all_dw-all_dw[0]).max(axis=1)*0.5).T * area,axis=(1))
plt.plot(time_dw_sort,temp1/np.sum(area),color=color[1],label='E=5.5J')
plt.plot(time_dw_sort,temp2/np.sum(area),'--',color=color[1])
plt.plot([aw[bw.argmax()]]*2,[0,(temp2/np.sum(area)).max()],':',color=color[1])
temp1 = np.sum((all_dww.T>all_dww.max(axis=1)*0.8).T * area,axis=(1))
temp2 = np.sum(((all_dww-all_dww[0]).T>(all_dww-all_dww[0]).max(axis=1)*0.5).T * area,axis=(1))
plt.plot(time_dww_sort,temp1/np.sum(area),color=color[2],label='E=1.38J')
plt.plot(time_dww_sort,temp2/np.sum(area),'--',color=color[2])
plt.plot([aww[bww.argmax()]]*2,[0,(temp2/np.sum(area)).max()],':',color=color[1])
plt.legend(loc='best', fontsize='small')
plt.grid()
plt.xlabel('time from start of the pulse [ms]')
plt.ylabel('area/total area [au]')
plt.title('Area with '+r'$(T-T_{amb})>(T-T_{amb})_{max} * 0.8$'+' (-) and '+r'$T-T_{ss}>(T-T_{ss})_{max} * 0.5$'+' (--), (:) peak temperature')
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')








#
#
