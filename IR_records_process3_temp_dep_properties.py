import numpy as np
exec(open("/home/ffederic/work/analysis_scripts/scripts/preamble_import_pc.py").read())
# import matplotlib.pyplot as plt
#import .functions
os.chdir('/home/ffederic/work/Collaboratory/test/experimental_data')
from functions.spectools import rotate,do_tilt, binData, get_angle, get_tilt,get_angle_2
from functions.Calibrate import do_waveL_Calib, do_Intensity_Calib
from functions.fabio_add import find_nearest_index,multi_gaussian,all_file_names,load_dark,find_index_of_file,get_metadata,movie_from_data,get_angle_no_lines,do_tilt_no_lines,four_point_transform,fix_minimum_signal,fix_minimum_signal2,get_bin_and_interv_no_lines,examine_current_trace
from functions.GetSpectrumGeometry import getGeom
from functions.SpectralFit import doSpecFit_single_frame
from functions.GaussFitData import doLateralfit_time_tependent
import collections

import os,sys
from PIL import Image
import xarray as xr
import pandas as pd
import copy
from uncertainties.unumpy import exp,nominal_values,std_devs,erf
from uncertainties import ufloat,unumpy,correlated_values
from scipy.optimize import curve_fit
from scipy import interpolate
from scipy.signal import find_peaks, peak_prominences as get_proms
from multiprocessing import Pool,cpu_count
number_cpu_available = cpu_count()
print('Number of cores available: '+str(number_cpu_available))


os.chdir('/home/ffederic/work/Collaboratory/test/experimental_data/functions')
print(os.path.abspath(os.getcwd()))
import pyradi.ryptw as ryptw

fdir = '/home/ffederic/work/Collaboratory/test/experimental_data'
df_log = pd.read_csv('/home/ffederic/work/Collaboratory/test/experimental_data/functions/Log/shots_3.csv',index_col=0)
df_settings = pd.read_csv('/home/ffederic/work/Collaboratory/test/experimental_data/functions/Log/settings_3.csv',index_col=0)

exec(open("/home/ffederic/work/Collaboratory/test/experimental_data/IR_records_process_preamble.py").read())
figure_index=0

# molybdenum data
thermal_conductivity = TZM_thermal_conductivity_interp	# W/mK
heat_capacity = TZM_heat_capacity_interp	# J/kg k
density = TZM_density_interp(20)	# kg/m3
de=0.05
color = ['b', 'r', 'm', 'y', 'g', 'c', 'slategrey', 'darkorange', 'lime', 'pink', 'gainsboro', 'paleturquoise', 'teal', 'olive']


def exponential_decay(time,*args):
	out = args[1]*np.exp(-(time-args[3])/args[2]) + args[0]
	return out

def semi_infinite_sink_full_increase_K(max_total_time):
	def function(time,*args):
		out = (args[1]/((max_total_time-args[3])*args[2]))*2/((np.pi*thermal_conductivity(args[0]-273.15)*heat_capacity(args[0]-273.15)*density)**0.5) *((time-args[3])**0.5) + args[0]
		# print(out)
		return np.nanmax([np.ones_like(out)*args[0],out],axis=0)
	return function

def semi_infinite_sink_full_decrease_K(max_total_time):
	def function(time,*args):
		out = (args[1]/((max_total_time-args[3])*args[2]))*2/((np.pi*thermal_conductivity(args[0]-273.15)*heat_capacity(args[0]-273.15)*density)**0.5) *((time-args[3])**0.5 - (time-args[3]-(max_total_time-args[3])*args[2])**0.5) + args[0]
		# print(out)
		return np.nanmax([np.zeros_like(out),out],axis=0)
	return function

def gaussian_1D_fitting(spatial_coord,*args):
	out = args[1]*np.exp(- (spatial_coord**2)/(2*(args[2]**2)) ) + args[0]
	return out

def power_input(time,r):
	out = 8e8*np.exp(-(r**2)/(2*(0.005**2)))*(0.0917*0.1+0.5*0.7*np.exp(-((time-0.00033)**2)/(2*(0.000144**2)))+0.5*0.208*np.exp(-((time-0.000457)**2)/(2*(0.000218**2))))
	return out

# simulated strong pulses
# heat_flux = 8e8e^(-(r^2)/(2*(0.005^2)))*(0.0917*0.1+0.5*0.7*e^(-((t-0.00033-1)^2)/(2*(0.000144^2)))+0.5*0.208*e^(-((t-0.000457-1)^2)/(2*(0.000218^2))))

a=np.array([0,0.0000300407,0.0000629425,0.0000909567,0.000114441,0.000134826,0.000157356,0.00017345,0.000191212,0.000205636,0.000221491,0.000234962,0.000249863,0.000266194,0.000279784,0.000294566,0.000311017,0.000329018,0.000329971,0.00034976,0.000371575,0.000395536,0.000421882,0.000450849,0.000482798,0.000517845,0.000556469,0.000598908,0.00063622,0.000677347,0.000722527,0.000772238,0.000826955,0.000887155,0.000953317,0.00102603,0.00110614,0.00119424,0.00129104,0.00139761,0.00151491,0.0016439,0.00171006,0.0018518,0.00200784,0.0021795,0.00236833,0.00257599,0.0028044,0.00305569,0.00333214,0.00363624,0.00397062,0.00433862,0.00474334,0.00518846,0.00567818,0.00621688,0.00680935,0.00740182,0.00799441,0.00858688,0.00917947,0.00977194,0.0103645,0.010957,0.0115496,0.0121421,0.0127347,0.0133271,0.0139197,0.0145122,0.0151048,0.0156972,0.0162898,0.0168823,0.0174749,0.0180674,0.01866,0.0192524,0.019845,0.0204375,0.0210301,0.0216225,0.0222151,0.0228076,0.0234002,0.0239927,0.0245852,0.0251777,0.0257703,0.0263628,0.0269554,0.0275478,0.0281404,0.0287329,0.0293255,0.029918,0.03])
b=np.array([690.94,704.437,718.788,733.917,749.178,764.69,784.35,799.761,818.131,833.891,852.019,867.924,885.715,905.361,921.429,938.641,956.721,975.186,976.266,994.176,1010.87,1024.98,1035.18,1040.21,1039.14,1031.71,1018.52,1001,985.095,968.163,950.93,933.912,917.439,901.782,887.221,873.991,862.173,851.664,842.247,833.704,825.866,818.615,815.198,808.958,803.079,797.532,792.291,787.33,782.63,778.173,773.942,769.923,766.103,762.471,759.015,755.725,752.592,749.607,746.763,744.27,742.063,740.092,738.318,736.71,735.245,733.903,732.667,731.525,730.464,729.476,728.553,727.688,726.874,726.108,725.384,724.699,724.05,723.433,722.845,722.285,721.751,721.24,720.75,720.281,719.831,719.399,718.983,718.582,718.196,717.823,717.464,717.116,716.78,716.455,716.14,715.835,715.538,715.251,715.211])
a1=np.array([0,0,0,0,0,0,0.00000298023,0.00000596046,0.0000089407,0.0000119209,0.0000149012,0.0000177622,0.0000207424,0.0000237226,0.0000267029,0.0000296831,0.0000326633,0.0000356436,0.0000386238,0.000041604,0.0000445843,0.0000475645,0.0000505447,0.0000534058,0.000056386,0.0000593662,0.0000623465,0.0000653267,0.0000683069,0.0000712872,0.0000742674,0.0000772476,0.0000802278,0.0000832081,0.0000861883,0.0000890493,0.0000920296,0.0000950098,0.00009799,0.00010097,0.000103951,0.000106931,0.000109911,0.000112891,0.000115871,0.000118852,0.000121713,0.000124693,0.000127673,0.000130653,0.000133634,0.000136614,0.000139594,0.000142574,0.000145555,0.000148535,0.000151515,0.000154495,0.000157356,0.000160336,0.000163317,0.000166297,0.000169277,0.000172257,0.000175238,0.000178218,0.000181198,0.000184178,0.000187159,0.000190139,0.000193,0.00019598,0.00019896,0.00020194,0.000204921,0.000207901,0.000210881,0.000213862,0.000216842,0.000219822,0.000222802,0.000225663,0.000228643,0.000231624,0.000234604,0.000237584,0.000240564,0.000243545,0.000246525,0.000249505,0.000252485,0.000255465,0.000258446,0.000261307,0.000264287,0.000267267,0.000270247,0.000273228,0.000276208,0.000279188,0.000282168,0.000285149,0.000288129,0.000291109,0.000294089,0.00029695,0.000347018,0.000396967,0.000447035,0.000496983,0.000547051,0.000597,0.000646949,0.000697017,0.000746965,0.000797033,0.000846982,0.00089705,0.000946999,0.000996947,0.00104702,0.00109696,0.00114703,0.00119698,0.00124705,0.001297,0.00134695,0.00139701,0.00144696,0.00149703,0.00154698,0.00159705,0.001647,0.00169694,0.00174701,0.00179696,0.00184703,0.00189698,0.00194704,0.00199699,0.00204694,0.00209701,0.00214696,0.00219703,0.00224698,0.00229704,0.00234699,0.00239694,0.00244701,0.00249696,0.00254703,0.00259697,0.00264704,0.00269699,0.00274706,0.00279701,0.00284696,0.00289702,0.00294697,0.00299704,0.00304699,0.00309706,0.00314701,0.00319696,0.00324702,0.00329697,0.00334704,0.00339699,0.00344706,0.00349701,0.00354695,0.00359702,0.00364697,0.00369704,0.00374699,0.00379705,0.003847,0.00389695,0.00394702,0.00399697,0.00404704,0.00409699,0.00414705,0.004197,0.00424695,0.00429702,0.00434697,0.00439703,0.00444698,0.00449705,0.004547,0.00459695,0.00464702,0.00469696,0.00474703,0.00479698,0.00484705,0.004897,0.00494695,0.00499701,0.00504696,0.00509703,0.00514698,0.00519705,0.005247,0.00529695,0.00559699,0.00589705,0.00619698,0.00649703,0.00679696,0.00709701,0.00739706,0.00769699,0.00799704,0.00829697,0.00859702,0.00889695,0.009197,0.00949705,0.00979698,0.010097,0.010397,0.010697,0.0109971,0.011297,0.011597,0.011897,0.012197,0.0124969,0.012797,0.0130971,0.013397,0.013697,0.013997,0.014297,0.0145971,0.014897,0.015197,0.015497,0.015797,0.0160969,0.016397,0.0166971,0.016997,0.017297,0.017597,0.017897,0.0181969,0.018497,0.018797,0.019097,0.019397,0.019697,0.019997,0.0202971,0.020597,0.020897,0.021197,0.021497,0.0217969,0.022097,0.022397,0.022697,0.022997,0.023297,0.023597,0.023897,0.024197,0.024497,0.024797,0.025097,0.0253969,0.025697,0.025997,0.026297,0.026597,0.0268969,0.027197,0.027497,0.027797,0.028097,0.028397,0.028697,0.0289969,0.029297,0.029597,0.029897,0.030197,0.0304969,0.030797,0.0310971,0.031397,0.031697,0.031997,0.032297,0.0325969,0.032897,0.033197,0.033497,0.033797,0.034097,0.034397,0.0346971,0.034997,0.035297])
b1=np.array([690.94,690.94,690.94,690.94,690.94,690.94,740.964,766.925,786.097,801.996,815.877,828.355,839.785,850.392,860.333,869.719,878.634,887.143,895.296,903.134,910.692,917.997,925.073,931.941,938.618,945.118,951.456,957.642,963.688,969.602,975.393,981.067,986.633,992.095,997.46,1002.73,1007.92,1013.02,1018.04,1022.98,1027.85,1032.65,1037.39,1042.06,1046.67,1051.22,1055.72,1060.16,1064.54,1068.88,1073.16,1077.4,1081.59,1085.74,1089.85,1093.91,1097.93,1101.91,1105.86,1109.77,1113.64,1117.47,1121.27,1125.04,1128.78,1132.48,1136.15,1139.8,1143.41,1147,1150.56,1154.09,1157.59,1161.07,1164.52,1167.94,1171.35,1174.72,1178.08,1181.41,1184.72,1188.01,1191.27,1194.52,1197.74,1200.94,1204.13,1207.29,1210.44,1213.56,1216.67,1219.76,1222.83,1225.88,1228.92,1231.94,1234.94,1237.93,1240.9,1243.85,1246.79,1249.71,1252.62,1255.51,1258.39,1261.25,1101.52,1039.11,1000.79,973.489,952.567,935.798,921.938,910.217,900.128,891.32,883.541,876.603,870.364,864.712,859.562,854.843,850.496,846.477,842.745,839.268,836.018,832.971,830.107,827.408,824.859,822.446,820.158,817.984,815.916,813.944,812.062,810.262,808.54,806.889,805.305,803.784,802.32,800.912,799.555,798.246,796.983,795.763,794.583,793.442,792.337,791.266,790.229,789.222,788.245,787.295,786.373,785.476,784.603,783.754,782.927,782.121,781.336,780.57,779.823,779.094,778.383,777.687,777.008,776.345,775.696,775.061,774.44,773.832,773.237,772.654,772.083,771.524,770.976,770.439,769.912,769.395,768.888,768.39,767.902,767.422,766.951,766.488,766.034,765.587,765.148,764.716,764.292,763.875,763.464,763.06,762.663,762.272,761.887,761.508,761.135,760.767,760.405,760.049,759.697,759.351,757.437,755.663,754.016,752.48,751.044,749.698,748.432,747.24,746.115,745.05,744.04,743.082,742.169,741.3,740.471,739.679,738.92,738.194,737.497,736.828,736.185,735.566,734.97,734.395,733.84,733.305,732.787,732.286,731.801,731.332,730.876,730.435,730.006,729.59,729.186,728.793,728.41,728.038,727.675,727.322,726.978,726.643,726.315,725.996,725.684,725.379,725.081,724.79,724.506,724.228,723.955,723.689,723.428,723.172,722.922,722.677,722.436,722.201,721.97,721.743,721.52,721.302,721.087,720.877,720.67,720.467,720.267,720.071,719.878,719.688,719.502,719.318,719.138,718.96,718.786,718.614,718.444,718.278,718.113,717.952,717.792,717.635,717.481,717.328,717.178,717.03,716.884,716.74,716.597,716.457,716.319,716.183,716.048,715.915,715.784,715.655,715.527,715.401,715.276,715.153])
a2=np.array([0,0,0,0,0,0,0.00000858307,0.0000171661,0.0000257492,0.0000343323,0.0000429153,0.0000514984,0.0000600815,0.0000686646,0.0000772476,0.0000858307,0.0000944138,0.000102997,0.00011158,0.000120163,0.000128746,0.000137329,0.000145912,0.000154495,0.000163078,0.000171542,0.000180125,0.000188708,0.000197291,0.000205874,0.000214457,0.000223041,0.000231624,0.000240207,0.00024879,0.000257373,0.000265956,0.000274539,0.000283122,0.000291705,0.000300288,0.000308871,0.000317454,0.000326037,0.00033462,0.000343203,0.000351787,0.00036037,0.000368953,0.000377536,0.000386119,0.000394702,0.000403285,0.000411868,0.000420451,0.000429034,0.000437617,0.0004462,0.000454783,0.000463367,0.00047195,0.000480533,0.000489116,0.000497699,0.000506163,0.000514746,0.000523329,0.000531912,0.000540495,0.000549078,0.000557661,0.000566244,0.000574827,0.00058341,0.000591993,0.000600576,0.00060916,0.000617742,0.000626326,0.000634909,0.000643492,0.000652075,0.000660658,0.000669241,0.000677824,0.000686407,0.00069499,0.000703573,0.000712156,0.000720739,0.000729322,0.000737906,0.000746489,0.000755072,0.000763655,0.000772238,0.000780821,0.000789404,0.000797987,0.00080657,0.000815153,0.000823736,0.000832319,0.000840783,0.000849366,0.000857949,0.000908017,0.000957966,0.00100803,0.00105798,0.00110805,0.001158,0.00120795,0.00125802,0.00130796,0.00135803,0.00140798,0.00145805,0.001508,0.00155795,0.00160801,0.00165796,0.00170803,0.00175798,0.00180805,0.001858,0.00190795,0.00195801,0.00200796,0.00205803,0.00210798,0.00215805,0.00220799,0.00225794,0.00230801,0.00235796,0.00240803,0.00245798,0.00250804,0.00255799,0.00260794,0.00265801,0.00270796,0.00275803,0.00280797,0.00285804,0.00290799,0.00295806,0.00300801,0.00305796,0.00310802,0.00315797,0.00320804,0.00325799,0.00330806,0.00335801,0.00340795,0.00345802,0.00350797,0.00355804,0.00360799,0.00365806,0.003708,0.00375795,0.00380802,0.00385797,0.00390804,0.00395799,0.00400805,0.004058,0.00410795,0.00415802,0.00420797,0.00425804,0.00430799,0.00435805,0.004408,0.00445795,0.00450802,0.00455797,0.00460803,0.00465798,0.00470805,0.004758,0.00480795,0.00485802,0.00490797,0.00495803,0.00500798,0.00505805,0.005108,0.00515795,0.00520801,0.00525796,0.00530803,0.00535798,0.00540805,0.005458,0.00550795,0.00555801,0.00560796,0.00565803,0.00570798,0.00575805,0.005808,0.00585794,0.00615799,0.00645804,0.00675798,0.00705802,0.00735796,0.007658,0.00795806,0.00825799,0.00855804,0.00885797,0.00915802,0.00945795,0.009758,0.0100581,0.010358,0.010658,0.010958,0.011258,0.0115581,0.011858,0.012158,0.012458,0.012758,0.013058,0.013358,0.013658,0.013958,0.014258,0.014558,0.014858,0.0151581,0.015458,0.015758,0.016058,0.016358,0.016658,0.016958,0.0172581,0.017558,0.017858,0.018158,0.018458,0.0187581,0.019058,0.019358,0.019658,0.019958,0.020258,0.020558,0.020858,0.021158,0.021458,0.021758,0.022058,0.0223579,0.022658,0.022958,0.023258,0.023558,0.0238579,0.024158,0.024458,0.024758,0.025058,0.025358,0.025658,0.0259579,0.026258,0.026558,0.026858,0.027158,0.0274579,0.027758,0.0280581,0.028358,0.028658,0.028958,0.029258,0.0295579,0.029858,0.030158,0.030458,0.030758,0.031058,0.031358,0.0316581,0.031958,0.032258,0.032558,0.032858,0.0331579,0.033458,0.033758,0.034058,0.034358,0.034658,0.034958,0.035258,0.035558,0.035858])
b2=np.array([690.94,690.94,690.94,690.94,690.94,690.94,690.675,716.949,729.87,739.483,747.506,754.539,760.876,766.687,772.084,777.143,781.921,786.458,790.788,794.937,798.926,802.771,806.487,810.087,813.581,816.977,820.284,823.508,826.656,829.732,832.741,835.688,838.576,841.409,844.19,846.921,849.606,852.246,854.844,857.402,859.921,862.403,864.851,867.264,869.645,871.995,874.315,876.606,878.869,881.106,883.316,885.502,887.663,889.801,891.917,894.01,896.082,898.133,900.164,902.176,904.168,906.143,908.099,910.038,911.959,913.864,915.753,917.626,919.484,921.327,923.155,924.968,926.768,928.554,930.327,932.086,933.833,935.567,937.289,938.998,940.696,942.383,944.058,945.722,947.375,949.018,950.65,952.272,953.884,955.486,957.078,958.661,960.234,961.798,963.353,964.899,966.437,967.966,969.486,970.998,972.502,973.998,975.486,976.966,978.439,979.904,926.517,903.505,888.105,876.392,866.924,858.987,852.169,846.205,840.919,836.182,831.899,827.999,824.426,821.134,818.086,815.254,812.612,810.14,807.819,805.635,803.574,801.625,799.778,798.024,796.356,794.766,793.25,791.8,790.412,789.083,787.807,786.582,785.403,784.269,783.176,782.121,781.103,780.12,779.169,778.248,777.357,776.493,775.655,774.841,774.052,773.284,772.538,771.812,771.105,770.417,769.746,769.093,768.455,767.833,767.226,766.633,766.053,765.487,764.934,764.392,763.862,763.344,762.836,762.338,761.851,761.374,760.906,760.447,759.996,759.555,759.121,758.695,758.278,757.867,757.464,757.068,756.678,756.296,755.919,755.549,755.185,754.827,754.475,754.128,753.787,753.451,753.12,752.794,752.472,752.156,751.844,751.537,751.235,750.936,750.642,750.352,750.065,749.783,749.505,749.23,747.701,746.277,744.947,743.7,742.53,741.428,740.389,739.406,738.475,737.592,736.752,735.953,735.191,734.463,733.767,733.101,732.463,731.85,731.262,730.696,730.151,729.627,729.121,728.633,728.161,727.706,727.264,726.838,726.424,726.023,725.635,725.257,724.891,724.534,724.188,723.851,723.523,723.204,722.893,722.59,722.294,722.005,721.724,721.449,721.181,720.918,720.662,720.411,720.166,719.926,719.691,719.461,719.235,719.015,718.798,718.586,718.378,718.174,717.974,717.778,717.585,717.396,717.21,717.028,716.848,716.672,716.499,716.328,716.161,715.996,715.834,715.675,715.518,715.364,715.212,715.062,714.915,714.77,714.627,714.486,714.348,714.211,714.076,713.943,713.812,713.683,713.556,713.43,713.306,713.184,713.064,712.945,712.827,712.711,712.597,712.484,712.372,712.262,712.153,712.046])
a3=np.array([0,0.000100017,0.000200033,0.00030005,0.000399947,0.000499964,0.000500202,0.000500321,0.000500441,0.00050056,0.000500798,0.000500917,0.000501037,0.000501156,0.000501394,0.000501514,0.000501633,0.000501871,0.00050199,0.000502109,0.000502229,0.000502467,0.000502586,0.000502706,0.000502825,0.000503063,0.000503182,0.000503302,0.000503421,0.000503659,0.000503779,0.000503898,0.000504136,0.000504255,0.000504374,0.000504494,0.000504732,0.000504851,0.000504971,0.00050509,0.000505328,0.000505447,0.000505567,0.000505686,0.000505924,0.000506043,0.000506163,0.000506401,0.00050652,0.000506639,0.000506759,0.000506997,0.000507116,0.000507236,0.000507355,0.000507593,0.000507712,0.000507832,0.000507951,0.000508189,0.000508308,0.000508428,0.000508666,0.000508785,0.000508904,0.000509024,0.000509262,0.000509381,0.000509501,0.00050962,0.000509858,0.000509977,0.000510096,0.000510216,0.000510454,0.000510573,0.000510693,0.000510931,0.00051105,0.000511169,0.000511289,0.000511527,0.000511646,0.000511766,0.000511885,0.000512123,0.000512242,0.000512361,0.000512481,0.000512719,0.000512838,0.000512958,0.000513196,0.000513315,0.000513434,0.000513554,0.000513792,0.000513911,0.000514031,0.00051415,0.000514388,0.000514507,0.000514626,0.000514746,0.000514984,0.000515103,0.000565052,0.00061512,0.000665069,0.000715136,0.000765085,0.000815153,0.000865102,0.00091505,0.000965118,0.00101507,0.00106514,0.00111508,0.00116515,0.0012151,0.00126505,0.00131512,0.00136507,0.00141513,0.00146508,0.00151515,0.0015651,0.00161505,0.00166511,0.00171506,0.00176513,0.00181508,0.00186515,0.0019151,0.00196505,0.00201511,0.00206506,0.00211513,0.00216508,0.00221515,0.0022651,0.00231504,0.00236511,0.00241506,0.00246513,0.00251508,0.00256515,0.00261509,0.00266504,0.00271511,0.00276506,0.00281513,0.00286508,0.00291514,0.00296509,0.00301504,0.00306511,0.00311506,0.00316513,0.00321507,0.00326514,0.00331509,0.00336516,0.00341511,0.00346506,0.00351512,0.00356507,0.00361514,0.00366509,0.00371516,0.00376511,0.00381505,0.00386512,0.00391507,0.00396514,0.00401509,0.00406516,0.0041151,0.00416505,0.00421512,0.00426507,0.00431514,0.00436509,0.00441515,0.0044651,0.00451505,0.00456512,0.00461507,0.00466514,0.00471508,0.00476515,0.0048151,0.00486505,0.00491512,0.00496507,0.00501514,0.00506508,0.00511515,0.0051651,0.00521505,0.00526512,0.00531506,0.00536513,0.00541508,0.00546515,0.0055151,0.00581515,0.00611508,0.00641513,0.00671506,0.00701511,0.00731516,0.00761509,0.00791514,0.00821507,0.00851512,0.00881505,0.0091151,0.00941515,0.00971508,0.0100151,0.0103151,0.0106151,0.010915,0.0112151,0.0115151,0.0118151,0.0121151,0.0124151,0.0127151,0.0130151,0.0133151,0.0136151,0.0139151,0.0142151,0.014515,0.0148151,0.0151151,0.0154151,0.0157151,0.016015,0.0163151,0.0166151,0.0169151,0.0172151,0.0175151,0.0178151,0.018115,0.0184151,0.0187151,0.0190151,0.0193151,0.019615,0.0199151,0.0202152,0.0205151,0.0208151,0.0211151,0.0214151,0.021715,0.0220151,0.0223151,0.0226151,0.0229151,0.0232151,0.0235151,0.0238152,0.0241151,0.0244151,0.0247151,0.0250151,0.025315,0.0256151,0.0259152,0.0262151,0.0265151,0.0268151,0.0271151,0.0274152,0.0277151,0.0280151,0.0283151,0.0286151,0.0289151,0.0292151,0.0295152,0.0298151,0.0301151,0.0304151,0.0307151,0.0310152,0.0313151,0.0316151,0.0319151,0.0322151,0.032515,0.0328151,0.0331152,0.0334151,0.0337151,0.0340151,0.0343151,0.0346152,0.0349151,0.0352151,0.0355151])
b3=np.array([690.94,691.04,690.993,690.983,690.978,690.975,844.348,953.412,1038.41,1108.79,1169.58,1223.62,1272.68,1317.88,1360,1399.58,1437.04,1472.68,1506.76,1539.46,1570.95,1601.34,1630.76,1659.29,1687.01,1713.99,1740.28,1765.94,1791.01,1815.54,1839.54,1863.07,1886.14,1908.79,1931.03,1952.88,1974.38,1995.53,2016.36,2036.87,2057.08,2077.01,2096.66,2116.05,2135.19,2154.09,2172.76,2191.2,2209.43,2227.45,2245.28,2262.91,2280.35,2297.61,2314.7,2331.62,2348.38,2364.98,2381.42,2397.72,2413.86,2429.87,2445.74,2461.48,2477.09,2492.57,2507.93,2523.18,2538.3,2553.31,2568.21,2583,2597.68,2612.26,2626.74,2641.12,2655.41,2669.6,2683.7,2697.71,2711.63,2725.46,2739.21,2752.88,2766.46,2779.97,2793.4,2806.75,2820.03,2833.23,2846.36,2859.42,2872.41,2885.33,2898.19,2910.98,2923.7,2936.36,2948.97,2961.5,2973.98,2986.4,2998.76,3011.06,3023.31,3035.5,1676.85,1284.9,1147.48,1074.36,1027.56,994.417,969.4,949.661,933.576,920.144,908.709,898.82,890.159,882.49,875.639,869.468,863.874,858.771,854.091,849.779,845.789,842.083,838.629,835.399,832.37,829.523,826.839,824.303,821.904,819.627,817.465,815.406,813.444,811.57,809.779,808.065,806.422,804.845,803.33,801.873,800.47,799.119,797.816,796.558,795.343,794.168,793.031,791.931,790.864,789.83,788.827,787.854,786.908,785.989,785.096,784.226,783.38,782.556,781.754,780.971,780.208,779.464,778.737,778.028,777.336,776.659,775.998,775.351,774.718,774.1,773.494,772.901,772.32,771.751,771.194,770.648,770.112,769.587,769.072,768.567,768.07,767.584,767.106,766.636,766.175,765.722,765.277,764.839,764.409,763.986,763.57,763.161,762.758,762.362,761.972,761.588,761.211,760.839,760.472,760.112,758.12,756.28,754.573,752.985,751.503,750.115,748.812,747.586,746.43,745.337,744.302,743.32,742.387,741.499,740.651,739.842,739.069,738.328,737.618,736.937,736.282,735.652,735.046,734.462,733.898,733.354,732.829,732.32,731.829,731.352,730.891,730.443,730.009,729.588,729.178,728.78,728.393,728.016,727.65,727.293,726.945,726.605,726.274,725.952,725.636,725.329,725.028,724.734,724.447,724.166,723.891,723.622,723.359,723.101,722.849,722.601,722.359,722.121,721.888,721.66,721.435,721.215,720.999,720.787,720.578,720.374,720.173,719.975,719.781,719.59,719.402,719.217,719.036,718.857,718.681,718.508,718.338,718.17,718.005,717.842,717.682,717.524,717.368,717.215,717.063,716.914,716.768,716.623,716.48,716.339,716.2,716.063,715.927,715.794,715.662,715.532,715.403,715.277,715.151,715.028])
a4=np.array([0,0,0,0,0,0,0.00000560284,0.0000113249,0.0000169277,0.0000226498,0.0000282526,0.0000339747,0.0000395775,0.0000452995,0.0000509024,0.0000566244,0.0000622273,0.0000679493,0.0000735521,0.0000792742,0.000084877,0.0000905991,0.0000962019,0.000101924,0.000107527,0.000113249,0.000118852,0.000124574,0.000130177,0.000135899,0.000141501,0.000147104,0.000152826,0.000158429,0.000164151,0.000169754,0.000175476,0.000181079,0.000186801,0.000192404,0.000198126,0.000203729,0.000209451,0.000215054,0.000220776,0.000226378,0.000232101,0.000237703,0.000243425,0.000249028,0.00025475,0.000260353,0.000266075,0.000271678,0.000277281,0.000283003,0.000288606,0.000294328,0.000299931,0.000305653,0.000311255,0.000316977,0.00032258,0.000328302,0.000333905,0.000339627,0.00034523,0.000350952,0.000356555,0.000362277,0.00036788,0.000373602,0.000379205,0.000384927,0.00039053,0.000396252,0.000401854,0.000407577,0.000413179,0.000418782,0.000424504,0.000430107,0.000435829,0.000441432,0.000447154,0.000452757,0.000458479,0.000464082,0.000469804,0.000475407,0.000481129,0.000486732,0.000492454,0.000498056,0.000503779,0.000509381,0.000515103,0.000520706,0.000526428,0.000532031,0.000537753,0.000543356,0.000549078,0.000554681,0.000560284,0.000566006,0.000615954,0.000666022,0.000715971,0.000766039,0.000815988,0.000866055,0.000916004,0.000965953,0.00101602,0.00106597,0.00111604,0.00116599,0.00121605,0.001266,0.00131595,0.00136602,0.00141597,0.00146604,0.00151599,0.00156605,0.001616,0.00166595,0.00171602,0.00176597,0.00181603,0.00186598,0.00191605,0.001966,0.00201595,0.00206602,0.00211597,0.00216603,0.00221598,0.00226605,0.002316,0.00236595,0.00241602,0.00246596,0.00251603,0.00256598,0.00261605,0.002666,0.00271594,0.00276601,0.00281596,0.00286603,0.00291598,0.00296605,0.003016,0.00306594,0.00311601,0.00316596,0.00321603,0.00326598,0.00331605,0.00336599,0.00341594,0.00346601,0.00351596,0.00356603,0.00361598,0.00366604,0.00371599,0.00376594,0.00381601,0.00386596,0.00391603,0.00396597,0.00401604,0.00406599,0.00411606,0.00416601,0.00421596,0.00426602,0.00431597,0.00436604,0.00441599,0.00446606,0.00451601,0.00456595,0.00461602,0.00466597,0.00471604,0.00476599,0.00481605,0.004866,0.00491595,0.00496602,0.00501597,0.00506604,0.00511599,0.00516605,0.005216,0.00526595,0.00531602,0.00536597,0.00541604,0.00546598,0.00551605,0.005566,0.00586605,0.00616598,0.00646603,0.00676596,0.00706601,0.00736594,0.00766599,0.00796604,0.00826597,0.00856602,0.00886595,0.009166,0.00946605,0.00976598,0.010066,0.010366,0.010666,0.0109659,0.011266,0.011566,0.011866,0.012166,0.0124659,0.012766,0.013066,0.013366,0.013666,0.013966,0.014266,0.0145659,0.014866,0.015166,0.015466,0.015766,0.016066,0.016366,0.0166661,0.016966,0.017266,0.017566,0.017866,0.018166,0.018466,0.018766,0.019066,0.019366,0.019666,0.019966,0.0202661,0.020566,0.020866,0.021166,0.021466,0.0217659,0.022066,0.022366,0.022666,0.022966,0.023266,0.023566,0.0238661,0.024166,0.024466,0.024766,0.025066,0.025366,0.025666,0.0259661,0.026266,0.026566,0.026866,0.027166,0.0274661,0.027766,0.028066,0.028366,0.028666,0.028966,0.029266,0.029566,0.029866,0.030166,0.030466,0.030766,0.0310659,0.031366,0.031666,0.031966,0.032266,0.032566,0.032866,0.0331661,0.033466,0.033766,0.034066,0.034366,0.0346659,0.034966,0.035266,0.035566])
b4=np.array([690.94,690.94,690.94,690.94,690.94,690.94,690.786,726.741,744.924,758.344,769.498,779.266,788.068,796.138,803.63,810.649,817.273,823.56,829.557,835.302,840.824,846.148,851.294,856.28,861.12,865.827,870.411,874.882,879.248,883.516,887.692,891.783,895.793,899.728,903.59,907.385,911.115,914.784,918.395,921.95,925.452,928.904,932.306,935.662,938.973,942.241,945.467,948.654,951.802,954.913,957.988,961.028,964.035,967.009,969.952,972.864,975.746,978.6,981.426,984.225,986.997,989.744,992.466,995.163,997.837,1000.49,1003.12,1005.72,1008.31,1010.87,1013.41,1015.94,1018.44,1020.93,1023.39,1025.84,1028.27,1030.68,1033.08,1035.46,1037.82,1040.17,1042.5,1044.81,1047.11,1049.4,1051.67,1053.93,1056.17,1058.4,1060.61,1062.81,1065,1067.18,1069.34,1071.49,1073.63,1075.76,1077.87,1079.97,1082.07,1084.15,1086.21,1088.27,1090.32,1092.36,1004.37,967.674,943.811,926.057,911.965,900.335,890.479,881.961,874.489,867.856,861.91,856.537,851.646,847.17,843.05,839.241,835.706,832.412,829.332,826.445,823.731,821.174,818.758,816.47,814.301,812.24,810.278,808.408,806.622,804.915,803.28,801.714,800.211,798.767,797.378,796.041,794.753,793.511,792.312,791.153,790.033,788.95,787.901,786.885,785.899,784.943,784.015,783.114,782.239,781.387,780.559,779.753,778.968,778.203,777.457,776.731,776.021,775.33,774.654,773.994,773.35,772.72,772.104,771.501,770.912,770.335,769.77,769.217,768.676,768.145,767.625,767.115,766.614,766.124,765.643,765.17,764.706,764.251,763.804,763.365,762.933,762.51,762.093,761.683,761.28,760.884,760.495,760.111,759.734,759.362,758.997,758.637,758.283,757.934,757.59,757.252,756.918,756.589,756.265,755.946,754.176,752.535,751.007,749.581,748.246,746.993,745.813,744.701,743.649,742.653,741.708,740.81,739.954,739.139,738.359,737.614,736.901,736.216,735.56,734.929,734.322,733.737,733.174,732.63,732.106,731.599,731.109,730.634,730.175,729.73,729.298,728.879,728.472,728.077,727.692,727.319,726.955,726.601,726.256,725.92,725.593,725.273,724.961,724.657,724.36,724.069,723.786,723.508,723.237,722.971,722.712,722.457,722.208,721.964,721.725,721.491,721.261,721.036,720.815,720.598,720.386,720.177,719.972,719.771,719.573,719.379,719.188,719,718.815,718.634,718.455,718.28,718.107,717.937,717.77,717.605,717.443,717.283,717.126,716.971,716.818,716.668,716.52,716.374,716.23,716.088,715.948,715.81,715.673,715.539,715.407,715.276,715.147,715.019,714.894,714.77,714.647,714.526,714.407,714.289])

path_where_to_save_everything = '/home/ffederic/work/Collaboratory/test/experimental_data/Marc_Mentat_target_temp_test/'
fig, ax1 = plt.subplots(figsize=(20, 10))
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
axx1, = ax1.plot(a*1e3,b,'b')
axx2, = ax2.plot(a*1e3,power_input(a,0),'r')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 heat flux [W/m2]', color=axx2.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)



plt.figure(figsize=(20, 10))
plt.plot(a*1e3,b,color=color[0],label='full simulated temperature')
time_after_peak=1.5e-3
plt.plot([a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]*1e3]*2,[b.min(),b.max()],'--k')
bds = [[20,1e-3,3e-1,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
guess=[b[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]), a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-np.mean(b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]))**2)))
plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1],label='double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
# plt.ylim(bottom=b.min()*0.9,top=b.max()*1.2)
plt.xlim(right=10)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_energy1 = []
all_energy2 = []
all_energy3 = []
all_energy4 = []
all_energy5 = []
all_energy6 = []
for time_after_peak in np.array([0.5,1,1.5,2,3,5])*1e-3:
	plt.figure(figsize=(20, 10))
	plt.plot(a*1e3,b,color=color[0],linewidth=4,label='full simulated temperature')
	# plt.plot(a1*1e3,b1,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000616*1e3,1.34e-05*1e3,(13.25+0.0917*0.1)*8e8))
	# plt.plot(a2*1e3,b2,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(1e-07*1e3,0.00108*1e3,(0.1678+0.0917*0.1)*8e8))
	# plt.plot(a3*1e3,b3,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000762*1e3,1.66e-05*1e3,(10.31+0.0917*0.1)*8e8))
	# bds = [[20,1e-3,1e-4,1],[np.inf,np.inf,1e-3,1.0005]]
	# bds = [[b[0]-1,1e-3,1e-6,0],[b[0]+1,np.inf,1,a[np.abs(a-(a[b.argmax()]+1.5e-3)).argmin()]]]
	# time_after_peak = 5e-3
	plt.title('Temperature profile used from ts=%.3gms after the temperature peak' %(time_after_peak*1e3))
	bds1 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess1=[b[0],1,0.5,0.]
	bds2 = [[20,1e-3,1e-8,0],[np.inf,np.inf,1e-6,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess2=[b[0],1,1e-6,0.]
	bds3 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,1e-7]]
	guess3=[b[0],1,0.5,0.]
	bds4 = [[20,1e-3,0.01,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess4=[b[0],1,1,0.]
	bds5 = [[20,1e-3,0.1,0],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess5=[b[0],1,1,0.]
	bds6 = [[20,1e-3,1e-2,0.2*1e-3],[np.inf,np.inf,1,a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]]]
	guess6=[b[0],1,0.5,0.6*1e-3]
	# plt.plot([1.5e-3]*2,[b.min(),b.max()],'--k')
	plt.plot([a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]*1e3]*2,[b.min(),b.max()],'--k')
	for i,arg in enumerate([[bds1,guess1],[bds2,guess2],[bds3,guess3],[bds4,guess4],[bds5,guess5],[bds6,guess6]]):
		bds,guess = arg
		# print(guess)
		fit = curve_fit(semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]), a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
		fit_wit_errors = correlated_values(fit[0],fit[1])
		energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
		pulse_duration_ms = 1e3*(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
		R2 = 1-np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]-np.mean(b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():]))**2)))
		# print(fit_wit_errors)
		if i==0:
			all_energy1.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1],label='free double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1])
		elif i==1:
			all_energy2.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus<1e-6)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==2:
			all_energy3.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0<1e-7)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==3:
			all_energy4.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.01)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==4:
			all_energy5.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.1)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==5:
			all_energy6.append(energy)
			plt.plot(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0>0.2)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()])(a[a-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
	# guess = [1000,1e8,1e-3,0]
	# bds=[[20,0,0,0],[np.inf,np.inf,np.inf,np.inf]]
	# fit = curve_fit(exponential_decay, a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], b[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	# fit_wit_errors = correlated_values(fit[0],fit[1])
	# plt.plot(a*1e3,exponential_decay(a,*fit[0]),'--',label='exponential decay')

	plt.plot(a*1e3,power_input(a,0)/np.max(power_input(a,0))*(b.max()-b.min())+b.min(),':',color=color[i+2],label='power input (not in scale), energy input~22J')
	plt.legend(loc='best', fontsize='small')
	plt.ylim(top=(b.max()-b.min())*1.4+b.min())
	plt.xlim(left=-1,right=15)
	plt.xlabel('time [ms]')
	plt.ylabel('temperature [K]')
	plt.grid()
	figure_index+=1
	plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	plt.close('all')
	# plt.pause(0.01)

all_energy1 = np.array(all_energy1)
all_energy2 = np.array(all_energy2)
all_energy3 = np.array(all_energy3)
all_energy4 = np.array(all_energy4)
all_energy5 = np.array(all_energy5)
all_energy6 = np.array(all_energy6)
nominal_energy = 22	# J
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy1)/nominal_energy,yerr=std_devs(all_energy1)/nominal_energy,color=color[1],label='free double root')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy2)/nominal_energy,yerr=std_devs(all_energy2)/nominal_energy,color=color[2],linestyle='--',label='constrained (taus<1e-6)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy3)/nominal_energy,yerr=std_devs(all_energy3)/nominal_energy,color=color[3],linestyle='--',label='constrained (t0<1e-7)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy4)/nominal_energy,yerr=std_devs(all_energy4)/nominal_energy,color=color[4],linestyle='--',label='constrained (taus>0.01)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy5)/nominal_energy,yerr=std_devs(all_energy5)/nominal_energy,color=color[5],linestyle='--',label='constrained (taus>0.1)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy6)/nominal_energy,yerr=std_devs(all_energy6)/nominal_energy,color=color[6],linestyle='--',label='constrained (t0>0.2)')
plt.plot([0,5],[1]*2,'--k')
plt.plot([1.5]*2,[1,1.1],'--k')
plt.title('strong pulse')
plt.xlabel('start of profile used after temperature peak (ts) [ms]')
plt.ylabel('fitted/delivered energy [au]')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_all_energy1 = []
all_all_energy1.append(all_energy1/nominal_energy)

plt.figure(figsize=(20, 10))
plt.plot(a*1e3,b,linewidth=4,label='full simulated temperature')
plt.plot(a1*1e3,b1,label='simulated step 1: t0=%.3gms, tau=%.3gms, F0=%.3gW/m2' %(9.51e-14*1e3,2.97e-04*1e3,(0.657+0.0917*0.1)*8e8))
plt.plot(a4*1e3,b4,label='simulated step 2: t0=%.3gms, tau=%.3gms, F0=%.3gW/m2' %(8.35e-32*1e3,0.000566*1e3,(0.3368+0.0917*0.1)*8e8))
plt.plot(a2*1e3,b2,'--',label='simulated step 3: t0=%.3gms, tau=%.3gms, F0=%.3gW/m2' %(3.59e-27*1e3,0.000858*1e3,(0.1968+0.0917*0.1)*8e8))
plt.plot(a3*1e3,b3,'--',label='simulated step 4: t0=%.3gms, tau=%.3gms, F0=%.3gW/m2' %(0.5,1.51*1e-5*1e3,(11.808+0.0917*0.1)*8e8))
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
time_after_peak = 1.5e-3
plt.plot([a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]*1e3]*2,[b.min(),b.max()],'--k')
plt.ylim(bottom=b.min()/1.2,top=b.max()*1.2)
plt.xlim(left=-1,right=15)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

plt.figure(figsize=(20, 10))
plt.plot(a*1e3,power_input(a,0),label='full simulated temperature')
plt.plot([0,9.51e-14*1e3,9.51e-14*1e3,9.51e-14*1e3+2.97e-04*1e3,9.51e-14*1e3+2.97e-04*1e3,a.max()*1e3],[(0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.657+0.0917*0.1)*8e8,(0.657+0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.0917*0.1)*8e8],label='simulated step 1')
plt.plot([0,8.35e-32*1e3,8.35e-32*1e3,8.35e-32*1e3+0.000566*1e3,8.35e-32*1e3+0.000566*1e3,a.max()*1e3],[(0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.3368+0.0917*0.1)*8e8,(0.3368+0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.0917*0.1)*8e8],label='simulated step 2')
plt.plot([0,3.59e-27*1e3,3.59e-27*1e3,3.59e-27*1e3+0.000858*1e3,3.59e-27*1e3+0.000858*1e3,a.max()*1e3],[(0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.1968+0.0917*0.1)*8e8,(0.1968+0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.0917*0.1)*8e8],'--',label='simulated step 3')
plt.plot([0,0.5,0.5,0.5+1.51*1e-5*1e3,0.5+1.51*1e-5*1e3,a.max()*1e3],[(0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(11.808+0.0917*0.1)*8e8,(11.808+0.0917*0.1)*8e8,(0.0917*0.1)*8e8,(0.0917*0.1)*8e8],'--',label='simulated step 4')
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('heat flux [W/m2]')
time_after_peak = 1.5e-3
plt.plot([a[np.abs(a-(a[b.argmax()]+time_after_peak)).argmin()]*1e3]*2,[power_input(a,0).min(),power_input(a,0).max()],'--k')
# plt.ylim(bottom=b.min()/1.2,top=b.max()*1.2)
plt.xlim(left=-1,right=15)
plt.grid()
plt.semilogy()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

if False:
	guess = [1000,1e8,1e-3,1]
	bds=[[20,0,0,1],[np.inf,np.inf,np.inf,np.inf]]
	fit = curve_fit(exponential_decay, a[a>=1.0015], b[a>=1.0015], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	fit_wit_errors = correlated_values(fit[0],fit[1])
	plt.plot(a,exponential_decay(a,*fit[0]),':')
	plt.legend(loc='best')
	plt.grid()
	# figure_index+=1
	# plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	# plt.close('all')
	plt.pause(0.01)



c=np.array([0,0.000014,0.000028,0.000042,0.000056,0.00007,0.000084,0.000098,0.000112,0.000126,0.00014,0.000154,0.000168,0.000182,0.000196,0.00021,0.000224,0.000238,0.000252,0.000266,0.00028,0.000294,0.000308,0.000322,0.000336,0.00035,0.000364,0.000378,0.000392,0.000406,0.00042,0.000434,0.000448,0.000462,0.000476,0.00049,0.000504,0.000518,0.000532,0.000546,0.00056,0.000574,0.000588,0.000602,0.000616,0.00063,0.000644,0.000658,0.000672,0.000686,0.0007,0.000714,0.000728,0.000742,0.000756,0.00077,0.000784,0.000798,0.000812,0.000826,0.00084,0.000854,0.000868,0.000882,0.000896,0.00091,0.000924,0.000938,0.000952,0.000966,0.00098,0.000994,0.001008,0.001022,0.001036,0.00105,0.001064,0.001078,0.001092,0.001106,0.00112,0.001134,0.001148,0.001162,0.001176,0.00119,0.001204,0.001218,0.001232,0.001246,0.00126,0.001274,0.001288,0.001302,0.001316,0.00133,0.001344,0.001358,0.001372,0.001386,0.0014,0.001414,0.001428,0.001442,0.001456,0.00147,0.001484,0.001498,0.001512,0.001526,0.00154,0.001554,0.001568,0.001582,0.001596,0.00161,0.001624,0.001638,0.001652,0.001666,0.00168,0.001694,0.001708,0.001722,0.001736,0.00175,0.001764,0.001778,0.001792,0.001806,0.00182,0.001834,0.001848,0.001862,0.001876,0.00189,0.001904,0.001918,0.001932,0.001946,0.00196,0.001974,0.001988,0.002002,0.002016,0.00203,0.002044,0.002058,0.002072,0.002086,0.0021,0.002114,0.002128,0.002142,0.002156,0.00217,0.002184,0.002198,0.002212,0.002226,0.00224,0.002254,0.002268,0.002282,0.002296,0.00231,0.002324,0.002338,0.002352,0.002366,0.00238,0.002394,0.002408,0.002422,0.002436,0.00245,0.002464,0.002478,0.002492,0.002506,0.00252,0.002534,0.002548,0.002562,0.002576,0.00259,0.002604,0.002618,0.002632,0.002646,0.00266,0.002674,0.002688,0.002702,0.002716,0.00273,0.002744,0.002758,0.002772,0.002786,0.0028,0.002814,0.002828,0.002842,0.002856,0.00287,0.002884,0.002898,0.002912,0.002926,0.00294,0.002954,0.002968,0.002982,0.002996,0.00301,0.003024,0.003038,0.003052,0.003066,0.00308,0.003094,0.003108,0.003122,0.003136,0.00315,0.003164,0.003178,0.003192,0.003206,0.00322,0.003234,0.003248,0.003262,0.003276,0.00329,0.003304,0.003318,0.003332,0.003346,0.00336,0.003374,0.003388,0.003402,0.003416,0.00343,0.003444,0.003458,0.003472,0.003486,0.0035,0.003514,0.003528,0.003542,0.003556,0.00357,0.003584,0.003598,0.003612,0.003626,0.00364,0.003654,0.003668,0.003682,0.003696,0.00371,0.003724,0.003738,0.003752,0.003766,0.00378,0.003794,0.003808,0.003822,0.003836,0.00385,0.003864,0.003878,0.003892,0.003906,0.00392,0.003934,0.003948,0.003962,0.003976,0.00399,0.004004,0.004018,0.004032,0.004046,0.00406,0.004074,0.004088,0.004102,0.004116,0.00413,0.004144,0.004158,0.004172,0.004186,0.0042,0.004214,0.004228,0.004242,0.004256,0.00427,0.004284,0.004298,0.004312,0.004326,0.00434,0.004354,0.004368,0.004382,0.004396,0.00441,0.004424,0.004438,0.004452,0.004466,0.00448,0.004494,0.004508,0.004522,0.004536,0.00455,0.004564,0.004578,0.004592,0.004606,0.00462,0.004634,0.004648,0.004662,0.004676,0.00469,0.004704,0.004718,0.004732,0.004746,0.00476,0.004774,0.004788,0.004802,0.004816,0.00483,0.004844,0.004858,0.004872,0.004886,0.0049,0.004914,0.004928,0.004942,0.004956,0.00497,0.004984,0.004998,0.005012,0.005026,0.00504,0.005054,0.005068,0.005082,0.005096,0.00511,0.005124,0.005138,0.005152,0.005166,0.00518,0.005194,0.005208,0.005222,0.005236,0.00525,0.005264,0.005278,0.005292,0.005306,0.00532,0.005334,0.005348,0.005362,0.005376,0.00539,0.005404,0.005418,0.005432,0.005446,0.00546,0.005474,0.005488,0.005502,0.005516,0.00553,0.005544,0.005558,0.005572,0.005586,0.0056,0.005614,0.005628,0.005642,0.005656,0.00567,0.005684,0.005698,0.005712,0.005726,0.00574,0.005754,0.005768,0.005782,0.005796,0.00581,0.005824,0.005838,0.005852,0.005866,0.00588,0.005894,0.005908,0.005922,0.005936,0.00595,0.005964,0.005978,0.005992,0.006006,0.00602,0.006034,0.006048,0.006062,0.006076,0.00609,0.006104,0.006118,0.006132,0.006146,0.00616,0.006174,0.006188,0.006202,0.006216,0.00623,0.006244,0.006258,0.006272,0.006286,0.0063,0.006314,0.006328,0.006342,0.006356,0.00637,0.006384,0.006398,0.006412,0.006426,0.00644,0.006454,0.006468,0.006482,0.006496,0.00651,0.006524,0.006538,0.006552,0.006566,0.00658,0.006594,0.006608,0.006622,0.006636,0.00665,0.006664,0.006678,0.006692,0.006706,0.00672,0.006734,0.006748,0.006762,0.006776,0.00679,0.006804,0.006818,0.006832,0.006846,0.00686,0.006874,0.006888,0.006902,0.006916,0.00693,0.006944,0.006958,0.006972,0.006986,0.007,0.007035,0.00707,0.007105,0.00714,0.007175,0.00721,0.007245,0.00728,0.007315,0.00735,0.007385,0.00742,0.007455,0.00749,0.007525,0.00756,0.007595,0.00763,0.007665,0.0077,0.007735,0.00777,0.007805,0.00784,0.007875,0.00791,0.007945,0.00798,0.008015,0.00805,0.008085,0.00812,0.008155,0.00819,0.008225,0.00826,0.008295,0.00833,0.008365,0.0084,0.008435,0.00847,0.008505,0.00854,0.008575,0.00861,0.008645,0.00868,0.008715,0.00875,0.008785,0.00882,0.008855,0.00889,0.008925,0.00896,0.008995,0.00903,0.009065,0.0091,0.009135,0.00917,0.009205,0.00924,0.009275,0.00931,0.009345,0.00938,0.009415,0.00945,0.009485,0.00952,0.009555,0.00959,0.009625,0.00966,0.009695,0.00973,0.009765,0.0098,0.009835,0.00987,0.009905,0.00994,0.009975,0.01001,0.010045,0.01008,0.010115,0.01015,0.010185,0.01022,0.010255,0.01029,0.010325,0.01036,0.010395,0.01043,0.010465,0.0105,0.010535,0.01057,0.010605,0.01064,0.010675,0.01071,0.010745,0.01078,0.010815,0.01085,0.010885,0.01092,0.010955,0.01099,0.011025,0.01106,0.011095,0.01113,0.011165,0.0112,0.011235,0.01127,0.011305,0.01134,0.011375,0.01141,0.011445,0.01148,0.011515,0.01155,0.011585,0.01162,0.011655,0.01169,0.011725,0.01176,0.011795,0.01183,0.011865,0.0119,0.011935,0.01197,0.012005,0.01204,0.012075,0.01211,0.012145,0.01218,0.012215,0.01225,0.012285,0.01232,0.012355,0.01239,0.012425,0.01246,0.012495,0.01253,0.012565,0.0126,0.012635,0.01267,0.012705,0.01274,0.012775,0.01281,0.012845,0.01288,0.012915,0.01295,0.012985,0.01302,0.013055,0.01309,0.013125,0.01316,0.013195,0.01323,0.013265,0.0133,0.013335,0.01337,0.013405,0.01344,0.013475,0.01351,0.013545,0.01358,0.013615,0.01365,0.013685,0.01372,0.013755,0.01379,0.013825,0.01386,0.013895,0.01393,0.013965,0.014])
np.abs(a-(a[b.argmax()]+1.5*1e-3)).argmin()+1
# profile at peak temperature
d=np.array([1040.21,1040.19,1040.14,1040.1,1040.06,1040.02,1039.97,1039.91,1039.85,1039.8,1039.76,1039.71,1039.66,1039.61,1039.55,1039.48,1039.42,1039.35,1039.27,1039.19,1039.11,1039.02,1038.93,1038.84,1038.74,1038.63,1038.52,1038.41,1038.3,1038.18,1038.05,1037.92,1037.79,1037.65,1037.51,1037.36,1037.21,1037.06,1036.9,1036.74,1036.57,1036.4,1036.23,1036.05,1035.87,1035.68,1035.48,1035.29,1035.09,1034.89,1034.68,1034.46,1034.25,1034.03,1033.8,1033.58,1033.34,1033.11,1032.87,1032.62,1032.37,1032.12,1031.86,1031.6,1031.33,1031.06,1030.79,1030.51,1030.23,1029.95,1029.66,1029.36,1029.06,1028.76,1028.46,1028.15,1027.83,1027.52,1027.19,1026.87,1026.54,1026.21,1025.87,1025.53,1025.18,1024.83,1024.48,1024.12,1023.76,1023.4,1023.03,1022.65,1022.28,1021.9,1021.51,1021.13,1020.73,1020.34,1019.94,1019.54,1019.13,1018.72,1018.3,1017.88,1017.46,1017.04,1016.61,1016.17,1015.74,1015.29,1014.85,1014.4,1013.95,1013.5,1013.04,1012.57,1012.11,1011.64,1011.16,1010.68,1010.2,1009.72,1009.23,1008.74,1008.24,1007.74,1007.24,1006.74,1006.23,1005.71,1005.2,1004.67,1004.15,1003.62,1003.09,1002.56,1002.02,1001.48,1000.94,1000.39,999.837,999.283,998.725,998.163,997.599,997.031,996.46,995.885,995.307,994.726,994.141,993.553,992.962,992.368,991.771,991.17,990.566,989.959,989.348,988.735,988.118,987.499,986.876,986.25,985.621,984.988,984.353,983.715,983.073,982.429,981.781,981.131,980.477,979.821,979.161,978.499,977.834,977.165,976.494,975.82,975.143,974.463,973.78,973.095,972.406,971.715,971.021,970.324,969.624,968.922,968.216,967.509,966.798,966.085,965.368,964.65,963.928,963.204,962.477,961.748,961.016,960.281,959.544,958.804,958.062,957.317,956.57,955.82,955.068,954.313,953.555,952.796,952.033,951.269,950.502,949.732,948.96,948.186,947.41,946.631,945.85,945.066,944.28,943.492,942.702,941.909,941.115,940.317,939.518,938.717,937.913,937.108,936.3,935.49,934.678,933.864,933.047,932.229,931.409,930.586,929.762,928.935,928.107,927.277,926.444,925.61,924.774,923.936,923.096,922.254,921.41,920.565,919.717,918.868,918.017,917.164,916.31,915.454,914.596,913.736,912.874,912.011,911.146,910.28,909.412,908.542,907.671,906.798,905.923,905.047,904.17,903.29,902.41,901.528,900.644,899.759,898.872,897.984,897.095,896.204,895.312,894.418,893.523,892.627,891.729,890.83,889.93,889.028,888.126,887.222,886.316,885.41,884.502,883.593,882.683,881.772,880.86,879.946,879.032,878.116,877.199,876.281,875.362,874.443,873.522,872.6,871.677,870.753,869.828,868.903,867.976,867.048,866.12,865.19,864.26,863.329,862.397,861.465,860.531,859.597,858.662,857.726,856.789,855.852,854.914,853.975,853.036,852.096,851.155,850.214,849.272,848.33,847.386,846.443,845.499,844.554,843.609,842.663,841.716,840.77,839.822,838.875,837.927,836.978,836.029,835.08,834.13,833.179,832.229,831.278,830.327,829.376,828.424,827.472,826.519,825.567,824.614,823.661,822.708,821.755,820.801,819.847,818.893,817.939,816.985,816.031,815.076,814.122,813.168,812.213,811.258,810.304,809.349,808.394,807.44,806.485,805.531,804.576,803.622,802.667,801.713,800.759,799.805,798.851,797.897,796.944,795.99,795.037,794.084,793.131,792.179,791.226,790.274,789.323,788.371,787.42,786.469,785.518,784.568,783.618,782.668,781.719,780.77,779.822,778.874,777.927,776.979,776.033,775.086,774.141,773.195,772.25,771.306,770.362,769.419,768.477,767.534,766.593,765.652,764.711,763.772,762.832,761.894,760.956,760.019,759.082,758.146,757.211,756.276,755.342,754.409,753.477,752.545,751.614,750.684,749.754,748.826,747.898,746.971,746.044,745.119,744.194,743.271,742.348,741.426,740.505,739.584,738.665,737.746,736.829,735.912,734.996,734.082,733.168,732.255,731.343,730.432,729.522,728.613,727.705,726.799,725.893,724.988,724.084,723.182,722.28,721.38,720.481,719.583,718.686,717.79,716.896,716.003,715.111,714.22,713.331,712.443,711.556,710.67,709.785,708.902,708.02,707.139,706.259,705.381,704.504,703.629,702.755,701.884,701.015,700.149,699.285,698.422,697.562,696.703,695.846,694.991,694.135,693.293,692.478,691.66,689.42,687.273,685.095,682.932,680.796,678.683,676.579,674.484,672.419,670.354,668.306,666.276,664.268,662.274,660.29,658.312,656.336,654.365,652.397,650.44,648.492,646.545,644.604,642.682,640.777,638.877,636.984,635.109,633.255,631.418,629.596,627.776,625.938,624.101,622.297,620.524,618.771,617.024,615.266,613.514,611.794,610.102,608.425,606.756,605.075,603.385,601.706,600.05,598.417,596.806,595.217,593.622,592.006,590.417,588.865,587.33,585.817,584.299,582.768,581.266,579.794,578.327,576.874,575.415,573.944,572.503,571.1,569.715,568.327,566.925,565.547,564.198,562.863,561.523,560.174,558.854,557.57,556.303,555.03,553.749,552.494,551.269,550.057,548.84,547.614,546.41,545.236,544.077,542.92,541.756,540.614,539.499,538.398,537.298,536.191,535.103,534.038,532.986,531.933,530.876,529.844,528.843,527.856,526.868,525.877,524.913,523.973,523.038,522.1,521.159,520.233,519.327,518.436,517.548,516.661,515.794,514.949,514.116,513.282,512.449,511.64,510.851,510.071,509.289,508.506,507.74,506.991,506.253,505.517,504.783,504.066,503.37,502.685,502.001,501.321,500.659,500.013,499.374,498.736,498.099,497.475,496.867,496.27,495.677,495.087,494.514,493.957,493.408,492.861,492.316,491.788,491.276,490.77,490.267,489.766,489.279,488.804,488.338,487.875,487.415,486.97,486.538,486.116,485.695,485.278,484.875,484.487,484.105,483.726,483.349,482.984,482.631,482.286,481.946,481.611,481.287,480.974,480.667,480.365,480.067,479.78,479.502,479.232,478.97,478.712,478.46,478.221,477.993,477.771,477.553,477.344,477.141,476.945,476.757,476.583,476.425,476.282,476.159,476.067,476.007])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-(a[b.argmax()]+1.5*1e-3)).argmin()+1
# profile at peak +1.5ms
d1=np.array([803.079,803.08,803.081,803.077,803.07,803.061,803.05,803.037,803.021,803.002,802.979,802.954,802.926,802.896,802.864,802.829,802.792,802.752,802.71,802.666,802.619,802.569,802.518,802.464,802.407,802.349,802.287,802.224,802.158,802.089,802.019,801.946,801.87,801.792,801.712,801.629,801.544,801.457,801.367,801.275,801.181,801.084,800.985,800.883,800.779,800.673,800.565,800.454,800.341,800.225,800.107,799.987,799.864,799.739,799.612,799.482,799.35,799.216,799.08,798.941,798.799,798.656,798.51,798.362,798.212,798.059,797.904,797.746,797.587,797.425,797.261,797.094,796.926,796.755,796.581,796.406,796.228,796.048,795.866,795.681,795.494,795.305,795.114,794.92,794.725,794.527,794.327,794.124,793.919,793.713,793.504,793.292,793.079,792.863,792.645,792.426,792.203,791.979,791.752,791.524,791.293,791.06,790.825,790.587,790.348,790.106,789.862,789.617,789.369,789.119,788.866,788.612,788.356,788.097,787.836,787.574,787.309,787.042,786.773,786.502,786.229,785.954,785.677,785.398,785.116,784.833,784.548,784.26,783.971,783.68,783.386,783.091,782.794,782.494,782.193,781.89,781.584,781.277,780.968,780.657,780.344,780.029,779.712,779.393,779.072,778.75,778.425,778.098,777.77,777.44,777.107,776.774,776.438,776.1,775.76,775.419,775.075,774.73,774.383,774.034,773.684,773.332,772.977,772.621,772.264,771.904,771.543,771.179,770.815,770.448,770.08,769.71,769.338,768.964,768.589,768.212,767.833,767.453,767.071,766.687,766.302,765.915,765.526,765.136,764.744,764.35,763.955,763.558,763.159,762.759,762.358,761.954,761.55,761.143,760.735,760.326,759.914,759.502,759.088,758.672,758.255,757.836,757.416,756.994,756.571,756.146,755.72,755.292,754.863,754.433,754.001,753.567,753.133,752.696,752.259,751.82,751.379,750.937,750.494,750.05,749.604,749.157,748.708,748.258,747.807,747.354,746.9,746.445,745.989,745.531,745.072,744.612,744.15,743.687,743.223,742.758,742.291,741.824,741.355,740.885,740.413,739.941,739.467,738.992,738.516,738.039,737.561,737.082,736.601,736.119,735.636,735.153,734.668,734.182,733.695,733.207,732.717,732.227,731.736,731.243,730.75,730.256,729.76,729.264,728.766,728.268,727.769,727.269,726.768,726.265,725.762,725.258,724.753,724.247,723.741,723.233,722.725,722.215,721.705,721.194,720.682,720.169,719.655,719.141,718.625,718.11,717.593,717.075,716.557,716.037,715.517,714.996,714.475,713.953,713.43,712.906,712.382,711.857,711.331,710.804,710.277,709.75,709.221,708.692,708.162,707.632,707.101,706.569,706.037,705.504,704.971,704.437,703.902,703.367,702.831,702.295,701.758,701.221,700.683,700.145,699.606,699.067,698.527,697.986,697.446,696.904,696.362,695.82,695.278,694.735,694.191,693.647,693.103,692.558,692.013,691.468,690.922,690.376,689.829,689.282,688.735,688.188,687.64,687.091,686.543,685.994,685.445,684.896,684.346,683.796,683.246,682.696,682.145,681.594,681.043,680.491,679.94,679.388,678.836,678.284,677.732,677.179,676.627,676.074,675.521,674.968,674.415,673.861,673.308,672.755,672.201,671.647,671.093,670.539,669.985,669.431,668.877,668.323,667.769,667.215,666.661,666.106,665.552,664.998,664.444,663.889,663.335,662.781,662.227,661.673,661.119,660.565,660.011,659.457,658.903,658.35,657.796,657.243,656.689,656.136,655.583,655.03,654.477,653.925,653.372,652.82,652.268,651.715,651.164,650.612,650.06,649.509,648.958,648.407,647.857,647.306,646.756,646.206,645.656,645.107,644.558,644.009,643.46,642.912,642.364,641.816,641.269,640.722,640.175,639.629,639.082,638.537,637.991,637.446,636.901,636.357,635.813,635.269,634.726,634.183,633.64,633.098,632.557,632.015,631.474,630.934,630.394,629.854,629.315,628.776,628.238,627.7,627.163,626.626,626.09,625.554,625.019,624.484,623.949,623.415,622.882,622.349,621.817,621.285,620.754,620.223,619.693,619.163,618.634,618.105,617.577,617.05,616.523,615.996,615.471,614.945,614.421,613.897,613.373,612.851,612.328,611.807,611.286,610.765,610.246,609.727,609.208,608.69,608.173,607.656,607.14,606.625,606.11,605.595,605.082,604.569,604.057,603.546,603.035,602.521,602.01,600.746,599.482,598.227,596.976,595.728,594.484,593.244,592.01,590.778,589.553,588.332,587.116,585.904,584.697,583.495,582.3,581.11,579.926,578.749,577.577,576.411,575.252,574.098,572.95,571.808,570.671,569.541,568.416,567.296,566.182,565.073,563.971,562.878,561.792,560.711,559.634,558.562,557.497,556.441,555.391,554.346,553.306,552.273,551.246,550.227,549.218,548.214,547.217,546.224,545.238,544.256,543.284,542.322,541.365,540.411,539.464,538.523,537.59,536.667,535.748,534.835,533.928,533.028,532.136,531.255,530.379,529.506,528.64,527.782,526.934,526.091,525.253,524.421,523.598,522.785,521.977,521.172,520.374,519.585,518.805,518.03,517.26,516.496,515.741,514.995,514.255,513.52,512.791,512.07,511.358,510.652,509.95,509.255,508.568,507.89,507.217,506.55,505.889,505.236,504.592,503.954,503.319,502.691,502.071,501.459,500.852,500.25,499.656,499.068,498.49,497.917,497.35,496.788,496.234,495.688,495.148,494.612,494.083,493.561,493.047,492.538,492.033,491.536,491.045,490.563,490.086,489.614,489.148,488.689,488.238,487.793,487.352,486.917,486.489,486.068,485.652,485.241,484.837,484.439,484.049,483.664,483.284,482.91,482.542,482.182,481.826,481.476,481.131,480.793,480.462,480.135,479.814,479.498,479.189,478.887,478.589,478.297,478.011,477.73,477.457,477.188,476.924,476.666,476.414,476.168,475.928,475.692,475.462,475.238,475.02,474.808,474.6,474.399,474.203,474.013,473.829,473.649,473.476,473.309,473.149,472.994,472.845,472.702,472.565,472.436,472.313,472.197,472.087,471.985,471.891,471.804,471.725,471.655,471.594,471.542,471.497,471.462,471.437,471.422,471.419])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-(a[b.argmax()]+3*1e-3)).argmin()+1
# profile at peak +3ms
d2=np.array([773.942,773.942,773.94,773.935,773.928,773.919,773.908,773.895,773.88,773.861,773.841,773.818,773.793,773.766,773.736,773.705,773.671,773.635,773.597,773.557,773.514,773.47,773.423,773.374,773.323,773.27,773.215,773.157,773.097,773.036,772.972,772.905,772.837,772.767,772.694,772.619,772.542,772.463,772.382,772.299,772.213,772.126,772.036,771.944,771.85,771.754,771.656,771.555,771.453,771.348,771.241,771.133,771.021,770.908,770.793,770.676,770.557,770.435,770.311,770.186,770.058,769.928,769.796,769.662,769.526,769.388,769.247,769.105,768.961,768.814,768.665,768.515,768.362,768.207,768.051,767.892,767.731,767.568,767.403,767.236,767.067,766.896,766.722,766.547,766.37,766.191,766.01,765.827,765.641,765.454,765.265,765.074,764.881,764.686,764.488,764.289,764.088,763.885,763.68,763.473,763.264,763.053,762.84,762.626,762.409,762.19,761.97,761.747,761.523,761.296,761.068,760.838,760.606,760.372,760.136,759.898,759.658,759.417,759.173,758.928,758.681,758.432,758.181,757.928,757.673,757.417,757.159,756.899,756.637,756.373,756.107,755.84,755.571,755.3,755.027,754.752,754.476,754.198,753.918,753.636,753.353,753.068,752.781,752.492,752.201,751.909,751.615,751.32,751.022,750.723,750.422,750.12,749.816,749.51,749.202,748.893,748.582,748.269,747.955,747.639,747.322,747.003,746.682,746.359,746.035,745.71,745.382,745.053,744.723,744.391,744.057,743.722,743.385,743.047,742.707,742.365,742.022,741.677,741.331,740.984,740.635,740.284,739.932,739.578,739.223,738.866,738.508,738.148,737.787,737.425,737.061,736.695,736.328,735.96,735.59,735.219,734.846,734.472,734.097,733.72,733.342,732.963,732.582,732.199,731.816,731.431,731.045,730.657,730.268,729.878,729.486,729.093,728.699,728.304,727.907,727.509,727.11,726.709,726.307,725.904,725.5,725.094,724.688,724.28,723.87,723.46,723.048,722.636,722.222,721.807,721.39,720.973,720.554,720.135,719.714,719.292,718.869,718.444,718.019,717.593,717.165,716.737,716.307,715.876,715.444,715.012,714.578,714.143,713.707,713.27,712.832,712.393,711.953,711.512,711.07,710.627,710.183,709.738,709.292,708.846,708.398,707.949,707.5,707.049,706.598,706.145,705.692,705.238,704.783,704.327,703.871,703.413,702.955,702.496,702.036,701.575,701.113,700.651,700.188,699.723,699.259,698.793,698.327,697.859,697.391,696.923,696.453,695.983,695.513,695.041,694.569,694.096,693.622,693.148,692.673,692.197,691.721,691.244,690.766,690.288,689.809,689.33,688.85,688.369,687.887,687.405,686.923,686.44,685.956,685.472,684.987,684.502,684.016,683.53,683.043,682.556,682.068,681.579,681.09,680.601,680.111,679.621,679.13,678.639,678.147,677.655,677.163,676.67,676.176,675.682,675.188,674.694,674.199,673.703,673.208,672.712,672.215,671.718,671.221,670.724,670.226,669.728,669.23,668.731,668.232,667.733,667.233,666.733,666.233,665.733,665.232,664.731,664.23,663.729,663.227,662.726,662.224,661.722,661.219,660.717,660.214,659.711,659.208,658.705,658.202,657.698,657.194,656.691,656.187,655.683,655.179,654.675,654.17,653.666,653.161,652.657,652.152,651.648,651.143,650.638,650.133,649.629,649.124,648.619,648.114,647.609,647.104,646.599,646.094,645.589,645.085,644.58,644.075,643.57,643.066,642.561,642.057,641.552,641.048,640.543,640.039,639.535,639.031,638.527,638.024,637.52,637.016,636.513,636.01,635.507,635.004,634.501,633.999,633.496,632.994,632.492,631.99,631.489,630.987,630.486,629.985,629.484,628.984,628.484,627.984,627.484,626.984,626.485,625.986,625.487,624.989,624.49,623.993,623.495,622.998,622.501,622.004,621.508,621.012,620.516,620.021,619.525,619.031,618.537,618.043,617.549,617.056,616.563,616.07,615.578,615.087,614.595,614.105,613.614,613.124,612.634,612.145,611.656,611.168,610.68,610.192,609.705,609.219,608.733,608.247,607.762,607.277,606.793,606.309,605.826,605.343,604.861,604.379,603.898,603.417,602.937,602.457,601.978,601.499,601.021,600.543,600.066,599.59,599.114,598.638,598.163,597.689,597.216,596.742,596.27,595.798,595.326,594.855,594.385,593.915,593.446,592.978,592.51,592.043,591.575,591.108,589.948,588.791,587.639,586.492,585.348,584.208,583.072,581.941,580.813,579.69,578.572,577.457,576.347,575.241,574.141,573.045,571.954,570.868,569.787,568.712,567.641,566.577,565.517,564.463,563.413,562.369,561.33,560.297,559.268,558.244,557.226,556.213,555.208,554.208,553.213,552.223,551.238,550.259,549.286,548.32,547.359,546.402,545.452,544.507,543.569,542.638,541.713,540.793,539.879,538.971,538.067,537.171,536.282,535.399,534.52,533.648,532.781,531.92,531.068,530.22,529.378,528.542,527.712,526.889,526.074,525.264,524.459,523.66,522.867,522.083,521.303,520.53,519.762,519.001,518.248,517.5,516.757,516.02,515.29,514.568,513.851,513.139,512.433,511.735,511.044,510.359,509.678,509.004,508.337,507.677,507.022,506.373,505.73,505.094,504.465,503.841,503.223,502.612,502.006,501.408,500.816,500.229,499.647,499.072,498.505,497.942,497.385,496.834,496.289,495.752,495.22,494.694,494.174,493.66,493.152,492.651,492.154,491.663,491.179,490.702,490.229,489.762,489.301,488.846,488.397,487.955,487.517,487.085,486.66,486.241,485.827,485.418,485.015,484.618,484.228,483.842,483.462,483.087,482.718,482.356,481.999,481.647,481.301,480.96,480.625,480.296,479.972,479.653,479.34,479.033,478.731,478.435,478.143,477.858,477.578,477.303,477.034,476.77,476.511,476.259,476.011,475.769,475.532,475.3,475.074,474.854,474.638,474.428,474.223,474.024,473.831,473.643,473.46,473.283,473.111,472.946,472.785,472.63,472.482,472.339,472.202,472.071,471.946,471.827,471.715,471.609,471.509,471.416,471.329,471.249,471.176,471.11,471.052,471.001,470.957,470.92,470.891,470.87,470.858,470.854])
# index to use in Marc Mentat. the "+1" is for python and Marc indexing to match
np.abs(a-(a[b.argmax()]+5*1e-3)).argmin()+1
# profile at peak +5ms
d3=np.array([752.592,752.591,752.588,752.584,752.577,752.568,752.557,752.545,752.53,752.513,752.494,752.473,752.45,752.425,752.398,752.369,752.338,752.305,752.269,752.232,752.193,752.152,752.109,752.064,752.017,751.968,751.917,751.864,751.809,751.752,751.693,751.632,751.569,751.504,751.437,751.368,751.297,751.224,751.149,751.072,750.993,750.912,750.83,750.745,750.658,750.569,750.479,750.386,750.292,750.195,750.097,749.996,749.894,749.789,749.683,749.575,749.465,749.353,749.239,749.123,749.005,748.885,748.763,748.639,748.514,748.386,748.257,748.125,747.992,747.857,747.72,747.581,747.44,747.297,747.152,747.006,746.857,746.707,746.555,746.4,746.244,746.087,745.927,745.765,745.602,745.436,745.269,745.1,744.929,744.756,744.582,744.405,744.227,744.047,743.865,743.681,743.495,743.308,743.119,742.928,742.735,742.54,742.344,742.146,741.946,741.744,741.54,741.335,741.128,740.919,740.708,740.495,740.281,740.065,739.847,739.628,739.407,739.184,738.959,738.732,738.504,738.274,738.043,737.81,737.574,737.338,737.099,736.859,736.617,736.374,736.129,735.882,735.633,735.383,735.131,734.878,734.623,734.366,734.107,733.847,733.586,733.322,733.057,732.791,732.523,732.253,731.982,731.709,731.434,731.158,730.88,730.601,730.32,730.038,729.754,729.468,729.181,728.892,728.602,728.31,728.017,727.722,727.426,727.128,726.829,726.528,726.226,725.922,725.617,725.31,725.002,724.692,724.381,724.069,723.755,723.439,723.123,722.804,722.485,722.163,721.841,721.517,721.192,720.865,720.537,720.207,719.876,719.544,719.211,718.876,718.539,718.202,717.863,717.523,717.181,716.838,716.494,716.148,715.802,715.453,715.104,714.753,714.401,714.048,713.693,713.338,712.981,712.623,712.263,711.903,711.541,711.178,710.813,710.448,710.081,709.713,709.344,708.974,708.602,708.23,707.856,707.481,707.105,706.728,706.35,705.971,705.59,705.208,704.826,704.442,704.057,703.671,703.284,702.896,702.507,702.117,701.726,701.333,700.94,700.546,700.15,699.754,699.357,698.958,698.559,698.159,697.757,697.355,696.952,696.548,696.143,695.736,695.33,694.922,694.513,694.103,693.692,693.281,692.868,692.455,692.041,691.626,691.21,690.793,690.375,689.957,689.538,689.118,688.697,688.275,687.852,687.429,687.005,686.58,686.154,685.728,685.301,684.872,684.444,684.014,683.584,683.153,682.721,682.289,681.856,681.422,680.987,680.552,680.116,679.68,679.243,678.805,678.366,677.927,677.487,677.047,676.606,676.164,675.722,675.279,674.836,674.392,673.947,673.502,673.056,672.61,672.163,671.716,671.268,670.819,670.37,669.921,669.471,669.02,668.569,668.118,667.666,667.214,666.761,666.307,665.854,665.399,664.944,664.489,664.034,663.578,663.121,662.665,662.207,661.75,661.292,660.833,660.375,659.916,659.456,658.996,658.536,658.076,657.615,657.154,656.692,656.231,655.769,655.306,654.844,654.381,653.918,653.454,652.991,652.527,652.062,651.598,651.133,650.668,650.203,649.738,649.273,648.807,648.341,647.875,647.408,646.942,646.475,646.009,645.542,645.074,644.607,644.14,643.672,643.205,642.737,642.269,641.801,641.333,640.865,640.397,639.928,639.46,638.992,638.523,638.055,637.586,637.117,636.649,636.18,635.711,635.243,634.774,634.305,633.837,633.368,632.899,632.431,631.962,631.493,631.025,630.556,630.088,629.619,629.151,628.683,628.214,627.746,627.278,626.81,626.342,625.875,625.407,624.94,624.472,624.005,623.538,623.071,622.604,622.138,621.671,621.205,620.739,620.273,619.807,619.341,618.876,618.41,617.945,617.481,617.016,616.552,616.087,615.624,615.16,614.696,614.233,613.77,613.308,612.845,612.383,611.921,611.46,610.998,610.537,610.076,609.616,609.156,608.696,608.236,607.777,607.318,606.86,606.402,605.944,605.486,605.029,604.572,604.116,603.66,603.204,602.749,602.294,601.84,601.385,600.932,600.478,600.025,599.573,599.12,598.669,598.218,597.767,597.316,596.866,596.417,595.968,595.519,595.071,594.623,594.176,593.729,593.283,592.837,592.391,591.947,591.502,591.058,590.615,590.172,589.73,589.288,588.846,588.405,587.965,587.525,587.086,586.647,586.209,585.771,585.334,584.898,584.462,584.026,583.591,583.156,582.073,580.994,579.919,578.848,577.78,576.716,575.656,574.6,573.548,572.5,571.456,570.416,569.38,568.348,567.32,566.297,565.279,564.264,563.255,562.25,561.25,560.254,559.264,558.278,557.296,556.32,555.348,554.381,553.419,552.462,551.51,550.563,549.621,548.685,547.753,546.827,545.905,544.988,544.078,543.172,542.272,541.376,540.486,539.602,538.723,537.85,536.982,536.12,535.263,534.411,533.564,532.723,531.889,531.06,530.236,529.418,528.605,527.798,526.997,526.201,525.411,524.626,523.847,523.074,522.308,521.547,520.791,520.04,519.296,518.558,517.826,517.099,516.377,515.662,514.953,514.25,513.551,512.859,512.172,511.492,510.818,510.148,509.485,508.827,508.177,507.531,506.891,506.257,505.629,505.007,504.39,503.779,503.174,502.575,501.981,501.394,500.812,500.236,499.665,499.101,498.543,497.99,497.442,496.9,496.364,495.834,495.309,494.79,494.276,493.769,493.268,492.772,492.281,491.796,491.317,490.844,490.376,489.913,489.456,489.005,488.56,488.119,487.684,487.255,486.832,486.414,486.002,485.594,485.193,484.797,484.407,484.021,483.641,483.267,482.898,482.535,482.176,481.823,481.476,481.134,480.797,480.466,480.139,479.818,479.503,479.193,478.888,478.588,478.294,478.005,477.721,477.442,477.168,476.9,476.637,476.38,476.127,475.88,475.637,475.401,475.169,474.943,474.721,474.505,474.295,474.09,473.889,473.694,473.505,473.321,473.142,472.969,472.8,472.638,472.481,472.329,472.183,472.042,471.907,471.777,471.654,471.536,471.423,471.317,471.216,471.122,471.033,470.95,470.873,470.802,470.738,470.68,470.628,470.583,470.544,470.512,470.486,470.467,470.456,470.453])

guess = [400,1000,0.005]
all_areas = []
plt.figure(figsize=(20, 10))
plt.plot(c*1e3,power_input(0,c)/power_input(0,c).max(),':',color=color[0],label='input heat profile')
plt.plot([5]*2,[0,1],':',color=color[0])
# all_areas.append(2*np.pi*(0.005**2))

plt.plot(c*1e3,d/d.max(),color=color[1],label='temp profile at peak temperature')
fit = curve_fit(gaussian_1D_fitting,c,d,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[1],label='gaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[1])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

plt.plot(c*1e3,d1/d1.max(),color=color[2],label='temp profile at peak temperature + 1.5ms')
fit = curve_fit(gaussian_1D_fitting,c,d1,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[2],label='gaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[2])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

plt.plot(c*1e3,d2/d2.max(),color=color[3],label='temp profile at peak temperature + 3ms')
fit = curve_fit(gaussian_1D_fitting,c,d2,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[3],label='gaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[3])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

plt.plot(c*1e3,d3/d3.max(),color=color[4],label='temp profile at peak temperature + 5ms')
fit = curve_fit(gaussian_1D_fitting,c,d3,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[4],label='gaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[4])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

plt.legend(loc='best')
plt.xlabel('radious [mm]')
plt.ylabel('fraction of max [au]')
plt.grid()
# plt.ylim(bottom=b.min()/1.2,top=b.max()*1.2)
# plt.xlim(left=-1,right=15)
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

plt.figure(figsize=(20, 10))
plt.errorbar([0,1.5,3,5],nominal_values(all_areas)/(2*np.pi*(0.005**2)),yerr=std_devs(all_areas)/(2*np.pi*(0.005**2)))
# plt.plot([0,5],[2*np.pi*(0.005**2)]*2,'--')
plt.plot([0,5],[1]*2,'--')
plt.xlabel('time after peak temp [ms]')
plt.ylabel('measured area / reference area [au]')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


# simulated weak pulses
# heat_flux = 2e8e^(-(r^2)/(2*(0.005^2)))*(0.0917*0.1+0.5*0.7*e^(-((t-0.00033-1)^2)/(2*(0.000144^2)))+0.5*0.208*e^(-((t-0.000457-1)^2)/(2*(0.000218^2))))

aw=np.array([0,0.0000300407,0.0000629425,0.0000993013,0.000139237,0.000183106,0.000231504,0.000284672,0.000329971,0.000388503,0.000452757,0.000523567,0.000601292,0.000686884,0.000781059,0.000884652,0.000998616,0.0011239,0.00126171,0.00141335,0.00158012,0.00171006,0.00189352,0.00209534,0.00231731,0.00256157,0.00283015,0.00312567,0.00345063,0.00380826,0.00420153,0.00463414,0.00511002,0.00563347,0.00620937,0.00678515,0.00736105,0.00793683,0.00851274,0.00908852,0.0096643,0.0102402,0.010816,0.0113919,0.0119677,0.0125434,0.0131193,0.0136951,0.014271,0.0148468,0.0154227,0.0159985,0.0165743,0.0171502,0.0177259,0.0183018,0.0188776,0.0194534,0.0200293,0.0206051,0.021181,0.0217568,0.0223325,0.0229085,0.0234842,0.0240601,0.0246359,0.0252118,0.0257876,0.0263634,0.0269393,0.027515,0.0280909,0.0286667,0.0292425,0.0298184,0.03])
bw=np.array([396.077,399.506,403.16,408.42,416.149,427.062,441.256,457.438,469.613,480.136,483.866,480.417,472.478,463.475,455.224,448.142,442.33,437.728,434.058,431.023,428.427,426.728,424.774,423.006,421.395,419.917,418.555,417.294,416.122,415.03,414.01,413.053,412.156,411.311,410.515,409.825,409.218,408.68,408.199,407.764,407.371,407.011,406.682,406.378,406.096,405.835,405.591,405.363,405.15,404.949,404.759,404.58,404.41,404.249,404.096,403.95,403.811,403.679,403.552,403.43,403.313,403.201,403.094,402.99,402.89,402.794,402.701,402.612,402.525,402.441,402.36,402.282,402.206,402.132,402.06,401.99,401.969])

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('weak pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
axx1, = ax1.plot(aw*1e3,bw,'b')
axx2, = ax2.plot(aw*1e3,1/4*power_input(aw,0),'r')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 heat flux [W/m2]', color=axx2.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('Comparison between strong (--) and weak (-) pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3.spines["right"].set_position(("axes", 1.1))
ax3.spines["right"].set_visible(True)
axx1, = ax1.plot(a*1e3,b,'--b')
axx1, = ax1.plot(aw*1e3,bw,'b')
axx2, = ax2.plot(a*1e3,b-b[0],'--r')
axx2, = ax2.plot(aw*1e3,bw-bw[0],'r')
interp = interp1d(aw,bw)(a)
axx2, = ax2.plot(a*1e3,(b-b[0])-(interp-bw[0]),':r')
axx3, = ax3.plot(a*1e3,power_input(a,0),'--g')
axx3, = ax3.plot(aw*1e3,1/4*power_input(aw,0),'g')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 dT [K]', color=axx2.get_color())  # we already handled the x-label with ax1
ax3.set_ylabel('r=0 heat flux [W/m2]', color=axx3.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax3.tick_params(axis='y', labelcolor=axx3.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


plt.figure(figsize=(20, 10))
plt.plot(aw*1e3,bw,color=color[0],label='full simulated temperature')
time_after_peak=1.5e-3
plt.plot([aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bw.min(),bw.max()],'--k')
bds = [[20,1e-3,3e-1,0],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
guess=[bw[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]), aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():], bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]-np.mean(bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]))**2)))
plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1],label='double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
plt.title('weak pulse')
# plt.ylim(bottom=b.min()*0.9,top=b.max()*1.2)
plt.xlim(right=10)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_energy1 = []
all_energy2 = []
all_energy3 = []
all_energy4 = []
all_energy5 = []
all_energy6 = []
for time_after_peak in np.array([0.5,1,1.5,2,3,5])*1e-3:
	plt.figure(figsize=(20, 10))
	plt.plot(aw*1e3,bw,color=color[0],linewidth=4,label='full simulated temperature')
	# plt.plot(a1*1e3,b1,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000616*1e3,1.34e-05*1e3,(13.25+0.0917*0.1)*8e8))
	# plt.plot(a2*1e3,b2,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(1e-07*1e3,0.00108*1e3,(0.1678+0.0917*0.1)*8e8))
	# plt.plot(a3*1e3,b3,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000762*1e3,1.66e-05*1e3,(10.31+0.0917*0.1)*8e8))
	# bds = [[20,1e-3,1e-4,1],[np.inf,np.inf,1e-3,1.0005]]
	# bds = [[b[0]-1,1e-3,1e-6,0],[b[0]+1,np.inf,1,a[np.abs(a-(a[bw.argmax()]+1.5e-3)).argmin()]]]
	# time_after_peak = 5e-3
	plt.title('weak pulse temperature profile used from ts=%.3gms after the temperature peak' %(time_after_peak*1e3))
	bds1 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess1=[bw[0],1,0.5,0.]
	bds2 = [[20,1e-3,1e-8,0],[np.inf,np.inf,1e-6,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess2=[bw[0],1,1e-6,0.]
	bds3 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,1e-7]]
	guess3=[bw[0],1,0.5,0.]
	bds4 = [[20,1e-3,0.01,0],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess4=[bw[0],1,1,0.]
	bds5 = [[20,1e-3,0.1,0],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess5=[bw[0],1,1,0.]
	bds6 = [[20,1e-3,1e-2,0.2*1e-3],[np.inf,np.inf,1,aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]]]
	guess6=[bw[0],1,0.5,0.6*1e-3]
	# plt.plot([1.5e-3]*2,[b.min(),b.max()],'--k')
	plt.plot([aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bw.min(),bw.max()],'--k')
	for i,arg in enumerate([[bds1,guess1],[bds2,guess2],[bds3,guess3],[bds4,guess4],[bds5,guess5],[bds6,guess6]]):
		bds,guess = arg
		# print(guess)
		fit = curve_fit(semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]), aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():], bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
		fit_wit_errors = correlated_values(fit[0],fit[1])
		energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
		pulse_duration_ms = 1e3*(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
		R2 = 1-np.sum(((bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]-np.mean(bw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin():]))**2)))
		# print(fit_wit_errors)
		if i==0:
			all_energy1.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1],label='free double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1])
		elif i==1:
			all_energy2.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus<1e-6)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==2:
			all_energy3.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0<1e-7)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==3:
			all_energy4.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.01)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==4:
			all_energy5.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.1)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==5:
			all_energy6.append(energy)
			plt.plot(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0>0.2)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aw[np.abs(aw-(aw[bw.argmax()]+time_after_peak)).argmin()])(aw[aw-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
	# guess = [1000,1e8,1e-3,0]
	# bds=[[20,0,0,0],[np.inf,np.inf,np.inf,np.inf]]
	# fit = curve_fit(exponential_decay, a[np.abs(a-(a[bw.argmax()]+time_after_peak)).argmin():], bw[np.abs(a-(a[bw.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	# fit_wit_errors = correlated_values(fit[0],fit[1])
	# plt.plot(a*1e3,exponential_decay(a,*fit[0]),'--',label='exponential decay')

	plt.plot(aw*1e3,power_input(aw,0)/np.max(power_input(aw,0))*(bw.max()-bw.min())+bw.min(),':',color=color[i+2],label='power input (not in scale), energy input~5.5J')
	plt.legend(loc='best', fontsize='small')
	plt.ylim(top=(bw.max()-bw.min())*1.4+bw.min())
	plt.xlim(left=-1,right=15)
	plt.xlabel('time [ms]')
	plt.ylabel('temperature [K]')
	plt.grid()
	figure_index+=1
	plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	plt.close('all')
	# plt.pause(0.01)

all_energy1 = np.array(all_energy1)
all_energy2 = np.array(all_energy2)
all_energy3 = np.array(all_energy3)
all_energy4 = np.array(all_energy4)
all_energy5 = np.array(all_energy5)
all_energy6 = np.array(all_energy6)
nominal_energy = 5.5	# J
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy1)/nominal_energy,yerr=std_devs(all_energy1)/nominal_energy,color=color[1],label='free double root')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy2)/nominal_energy,yerr=std_devs(all_energy2)/nominal_energy,color=color[2],linestyle='--',label='constrained (taus<1e-6)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy3)/nominal_energy,yerr=std_devs(all_energy3)/nominal_energy,color=color[3],linestyle='--',label='constrained (t0<1e-7)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy4)/nominal_energy,yerr=std_devs(all_energy4)/nominal_energy,color=color[4],linestyle='--',label='constrained (taus>0.01)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy5)/nominal_energy,yerr=std_devs(all_energy5)/nominal_energy,color=color[5],linestyle='--',label='constrained (taus>0.1)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy6)/nominal_energy,yerr=std_devs(all_energy6)/nominal_energy,color=color[6],linestyle='--',label='constrained (t0>0.2)')
plt.plot([0,5],[1]*2,'--k')
plt.plot([1.5]*2,[1,1.1],'--k')
plt.xlabel('start of profile used after temperature peak (ts) [ms]')
plt.ylabel('fitted/delivered energy [au]')
plt.title('weak pulse')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_all_energy1.append(all_energy1/nominal_energy)

np.abs(aw-(aw[bw.argmax()]+0*1e-3)).argmin()+1
# profile at peak temperature
dw=np.array([483.866,483.86,483.849,483.841,483.833,483.823,483.812,483.798,483.784,483.772,483.761,483.75,483.738,483.724,483.709,483.693,483.677,483.659,483.641,483.621,483.601,483.579,483.556,483.532,483.508,483.482,483.455,483.427,483.398,483.368,483.337,483.305,483.272,483.238,483.203,483.166,483.129,483.091,483.051,483.011,482.97,482.927,482.884,482.839,482.794,482.747,482.7,482.651,482.601,482.55,482.499,482.446,482.392,482.337,482.282,482.225,482.167,482.108,482.048,481.987,481.925,481.862,481.798,481.733,481.667,481.601,481.533,481.464,481.394,481.322,481.25,481.177,481.103,481.028,480.952,480.875,480.798,480.719,480.639,480.558,480.476,480.393,480.309,480.224,480.138,480.051,479.964,479.875,479.785,479.695,479.603,479.51,479.417,479.322,479.227,479.13,479.033,478.934,478.835,478.735,478.634,478.531,478.428,478.324,478.219,478.113,478.007,477.899,477.79,477.681,477.57,477.459,477.346,477.233,477.119,477.004,476.888,476.771,476.653,476.534,476.415,476.294,476.173,476.05,475.927,475.803,475.678,475.553,475.426,475.298,475.17,475.04,474.91,474.779,474.647,474.514,474.381,474.246,474.111,473.975,473.838,473.7,473.561,473.422,473.281,473.14,472.998,472.855,472.712,472.567,472.422,472.276,472.129,471.981,471.832,471.683,471.533,471.382,471.23,471.078,470.925,470.771,470.616,470.46,470.304,470.146,469.988,469.83,469.67,469.51,469.349,469.187,469.025,468.862,468.698,468.533,468.368,468.202,468.035,467.867,467.699,467.53,467.36,467.19,467.018,466.847,466.674,466.501,466.327,466.152,465.977,465.801,465.624,465.447,465.269,465.09,464.911,464.731,464.55,464.369,464.187,464.004,463.821,463.637,463.452,463.267,463.082,462.895,462.708,462.52,462.332,462.143,461.954,461.764,461.573,461.382,461.19,460.997,460.804,460.611,460.416,460.222,460.026,459.83,459.634,459.437,459.239,459.041,458.842,458.643,458.443,458.243,458.042,457.841,457.639,457.437,457.234,457.03,456.826,456.622,456.417,456.211,456.005,455.799,455.592,455.385,455.177,454.969,454.76,454.55,454.341,454.13,453.92,453.709,453.497,453.285,453.073,452.86,452.646,452.433,452.219,452.004,451.789,451.574,451.358,451.142,450.925,450.708,450.49,450.273,450.055,449.836,449.617,449.398,449.178,448.958,448.738,448.517,448.296,448.074,447.852,447.63,447.408,447.185,446.962,446.738,446.514,446.29,446.066,445.841,445.616,445.391,445.165,444.939,444.713,444.486,444.26,444.033,443.805,443.578,443.35,443.122,442.893,442.664,442.435,442.206,441.977,441.747,441.517,441.287,441.057,440.826,440.595,440.364,440.133,439.902,439.67,439.438,439.206,438.974,438.741,438.509,438.276,438.043,437.81,437.576,437.343,437.109,436.875,436.641,436.407,436.173,435.938,435.704,435.469,435.234,434.999,434.764,434.529,434.294,434.058,433.823,433.587,433.351,433.115,432.879,432.643,432.407,432.171,431.934,431.698,431.461,431.225,430.988,430.751,430.515,430.278,430.041,429.804,429.567,429.33,429.093,428.856,428.619,428.381,428.144,427.907,427.67,427.433,427.195,426.958,426.721,426.483,426.246,426.009,425.772,425.534,425.297,425.06,424.823,424.585,424.348,424.111,423.874,423.637,423.4,423.163,422.926,422.689,422.452,422.216,421.979,421.742,421.506,421.269,421.033,420.796,420.56,420.324,420.088,419.852,419.616,419.38,419.144,418.909,418.673,418.438,418.202,417.967,417.732,417.497,417.262,417.028,416.793,416.559,416.325,416.09,415.856,415.623,415.389,415.155,414.922,414.689,414.455,414.223,413.99,413.757,413.525,413.292,413.06,412.829,412.597,412.365,412.134,411.903,411.672,411.441,411.21,410.98,410.75,410.52,410.29,410.06,409.831,409.602,409.373,409.144,408.916,408.688,408.46,408.232,408.004,407.777,407.55,407.323,407.096,406.87,406.644,406.418,406.192,405.967,405.742,405.517,405.293,405.068,404.844,404.621,404.397,404.174,403.951,403.729,403.507,403.285,403.063,402.842,402.621,402.4,402.18,401.96,401.74,401.52,401.301,401.082,400.864,400.646,400.428,400.21,399.993,399.776,399.561,399.345,399.13,398.916,398.702,398.489,398.276,398.063,397.85,397.64,397.438,397.234,396.677,396.144,395.604,395.067,394.537,394.012,393.49,392.969,392.457,391.943,391.435,390.93,390.432,389.936,389.443,388.951,388.46,387.971,387.482,386.996,386.512,386.029,385.547,385.069,384.596,384.124,383.654,383.189,382.728,382.271,381.819,381.366,380.91,380.454,380.006,379.566,379.13,378.697,378.26,377.825,377.398,376.978,376.561,376.146,375.729,375.309,374.893,374.482,374.077,373.676,373.282,372.885,372.484,372.09,371.704,371.323,370.947,370.57,370.19,369.817,369.452,369.088,368.727,368.365,368,367.642,367.294,366.95,366.605,366.257,365.915,365.58,365.249,364.916,364.581,364.254,363.935,363.62,363.305,362.986,362.675,362.371,362.07,361.768,361.464,361.165,360.873,360.586,360.299,360.01,359.726,359.449,359.176,358.903,358.628,358.358,358.094,357.833,357.572,357.309,357.053,356.805,356.56,356.315,356.069,355.829,355.596,355.364,355.131,354.897,354.668,354.443,354.222,354.002,353.781,353.566,353.356,353.15,352.943,352.736,352.535,352.339,352.146,351.952,351.757,351.567,351.382,351.199,351.016,350.834,350.656,350.483,350.313,350.143,349.974,349.81,349.65,349.491,349.333,349.175,349.02,348.869,348.721,348.574,348.427,348.285,348.147,348.011,347.875,347.74,347.608,347.481,347.356,347.231,347.107,346.986,346.868,346.752,346.637,346.523,346.412,346.305,346.2,346.096,345.992,345.892,345.796,345.701,345.607,345.513,345.423,345.335,345.25,345.165,345.082,345.001,344.923,344.847,344.772,344.698,344.627,344.558,344.491,344.426,344.361,344.299,344.239,344.183,344.127,344.074,344.022,343.971,343.923,343.876,343.833,343.794,343.759,343.729,343.707,343.692])
np.abs(aw-(aw[bw.argmax()]+1.5*1e-3)).argmin()+1
# profile at peak +1.5ms
dw1=np.array([424.774,424.774,424.774,424.774,424.772,424.77,424.767,424.764,424.76,424.755,424.749,424.743,424.736,424.729,424.721,424.712,424.703,424.693,424.683,424.672,424.66,424.648,424.635,424.622,424.608,424.594,424.579,424.563,424.547,424.53,424.512,424.494,424.476,424.457,424.437,424.416,424.395,424.374,424.352,424.329,424.306,424.282,424.257,424.232,424.207,424.18,424.154,424.126,424.098,424.07,424.041,424.011,423.981,423.95,423.918,423.886,423.854,423.821,423.787,423.753,423.718,423.683,423.647,423.61,423.573,423.535,423.497,423.458,423.419,423.379,423.338,423.297,423.255,423.213,423.171,423.127,423.083,423.039,422.994,422.948,422.902,422.856,422.808,422.76,422.712,422.663,422.614,422.564,422.514,422.462,422.411,422.359,422.306,422.253,422.199,422.145,422.09,422.034,421.978,421.922,421.865,421.808,421.75,421.691,421.632,421.572,421.512,421.451,421.39,421.328,421.266,421.203,421.14,421.076,421.012,420.947,420.882,420.816,420.749,420.683,420.615,420.547,420.479,420.41,420.34,420.27,420.2,420.129,420.058,419.986,419.913,419.84,419.767,419.693,419.618,419.544,419.468,419.392,419.316,419.239,419.162,419.084,419.006,418.927,418.848,418.768,418.688,418.608,418.526,418.445,418.363,418.28,418.197,418.114,418.03,417.946,417.861,417.776,417.69,417.604,417.517,417.43,417.343,417.255,417.166,417.078,416.988,416.899,416.809,416.718,416.627,416.536,416.444,416.351,416.259,416.166,416.072,415.978,415.884,415.789,415.694,415.598,415.502,415.406,415.309,415.212,415.114,415.016,414.918,414.819,414.719,414.62,414.52,414.419,414.318,414.217,414.116,414.014,413.911,413.809,413.706,413.602,413.498,413.394,413.289,413.185,413.079,412.974,412.868,412.761,412.654,412.547,412.44,412.332,412.224,412.115,412.007,411.897,411.788,411.678,411.568,411.457,411.346,411.235,411.123,411.012,410.899,410.787,410.674,410.561,410.447,410.334,410.22,410.105,409.99,409.875,409.76,409.645,409.529,409.412,409.296,409.179,409.062,408.945,408.827,408.709,408.591,408.472,408.353,408.234,408.115,407.995,407.875,407.755,407.635,407.514,407.393,407.272,407.15,407.029,406.906,406.784,406.662,406.539,406.416,406.293,406.169,406.046,405.921,405.797,405.673,405.548,405.423,405.298,405.173,405.047,404.921,404.796,404.669,404.543,404.416,404.289,404.162,404.035,403.908,403.78,403.652,403.524,403.396,403.267,403.139,403.01,402.881,402.752,402.622,402.493,402.363,402.233,402.103,401.973,401.842,401.712,401.581,401.45,401.319,401.188,401.056,400.925,400.793,400.661,400.529,400.397,400.264,400.132,399.999,399.867,399.734,399.601,399.468,399.334,399.201,399.068,398.934,398.8,398.666,398.532,398.398,398.264,398.13,397.995,397.861,397.726,397.591,397.457,397.322,397.187,397.051,396.916,396.781,396.645,396.51,396.374,396.239,396.103,395.967,395.831,395.695,395.559,395.423,395.287,395.151,395.014,394.878,394.742,394.605,394.469,394.332,394.195,394.059,393.922,393.785,393.648,393.511,393.375,393.238,393.101,392.964,392.827,392.689,392.552,392.415,392.278,392.141,392.004,391.866,391.729,391.592,391.455,391.317,391.18,391.043,390.905,390.768,390.631,390.493,390.356,390.219,390.082,389.944,389.807,389.67,389.532,389.395,389.258,389.121,388.983,388.846,388.709,388.572,388.435,388.298,388.161,388.024,387.887,387.75,387.613,387.476,387.339,387.203,387.066,386.929,386.793,386.656,386.519,386.383,386.247,386.11,385.974,385.838,385.701,385.565,385.429,385.293,385.157,385.022,384.886,384.75,384.614,384.479,384.343,384.208,384.073,383.937,383.802,383.667,383.532,383.397,383.262,383.128,382.993,382.859,382.724,382.59,382.456,382.322,382.188,382.054,381.92,381.786,381.652,381.519,381.386,381.252,381.119,380.986,380.853,380.721,380.588,380.455,380.323,380.191,380.058,379.926,379.795,379.663,379.531,379.4,379.268,379.137,379.006,378.875,378.744,378.613,378.483,378.352,378.222,378.092,377.962,377.832,377.702,377.573,377.443,377.314,377.185,377.056,376.927,376.799,376.67,376.542,376.414,376.286,376.158,376.03,375.902,375.775,375.648,375.521,375.394,375.267,375.139,375.012,374.699,374.385,374.074,373.764,373.454,373.145,372.837,372.531,372.225,371.921,371.618,371.316,371.015,370.716,370.417,370.12,369.825,369.531,369.239,368.948,368.659,368.371,368.084,367.799,367.516,367.233,366.953,366.673,366.395,366.118,365.843,365.57,365.298,365.029,364.76,364.492,364.226,363.962,363.699,363.439,363.179,362.921,362.664,362.409,362.156,361.905,361.656,361.408,361.161,360.916,360.673,360.431,360.192,359.954,359.717,359.482,359.248,359.016,358.787,358.559,358.332,358.106,357.882,357.661,357.442,357.224,357.007,356.792,356.579,356.368,356.159,355.95,355.744,355.539,355.337,355.136,354.936,354.738,354.542,354.348,354.155,353.964,353.774,353.586,353.401,353.217,353.034,352.853,352.674,352.497,352.321,352.147,351.974,351.803,351.634,351.467,351.301,351.137,350.975,350.815,350.656,350.498,350.342,350.188,350.036,349.885,349.735,349.587,349.441,349.297,349.155,349.014,348.874,348.736,348.601,348.466,348.333,348.201,348.072,347.944,347.817,347.692,347.568,347.446,347.326,347.207,347.09,346.974,346.86,346.748,346.637,346.527,346.419,346.313,346.208,346.104,346.002,345.901,345.803,345.705,345.61,345.515,345.422,345.331,345.241,345.152,345.065,344.979,344.895,344.813,344.731,344.651,344.573,344.496,344.421,344.347,344.274,344.202,344.133,344.065,343.998,343.932,343.868,343.805,343.744,343.684,343.625,343.567,343.512,343.457,343.404,343.353,343.302,343.253,343.206,343.16,343.115,343.072,343.031,342.99,342.952,342.915,342.879,342.845,342.812,342.782,342.752,342.725,342.699,342.675,342.654,342.634,342.616,342.601,342.588,342.577,342.568,342.561,342.558,342.557])
np.abs(aw-(aw[bw.argmax()]+3*1e-3)).argmin()+1
# profile at peak +3ms
dw2=np.array([416.122,416.122,416.122,416.12,416.119,416.116,416.114,416.111,416.107,416.103,416.098,416.092,416.086,416.079,416.072,416.065,416.057,416.048,416.039,416.029,416.019,416.008,415.997,415.985,415.973,415.96,415.946,415.933,415.918,415.903,415.888,415.872,415.855,415.838,415.821,415.803,415.784,415.765,415.745,415.725,415.705,415.683,415.662,415.64,415.617,415.594,415.57,415.546,415.521,415.496,415.47,415.444,415.417,415.39,415.362,415.334,415.305,415.275,415.245,415.215,415.184,415.153,415.121,415.089,415.056,415.022,414.989,414.954,414.919,414.884,414.848,414.812,414.775,414.738,414.7,414.661,414.622,414.583,414.543,414.503,414.462,414.421,414.379,414.337,414.294,414.251,414.207,414.163,414.118,414.073,414.027,413.981,413.934,413.887,413.839,413.791,413.743,413.694,413.644,413.594,413.544,413.493,413.441,413.39,413.337,413.284,413.231,413.177,413.123,413.068,413.013,412.958,412.902,412.845,412.788,412.731,412.673,412.615,412.556,412.496,412.437,412.377,412.316,412.255,412.193,412.131,412.069,412.006,411.943,411.879,411.815,411.75,411.685,411.62,411.554,411.488,411.421,411.354,411.286,411.218,411.149,411.081,411.011,410.942,410.871,410.801,410.73,410.658,410.586,410.514,410.441,410.368,410.295,410.221,410.147,410.072,409.997,409.921,409.845,409.769,409.692,409.615,409.537,409.459,409.381,409.302,409.223,409.144,409.064,408.984,408.903,408.822,408.74,408.659,408.576,408.494,408.411,408.328,408.244,408.16,408.075,407.991,407.906,407.82,407.734,407.648,407.561,407.474,407.387,407.299,407.211,407.123,407.034,406.945,406.856,406.766,406.676,406.585,406.495,406.403,406.312,406.22,406.128,406.036,405.943,405.85,405.756,405.663,405.568,405.474,405.379,405.284,405.189,405.093,404.997,404.901,404.804,404.707,404.61,404.513,404.415,404.317,404.218,404.12,404.021,403.921,403.822,403.722,403.622,403.521,403.42,403.319,403.218,403.116,403.014,402.912,402.81,402.707,402.604,402.501,402.398,402.294,402.19,402.086,401.981,401.876,401.771,401.666,401.56,401.455,401.349,401.242,401.136,401.029,400.922,400.815,400.707,400.599,400.491,400.383,400.275,400.166,400.057,399.948,399.839,399.729,399.62,399.51,399.399,399.289,399.178,399.067,398.957,398.845,398.734,398.622,398.51,398.398,398.286,398.174,398.061,397.948,397.835,397.722,397.608,397.495,397.381,397.267,397.153,397.039,396.925,396.81,396.695,396.58,396.465,396.35,396.234,396.119,396.003,395.887,395.771,395.655,395.538,395.422,395.305,395.188,395.071,394.954,394.837,394.719,394.602,394.484,394.366,394.248,394.13,394.012,393.894,393.775,393.657,393.538,393.419,393.3,393.181,393.062,392.943,392.824,392.704,392.585,392.465,392.345,392.225,392.105,391.985,391.865,391.745,391.624,391.504,391.383,391.263,391.142,391.021,390.9,390.779,390.659,390.537,390.416,390.295,390.174,390.052,389.931,389.809,389.688,389.566,389.445,389.323,389.201,389.079,388.957,388.835,388.713,388.591,388.469,388.347,388.225,388.103,387.98,387.858,387.736,387.613,387.491,387.369,387.246,387.124,387.001,386.879,386.756,386.634,386.511,386.388,386.266,386.143,386.021,385.898,385.775,385.653,385.53,385.407,385.285,385.162,385.039,384.917,384.794,384.671,384.549,384.426,384.303,384.181,384.058,383.936,383.813,383.691,383.568,383.446,383.323,383.201,383.078,382.956,382.834,382.711,382.589,382.467,382.344,382.222,382.1,381.978,381.856,381.734,381.612,381.49,381.368,381.247,381.125,381.003,380.881,380.76,380.638,380.517,380.395,380.274,380.153,380.031,379.91,379.789,379.668,379.547,379.426,379.305,379.185,379.064,378.943,378.823,378.702,378.582,378.462,378.342,378.221,378.101,377.982,377.862,377.742,377.622,377.503,377.383,377.264,377.145,377.026,376.906,376.787,376.669,376.55,376.431,376.313,376.194,376.076,375.958,375.839,375.721,375.604,375.486,375.368,375.251,375.133,375.016,374.899,374.782,374.665,374.548,374.431,374.315,374.198,374.082,373.966,373.85,373.734,373.618,373.502,373.387,373.271,373.156,373.041,372.926,372.811,372.696,372.582,372.467,372.353,372.239,372.125,372.011,371.897,371.784,371.501,371.219,370.938,370.659,370.38,370.102,369.825,369.549,369.274,369,368.728,368.456,368.185,367.916,367.647,367.38,367.114,366.849,366.586,366.323,366.062,365.802,365.544,365.286,365.03,364.776,364.522,364.27,364.019,363.769,363.52,363.273,363.028,362.784,362.541,362.299,362.058,361.819,361.582,361.346,361.111,360.877,360.645,360.414,360.185,359.958,359.732,359.507,359.284,359.062,358.841,358.622,358.405,358.189,357.974,357.761,357.549,357.339,357.13,356.923,356.717,356.513,356.31,356.108,355.909,355.711,355.514,355.319,355.125,354.933,354.742,354.553,354.365,354.179,353.995,353.812,353.63,353.45,353.271,353.094,352.919,352.745,352.572,352.401,352.232,352.064,351.898,351.733,351.57,351.408,351.248,351.089,350.931,350.776,350.622,350.469,350.318,350.168,350.02,349.873,349.728,349.584,349.442,349.301,349.162,349.024,348.888,348.753,348.619,348.488,348.358,348.229,348.101,347.975,347.851,347.728,347.606,347.486,347.368,347.25,347.135,347.02,346.907,346.796,346.686,346.577,346.47,346.364,346.26,346.157,346.056,345.956,345.857,345.76,345.664,345.569,345.476,345.384,345.294,345.205,345.118,345.031,344.946,344.863,344.781,344.7,344.621,344.543,344.466,344.391,344.317,344.244,344.173,344.102,344.034,343.967,343.901,343.836,343.772,343.711,343.65,343.591,343.532,343.476,343.42,343.366,343.314,343.262,343.212,343.163,343.116,343.07,343.025,342.982,342.94,342.899,342.86,342.822,342.786,342.751,342.718,342.686,342.656,342.627,342.599,342.574,342.549,342.526,342.505,342.486,342.468,342.452,342.438,342.426,342.415,342.406,342.399,342.394,342.391,342.39])
np.abs(aw-(aw[bw.argmax()]+5*1e-3)).argmin()+1
# profile at peak +5ms
dw3=np.array([411.311,411.311,411.31,411.309,411.308,411.305,411.303,411.3,411.296,411.292,411.287,411.282,411.277,411.271,411.264,411.257,411.249,411.241,411.233,411.224,411.214,411.204,411.194,411.183,411.172,411.16,411.147,411.134,411.121,411.107,411.093,411.078,411.063,411.047,411.031,411.014,410.997,410.979,410.961,410.942,410.923,410.904,410.884,410.863,410.842,410.82,410.798,410.776,410.753,410.73,410.706,410.681,410.656,410.631,410.605,410.579,410.552,410.525,410.497,410.469,410.441,410.412,410.382,410.352,410.322,410.291,410.259,410.227,410.195,410.162,410.129,410.095,410.061,410.026,409.991,409.955,409.92,409.883,409.846,409.809,409.771,409.732,409.694,409.654,409.615,409.575,409.534,409.493,409.452,409.409,409.367,409.324,409.281,409.237,409.193,409.149,409.103,409.058,409.012,408.966,408.919,408.872,408.824,408.776,408.727,408.678,408.629,408.579,408.529,408.478,408.427,408.375,408.323,408.271,408.218,408.164,408.111,408.057,408.002,407.947,407.892,407.836,407.779,407.723,407.666,407.608,407.55,407.492,407.433,407.374,407.315,407.255,407.194,407.134,407.072,407.011,406.949,406.887,406.824,406.761,406.697,406.633,406.569,406.504,406.439,406.373,406.307,406.241,406.174,406.107,406.04,405.972,405.904,405.835,405.766,405.697,405.627,405.557,405.486,405.415,405.344,405.273,405.201,405.128,405.055,404.982,404.909,404.835,404.761,404.686,404.611,404.536,404.461,404.385,404.308,404.232,404.155,404.077,404,403.922,403.843,403.764,403.685,403.606,403.526,403.446,403.366,403.285,403.204,403.122,403.041,402.959,402.876,402.793,402.71,402.627,402.543,402.459,402.375,402.29,402.205,402.12,402.034,401.949,401.862,401.776,401.689,401.602,401.514,401.427,401.339,401.25,401.162,401.073,400.984,400.894,400.805,400.714,400.624,400.533,400.442,400.351,400.26,400.168,400.076,399.984,399.891,399.798,399.705,399.612,399.518,399.424,399.33,399.236,399.141,399.046,398.951,398.855,398.76,398.664,398.567,398.471,398.374,398.277,398.18,398.083,397.985,397.887,397.789,397.691,397.592,397.493,397.394,397.295,397.195,397.096,396.995,396.895,396.795,396.694,396.593,396.492,396.391,396.29,396.188,396.086,395.984,395.882,395.779,395.676,395.573,395.47,395.367,395.264,395.16,395.056,394.952,394.848,394.743,394.639,394.534,394.429,394.324,394.218,394.113,394.007,393.901,393.795,393.689,393.583,393.476,393.369,393.262,393.156,393.048,392.941,392.834,392.726,392.618,392.51,392.402,392.294,392.185,392.077,391.968,391.86,391.751,391.642,391.532,391.423,391.313,391.204,391.094,390.984,390.874,390.764,390.654,390.544,390.433,390.323,390.212,390.101,389.99,389.88,389.768,389.657,389.546,389.434,389.323,389.211,389.1,388.988,388.876,388.764,388.652,388.54,388.427,388.315,388.203,388.09,387.978,387.865,387.752,387.639,387.526,387.413,387.3,387.187,387.074,386.961,386.848,386.734,386.621,386.507,386.394,386.281,386.167,386.053,385.939,385.826,385.712,385.598,385.484,385.37,385.256,385.142,385.028,384.914,384.8,384.685,384.571,384.457,384.343,384.228,384.114,384,383.885,383.771,383.657,383.542,383.428,383.313,383.199,383.084,382.97,382.855,382.741,382.626,382.512,382.397,382.283,382.168,382.054,381.939,381.825,381.71,381.596,381.481,381.367,381.252,381.138,381.024,380.909,380.795,380.68,380.566,380.452,380.338,380.223,380.109,379.995,379.881,379.767,379.652,379.538,379.424,379.31,379.196,379.082,378.969,378.855,378.741,378.627,378.513,378.4,378.286,378.173,378.059,377.946,377.832,377.719,377.606,377.492,377.379,377.266,377.153,377.04,376.927,376.814,376.701,376.589,376.476,376.364,376.251,376.139,376.026,375.914,375.802,375.69,375.578,375.466,375.354,375.242,375.13,375.019,374.907,374.796,374.685,374.573,374.462,374.351,374.24,374.129,374.019,373.908,373.797,373.687,373.576,373.466,373.356,373.246,373.136,373.026,372.916,372.807,372.697,372.588,372.478,372.369,372.26,372.151,372.043,371.934,371.825,371.717,371.608,371.5,371.392,371.284,371.176,371.068,370.961,370.853,370.746,370.639,370.532,370.425,370.318,370.211,370.105,369.998,369.733,369.469,369.205,368.943,368.681,368.42,368.16,367.901,367.644,367.387,367.131,366.876,366.622,366.369,366.117,365.866,365.616,365.367,365.12,364.873,364.628,364.384,364.141,363.899,363.658,363.418,363.18,362.943,362.707,362.472,362.238,362.005,361.774,361.545,361.316,361.088,360.862,360.637,360.413,360.191,359.97,359.75,359.532,359.314,359.098,358.884,358.671,358.459,358.248,358.039,357.831,357.625,357.42,357.216,357.014,356.812,356.613,356.414,356.217,356.022,355.828,355.635,355.443,355.253,355.065,354.878,354.692,354.508,354.325,354.143,353.963,353.784,353.607,353.431,353.257,353.084,352.912,352.741,352.573,352.405,352.24,352.075,351.912,351.75,351.59,351.431,351.274,351.118,350.963,350.81,350.658,350.508,350.359,350.211,350.065,349.921,349.778,349.636,349.495,349.356,349.219,349.083,348.948,348.815,348.683,348.552,348.423,348.295,348.169,348.044,347.92,347.798,347.677,347.558,347.44,347.324,347.208,347.094,346.982,346.871,346.761,346.652,346.545,346.44,346.335,346.232,346.131,346.031,345.932,345.834,345.738,345.643,345.549,345.457,345.366,345.277,345.188,345.101,345.016,344.932,344.849,344.767,344.687,344.608,344.53,344.453,344.378,344.304,344.232,344.161,344.091,344.022,343.954,343.888,343.824,343.76,343.698,343.637,343.577,343.519,343.462,343.406,343.351,343.298,343.246,343.196,343.147,343.098,343.052,343.006,342.962,342.92,342.878,342.838,342.8,342.762,342.726,342.691,342.658,342.626,342.596,342.567,342.539,342.513,342.488,342.465,342.443,342.423,342.404,342.386,342.37,342.356,342.344,342.332,342.323,342.315,342.308,342.304,342.301,342.3])

guess = [400,1000,0.005]
all_areas = []
plt.figure(figsize=(20, 10))
plt.plot(c*1e3,power_input(0,c)/power_input(0,c).max(),':',color=color[0],label='input heat profile')
plt.plot([5]*2,[0,1],':',color=color[0])
# all_areas.append(2*np.pi*(0.005**2))

plt.plot(c*1e3,dw/dw.max(),color=color[1],label='temp profile at peak temperature')
fit = curve_fit(gaussian_1D_fitting,c,dw,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[1],label='gaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[1])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

plt.plot(c*1e3,dw1/dw1.max(),color=color[2],label='temp profile at peak temperature + 1.5ms')
fit = curve_fit(gaussian_1D_fitting,c,dw1,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[2],label='gaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[2])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

plt.plot(c*1e3,dw2/dw2.max(),color=color[3],label='temp profile at peak temperature + 3ms')
fit = curve_fit(gaussian_1D_fitting,c,dw2,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[3],label='gaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[3])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

plt.plot(c*1e3,dw3/dw3.max(),color=color[4],label='temp profile at peak temperature + 5ms')
fit = curve_fit(gaussian_1D_fitting,c,dw3,guess)
fit_wit_errors = correlated_values(fit[0],fit[1])
plt.plot(c*1e3,gaussian_1D_fitting(c,*fit[0])/gaussian_1D_fitting(c,*fit[0]).max(),'--',color=color[4],label='gaussian fit, sigma=%.3g+/-%.3gmm' %(nominal_values(fit_wit_errors[2]*1e3),std_devs(fit_wit_errors[2]*1e3)))
plt.plot([fit[0][2]*1e3]*2,[0,1],'--',color=color[4])
all_areas.append(2*np.pi*((fit_wit_errors[2])**2))

plt.legend(loc='best')
plt.xlabel('radious [mm]')
plt.ylabel('weak pulse fraction of max [au]')
plt.grid()
# plt.ylim(bottom=b.min()/1.2,top=b.max()*1.2)
# plt.xlim(left=-1,right=15)
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

plt.figure(figsize=(20, 10))
plt.errorbar([0,1.5,3,5],nominal_values(all_areas)/(2*np.pi*(0.005**2)),yerr=std_devs(all_areas)/(2*np.pi*(0.005**2)))
# plt.plot([0,5],[2*np.pi*(0.005**2)]*2,'--')
plt.plot([0,5],[1]*2,'--')
plt.xlabel('time after peak temp [ms]')
plt.ylabel('weak pulse measured area / reference area [au]')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


# simulated very weak pulses
# heat_flux = 0.5e8e^(-(r^2)/(2*(0.005^2)))*(0.0917*0.1+0.5*0.7*e^(-((t-0.00033-1)^2)/(2*(0.000144^2)))+0.5*0.208*e^(-((t-0.000457-1)^2)/(2*(0.000218^2))))

aww=np.array([0,0.0000599623,0.000131965,0.000218391,0.000322104,0.000329971,0.000454426,0.000603676,0.000782847,0.000997901,0.00125587,0.00156546,0.00171006,0.00208151,0.00252736,0.00306225,0.00366223,0.00426233,0.00486231,0.00546229,0.00606227,0.00666225,0.00726223,0.00786233,0.00846231,0.00906229,0.00966227,0.0102623,0.0108622,0.0114623,0.0120623,0.0126623,0.0132623,0.0138622,0.0144622,0.0150623,0.0156623,0.0162623,0.0168623,0.0174622,0.0180622,0.0186623,0.0192623,0.0198623,0.0204623,0.0210623,0.0216622,0.0222623,0.0228623,0.0234623,0.0240623,0.0246623,0.0252622,0.0258622,0.0264623,0.0270623,0.0276623,0.0282623,0.0288622,0.0294622,0.03])
bww=np.array([323.918,325.686,328.874,334.852,342.402,342.931,345.595,342.12,337.967,334.978,333.082,331.768,331.279,330.428,329.713,329.101,328.597,328.208,327.898,327.643,327.429,327.246,327.088,326.949,326.826,326.715,326.616,326.526,326.443,326.368,326.298,326.233,326.173,326.117,326.065,326.016,325.969,325.926,325.884,325.845,325.808,325.773,325.739,325.707,325.676,325.647,325.619,325.592,325.566,325.541,325.517,325.494,325.472,325.45,325.429,325.409,325.39,325.371,325.353,325.335,325.32])

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('very weak pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
axx1, = ax1.plot(aww*1e3,bww,'b')
axx2, = ax2.plot(aww*1e3,1/8*power_input(aww,0),'r')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 heat flux [W/m2]', color=axx2.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('Comparison between strong (--) and weak (-) pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3.spines["right"].set_position(("axes", 1.1))
ax3.spines["right"].set_visible(True)
axx1, = ax1.plot(a*1e3,b,'--b')
axx1, = ax1.plot(aww*1e3,bww,'b')
axx2, = ax2.plot(a*1e3,b-b[0],'--r')
axx2, = ax2.plot(aww*1e3,bww-bww[0],'r')
interp = interp1d(aww,bww)(a)
axx2, = ax2.plot(a*1e3,(b-b[0])-(interp-bww[0]),':r')
axx3, = ax3.plot(a*1e3,power_input(a,0),'--g')
axx3, = ax3.plot(aww*1e3,1/8*power_input(aww,0),'g')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 dT [K]', color=axx2.get_color())  # we already handled the x-label with ax1
ax3.set_ylabel('r=0 heat flux [W/m2]', color=axx3.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax3.tick_params(axis='y', labelcolor=axx3.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


plt.figure(figsize=(20, 10))
plt.plot(aww*1e3,bww,color=color[0],label='full simulated temperature')
time_after_peak=1.5e-3
plt.plot([aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bww.min(),bww.max()],'--k')
bds = [[20,1e-3,3e-1,0],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
guess=[bww[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]), aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():], bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]-np.mean(bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]))**2)))
plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1],label='double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
plt.title('very weak pulse')
# plt.ylim(bottom=b.min()*0.9,top=b.max()*1.2)
plt.xlim(right=10)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_energy1 = []
all_energy2 = []
all_energy3 = []
all_energy4 = []
all_energy5 = []
all_energy6 = []
for time_after_peak in np.array([0.5,1,1.5,2,3,5])*1e-3:
	plt.figure(figsize=(20, 10))
	plt.plot(aww*1e3,bww,color=color[0],linewidth=4,label='full simulated temperature')
	# plt.plot(a1*1e3,b1,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000616*1e3,1.34e-05*1e3,(13.25+0.0917*0.1)*8e8))
	# plt.plot(a2*1e3,b2,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(1e-07*1e3,0.00108*1e3,(0.1678+0.0917*0.1)*8e8))
	# plt.plot(a3*1e3,b3,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000762*1e3,1.66e-05*1e3,(10.31+0.0917*0.1)*8e8))
	# bds = [[20,1e-3,1e-4,1],[np.inf,np.inf,1e-3,1.0005]]
	# bds = [[b[0]-1,1e-3,1e-6,0],[b[0]+1,np.inf,1,a[np.abs(a-(a[bww.argmax()]+1.5e-3)).argmin()]]]
	# time_after_peak = 5e-3
	plt.title('very weak pulse temperature profile used from ts=%.3gms after the temperature peak' %(time_after_peak*1e3))
	bds1 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess1=[bww[0],1,0.5,0.]
	bds2 = [[20,1e-3,1e-8,0],[np.inf,np.inf,1e-6,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess2=[bww[0],1,1e-6,0.]
	bds3 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,1e-7]]
	guess3=[bww[0],1,0.5,0.]
	bds4 = [[20,1e-3,0.01,0],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess4=[bww[0],1,1,0.]
	bds5 = [[20,1e-3,0.1,0],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess5=[bww[0],1,1,0.]
	bds6 = [[20,1e-3,1e-2,0.2*1e-3],[np.inf,np.inf,1,aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]]]
	guess6=[bww[0],1,0.5,0.6*1e-3]
	# plt.plot([1.5e-3]*2,[b.min(),b.max()],'--k')
	plt.plot([aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bww.min(),bww.max()],'--k')
	for i,arg in enumerate([[bds1,guess1],[bds2,guess2],[bds3,guess3],[bds4,guess4],[bds5,guess5],[bds6,guess6]]):
		bds,guess = arg
		# print(guess)
		fit = curve_fit(semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]), aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():], bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
		fit_wit_errors = correlated_values(fit[0],fit[1])
		energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
		pulse_duration_ms = 1e3*(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
		R2 = 1-np.sum(((bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]-np.mean(bww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin():]))**2)))
		# print(fit_wit_errors)
		if i==0:
			all_energy1.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1],label='free double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1])
		elif i==1:
			all_energy2.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus<1e-6)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==2:
			all_energy3.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0<1e-7)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==3:
			all_energy4.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.01)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==4:
			all_energy5.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.1)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==5:
			all_energy6.append(energy)
			plt.plot(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0>0.2)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(aww[np.abs(aww-(aww[bww.argmax()]+time_after_peak)).argmin()])(aww[aww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
	# guess = [1000,1e8,1e-3,0]
	# bds=[[20,0,0,0],[np.inf,np.inf,np.inf,np.inf]]
	# fit = curve_fit(exponential_decay, a[np.abs(a-(a[bww.argmax()]+time_after_peak)).argmin():], bww[np.abs(a-(a[bww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	# fit_wit_errors = correlated_values(fit[0],fit[1])
	# plt.plot(a*1e3,exponential_decay(a,*fit[0]),'--',label='exponential decay')

	plt.plot(aww*1e3,power_input(aww,0)/np.max(power_input(aw,0))*(bww.max()-bww.min())+bww.min(),':',color=color[i+2],label='power input (not in scale), energy input~1.38J')
	plt.legend(loc='best', fontsize='small')
	plt.ylim(top=(bww.max()-bww.min())*1.4+bww.min())
	plt.xlim(left=-1,right=15)
	plt.xlabel('time [ms]')
	plt.ylabel('temperature [K]')
	plt.grid()
	figure_index+=1
	plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	plt.close('all')
	# plt.pause(0.01)

all_energy1 = np.array(all_energy1)
all_energy2 = np.array(all_energy2)
all_energy3 = np.array(all_energy3)
all_energy4 = np.array(all_energy4)
all_energy5 = np.array(all_energy5)
all_energy6 = np.array(all_energy6)
nominal_energy = 5.5/4	# J
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy1)/nominal_energy,yerr=std_devs(all_energy1)/nominal_energy,color=color[1],label='free double root')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy2)/nominal_energy,yerr=std_devs(all_energy2)/nominal_energy,color=color[2],linestyle='--',label='constrained (taus<1e-6)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy3)/nominal_energy,yerr=std_devs(all_energy3)/nominal_energy,color=color[3],linestyle='--',label='constrained (t0<1e-7)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy4)/nominal_energy,yerr=std_devs(all_energy4)/nominal_energy,color=color[4],linestyle='--',label='constrained (taus>0.01)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy5)/nominal_energy,yerr=std_devs(all_energy5)/nominal_energy,color=color[5],linestyle='--',label='constrained (taus>0.1)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy6)/nominal_energy,yerr=std_devs(all_energy6)/nominal_energy,color=color[6],linestyle='--',label='constrained (t0>0.2)')
plt.plot([0,5],[1]*2,'--k')
plt.plot([1.5]*2,[1,1.1],'--k')
plt.xlabel('start of profile used after temperature peak (ts) [ms]')
plt.ylabel('fitted/delivered energy [au]')
plt.title('very weak pulse')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_all_energy1.append(all_energy1/nominal_energy)


# simulated very very weak pulses
# heat_flux = 0.1e8e^(-(r^2)/(2*(0.005^2)))*(0.0917*0.1+0.5*0.7*e^(-((t-0.00033-1)^2)/(2*(0.000144^2)))+0.5*0.208*e^(-((t-0.000457-1)^2)/(2*(0.000218^2))))

awww=np.array([0,0.0000599623,0.000131965,0.000218391,0.000322104,0.000329971,0.000454426,0.000603676,0.000782847,0.000997901,0.00125587,0.00156546,0.00171006,0.00208151,0.00252736,0.00306225,0.00366223,0.00426233,0.00486231,0.00546229,0.00606227,0.00666225,0.00726223,0.00786233,0.00846231,0.00906229,0.00966227,0.0102623,0.0108622,0.0114623,0.0120623,0.0126623,0.0132623,0.0138622,0.0144622,0.0150623,0.0156623,0.0162623,0.0168623,0.0174622,0.0180622,0.0186623,0.0192623,0.0198623,0.0204623,0.0210623,0.0216622,0.0222623,0.0228623,0.0234623,0.0240623,0.0246623,0.0252622,0.0258622,0.0264623,0.0270623,0.0276623,0.0282623,0.0288622,0.0294622,0.03])
bwww=np.array([304.778,305.132,305.771,306.968,308.48,308.585,309.119,308.422,307.59,306.992,306.612,306.349,306.252,306.081,305.938,305.816,305.715,305.637,305.575,305.524,305.481,305.444,305.413,305.385,305.36,305.338,305.318,305.3,305.284,305.268,305.254,305.241,305.229,305.218,305.208,305.198,305.189,305.18,305.172,305.164,305.156,305.149,305.142,305.136,305.13,305.124,305.118,305.113,305.108,305.103,305.098,305.093,305.089,305.085,305.08,305.076,305.072,305.069,305.065,305.062,305.058])

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('very very weak pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
axx1, = ax1.plot(awww*1e3,bwww,'b')
axx2, = ax2.plot(awww*1e3,1/8*power_input(awww,0),'r')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 heat flux [W/m2]', color=axx2.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

fig, ax1 = plt.subplots(figsize=(20, 10))
plt.title('Comparison between strong (--) and weak (-) pulse')
# fig.subplots_adjust(right=0.8)
ax1.set_xlabel('time [ms]')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
ax3.spines["right"].set_position(("axes", 1.1))
ax3.spines["right"].set_visible(True)
axx1, = ax1.plot(a*1e3,b,'--b')
axx1, = ax1.plot(awww*1e3,bwww,'b')
axx2, = ax2.plot(a*1e3,b-b[0],'--r')
axx2, = ax2.plot(awww*1e3,bwww-bwww[0],'r')
interp = interp1d(awww,bwww)(a)
axx2, = ax2.plot(a*1e3,(b-b[0])-(interp-bwww[0]),':r')
axx3, = ax3.plot(a*1e3,power_input(a,0),'--g')
axx3, = ax3.plot(awww*1e3,1/8/5*power_input(awww,0),'g')
ax1.set_ylabel('r=0 temperature [K]', color=axx1.get_color())
ax2.set_ylabel('r=0 dT [K]', color=axx2.get_color())  # we already handled the x-label with ax1
ax3.set_ylabel('r=0 heat flux [W/m2]', color=axx3.get_color())  # we already handled the x-label with ax1
ax1.tick_params(axis='y', labelcolor=axx1.get_color())
ax2.tick_params(axis='y', labelcolor=axx2.get_color())
ax3.tick_params(axis='y', labelcolor=axx3.get_color())
ax1.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)


plt.figure(figsize=(20, 10))
plt.plot(awww*1e3,bwww,color=color[0],label='full simulated temperature')
time_after_peak=1.5e-3
plt.plot([awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bwww.min(),bwww.max()],'--k')
bds = [[20,1e-3,3e-1,0],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
guess=[bwww[0],1,0.5,0.]
fit = curve_fit(semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]), awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():], bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
fit_wit_errors = correlated_values(fit[0],fit[1])
energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
pulse_duration_ms = 1e3*(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
R2 = 1-np.sum(((bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]-np.mean(bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]))**2)))
plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1],label='double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[1])
plt.legend(loc='best')
plt.xlabel('time [ms]')
plt.ylabel('temperature [K]')
plt.title('very very weak pulse')
# plt.ylim(bottom=b.min()*0.9,top=b.max()*1.2)
plt.xlim(right=10)
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_energy1 = []
all_energy2 = []
all_energy3 = []
all_energy4 = []
all_energy5 = []
all_energy6 = []
for time_after_peak in np.array([0.5,1,1.5,2,3,5])*1e-3:
	plt.figure(figsize=(20, 10))
	plt.plot(awww*1e3,bwww,color=color[0],linewidth=4,label='full simulated temperature')
	# plt.plot(a1*1e3,b1,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000616*1e3,1.34e-05*1e3,(13.25+0.0917*0.1)*8e8))
	# plt.plot(a2*1e3,b2,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(1e-07*1e3,0.00108*1e3,(0.1678+0.0917*0.1)*8e8))
	# plt.plot(a3*1e3,b3,label='simulated step: t0=%.3gms, tau=%.3g, F=%.3gW/m2' %(0.000762*1e3,1.66e-05*1e3,(10.31+0.0917*0.1)*8e8))
	# bds = [[20,1e-3,1e-4,1],[np.inf,np.inf,1e-3,1.0005]]
	# bds = [[b[0]-1,1e-3,1e-6,0],[b[0]+1,np.inf,1,a[np.abs(a-(a[bwww.argmax()]+1.5e-3)).argmin()]]]
	# time_after_peak = 5e-3
	plt.title('very very weak pulse temperature profile used from ts=%.3gms after the temperature peak' %(time_after_peak*1e3))
	bds1 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess1=[bwww[0],1,0.5,0.]
	bds2 = [[20,1e-3,1e-8,0],[np.inf,np.inf,1e-6,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess2=[bwww[0],1,1e-6,0.]
	bds3 = [[20,1e-3,1e-2,0],[np.inf,np.inf,1,1e-7]]
	guess3=[bwww[0],1,0.5,0.]
	bds4 = [[20,1e-3,0.01,0],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess4=[bwww[0],1,1,0.]
	bds5 = [[20,1e-3,0.1,0],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess5=[bwww[0],1,1,0.]
	bds6 = [[20,1e-3,1e-2,0.2*1e-3],[np.inf,np.inf,1,awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]]]
	guess6=[bwww[0],1,0.5,0.6*1e-3]
	# plt.plot([1.5e-3]*2,[b.min(),b.max()],'--k')
	plt.plot([awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]*1e3]*2,[bwww.min(),bwww.max()],'--k')
	for i,arg in enumerate([[bds1,guess1],[bds2,guess2],[bds3,guess3],[bds4,guess4],[bds5,guess5],[bds6,guess6]]):
		bds,guess = arg
		# print(guess)
		fit = curve_fit(semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]), awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():], bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,x_scale=[100,1e5,1e-3,1e-4],maxfev=int(1e4),ftol=1e-15,xtol=1e-15)
		fit_wit_errors = correlated_values(fit[0],fit[1])
		energy = fit_wit_errors[1]*2*np.pi*(0.005**2)
		pulse_duration_ms = 1e3*(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()]-fit_wit_errors[3])*fit_wit_errors[2]
		R2 = 1-np.sum(((bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]-semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():],*fit[0]))**2)/np.sum(((bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]-np.mean(bwww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin():]))**2)))
		# print(fit_wit_errors)
		if i==0:
			all_energy1.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1],label='free double root, E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),color=color[i+1])
		elif i==1:
			all_energy2.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus<1e-6)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==2:
			all_energy3.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0<1e-7)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==3:
			all_energy4.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.01)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==4:
			all_energy5.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (taus>0.1)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
		elif i==5:
			all_energy6.append(energy)
			plt.plot(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_decrease_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]>nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1],label='constrained (t0>0.2)  E='+str(energy)+'J, t0=%.3g+/-%.3gms, tau=%.3g+/-%.3gms, T0=%.3g+/-%.3gK, F0=%.3g+/-%.3gW/m2, R2=%.3g' %(nominal_values(fit_wit_errors[3]*1e3),std_devs(fit_wit_errors[3]*1e3),nominal_values(pulse_duration_ms),std_devs(pulse_duration_ms),nominal_values(fit_wit_errors[0]),std_devs(fit_wit_errors[0]),nominal_values(fit_wit_errors[1]*1e3/pulse_duration_ms),std_devs(fit_wit_errors[1]*1e3/pulse_duration_ms),R2))
			plt.plot(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3]*1e3,semi_infinite_sink_full_increase_K(awww[np.abs(awww-(awww[bwww.argmax()]+time_after_peak)).argmin()])(awww[awww-fit[0][3]<=nominal_values(pulse_duration_ms)*1e-3],*fit[0]),'--',color=color[i+1])
	# guess = [1000,1e8,1e-3,0]
	# bds=[[20,0,0,0],[np.inf,np.inf,np.inf,np.inf]]
	# fit = curve_fit(exponential_decay, a[np.abs(a-(a[bwww.argmax()]+time_after_peak)).argmin():], bwww[np.abs(a-(a[bwww.argmax()]+time_after_peak)).argmin():], guess,bounds=bds,maxfev=int(1e4),xtol=1e-15)#,ftol=1e-12)
	# fit_wit_errors = correlated_values(fit[0],fit[1])
	# plt.plot(a*1e3,exponential_decay(a,*fit[0]),'--',label='exponential decay')

	plt.plot(awww*1e3,power_input(awww,0)/np.max(power_input(aw,0))*(bwww.max()-bwww.min())+bwww.min(),':',color=color[i+2],label='power input (not in scale), energy input~1.38J')
	plt.legend(loc='best', fontsize='small')
	plt.ylim(top=(bwww.max()-bwww.min())*1.4+bwww.min())
	plt.xlim(left=-1,right=15)
	plt.xlabel('time [ms]')
	plt.ylabel('temperature [K]')
	plt.grid()
	figure_index+=1
	plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
	plt.close('all')
	# plt.pause(0.01)

all_energy1 = np.array(all_energy1)
all_energy2 = np.array(all_energy2)
all_energy3 = np.array(all_energy3)
all_energy4 = np.array(all_energy4)
all_energy5 = np.array(all_energy5)
all_energy6 = np.array(all_energy6)
nominal_energy = 5.5/4/5	# J
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy1)/nominal_energy,yerr=std_devs(all_energy1)/nominal_energy,color=color[1],label='free double root')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy2)/nominal_energy,yerr=std_devs(all_energy2)/nominal_energy,color=color[2],linestyle='--',label='constrained (taus<1e-6)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy3)/nominal_energy,yerr=std_devs(all_energy3)/nominal_energy,color=color[3],linestyle='--',label='constrained (t0<1e-7)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy4)/nominal_energy,yerr=std_devs(all_energy4)/nominal_energy,color=color[4],linestyle='--',label='constrained (taus>0.01)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy5)/nominal_energy,yerr=std_devs(all_energy5)/nominal_energy,color=color[5],linestyle='--',label='constrained (taus>0.1)')
plt.errorbar(np.array([0.5,1,1.5,2,3,5]),nominal_values(all_energy6)/nominal_energy,yerr=std_devs(all_energy6)/nominal_energy,color=color[6],linestyle='--',label='constrained (t0>0.2)')
plt.plot([0,5],[1]*2,'--k')
plt.plot([1.5]*2,[1,1.1],'--k')
plt.xlabel('start of profile used after temperature peak (ts) [ms]')
plt.ylabel('fitted/delivered energy [au]')
plt.title('very very weak pulse')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')
# plt.pause(0.01)

all_all_energy1.append(all_energy1/nominal_energy)



all_all_energy1 = np.array(all_all_energy1)
plt.figure(figsize=(20, 10))
plt.errorbar(np.array([22,5.5,5.5/4,5.5/4/5]),nominal_values(all_all_energy1[:,0]),yerr=std_devs(all_all_energy1[:,0]),linestyle='--',color=color[1],label='used data 0.5ms after the peak')
plt.errorbar(np.array([22,5.5,5.5/4,5.5/4/5]),nominal_values(all_all_energy1[:,2]),yerr=std_devs(all_all_energy1[:,2]),color=color[2],label='1.5ms')
plt.errorbar(np.array([22,5.5,5.5/4,5.5/4/5]),nominal_values(all_all_energy1[:,-1]),yerr=std_devs(all_all_energy1[:,-1]),linestyle='--',color=color[3],label='used data 5ms after the peak')
plt.plot([5.5/4/5,22],[1]*2,'--k')
plt.xlabel('Energy delivered to the target [J]')
plt.ylabel('fitted/delivered energy [au]')
plt.title('Comparison of estimated to delivered energy with pulse strength')
plt.legend(loc='best', fontsize='small')
plt.grid()
figure_index+=1
plt.savefig(path_where_to_save_everything +'Figure_'+str(figure_index)+'.png', bbox_inches='tight')
plt.close('all')

















#
#
